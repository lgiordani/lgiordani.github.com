<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The digital cat]]></title>
  <link href="http://lgiordani.github.io/atom.xml" rel="self"/>
  <link href="http://lgiordani.github.io/"/>
  <updated>2014-05-21T09:30:37+02:00</updated>
  <id>http://lgiordani.github.io/</id>
  <author>
    <name><![CDATA[Leonardo Giordani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Method overriding in Python]]></title>
    <link href="http://lgiordani.github.io/blog/2014/05/19/method-overriding-in-python/"/>
    <updated>2014-05-19T13:51:26+02:00</updated>
    <id>http://lgiordani.github.io/blog/2014/05/19/method-overriding-in-python</id>
    <content type="html"><![CDATA[<p>What is overriding? Overriding is the ability of a class to change the implementation of a method provided by one of its ancestors.</p>

<p>Overriding is a very important part of OOP since it is the feature that makes inheritance exploit its full power. Through method overriding a class may &#8220;copy&#8221; another class, avoiding duplicated code, and at the same time enhance or customize part of it. Method overriding is thus a strict part of the inheritance mechanism.</p>

<!--more-->


<h2>A quick glance to inheritance</h2>

<p>As for most OOP languages, in Python inheritance works through implicit delegation: when the object cannot satisfy a request, it first tries to forward the request to its ancestors, following the specific language rules in the case of multiple inheritance.</p>

<p>An exemple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Parent</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_value</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">Parent</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the <code>Child</code> class is empty, but since it inherits from <code>Parent</code> Python takes charge of routing all method calls. So you may use the <code>get_value()</code> method of <code>Child</code> objects and exerything works as expected.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">Child</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">get_value</span><span class="p">()</span>
</span><span class='line'><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Indeed <code>get_value()</code> is not exactly part of the <code>Child</code> class as if it were defined in it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Parent</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">Child</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;__class__&#39;</span><span class="p">,</span> <span class="s">&#39;__delattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__dict__&#39;</span><span class="p">,</span> <span class="s">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s">&#39;__format__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__getattribute__&#39;</span><span class="p">,</span> <span class="s">&#39;__hash__&#39;</span><span class="p">,</span> <span class="s">&#39;__init__&#39;</span><span class="p">,</span> <span class="s">&#39;__module__&#39;</span><span class="p">,</span> <span class="s">&#39;__new__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__reduce__&#39;</span><span class="p">,</span> <span class="s">&#39;__reduce_ex__&#39;</span><span class="p">,</span> <span class="s">&#39;__repr__&#39;</span><span class="p">,</span> <span class="s">&#39;__setattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__sizeof__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__str__&#39;</span><span class="p">,</span> <span class="s">&#39;__subclasshook__&#39;</span><span class="p">,</span> <span class="s">&#39;__weakref__&#39;</span><span class="p">,</span> <span class="s">&#39;get_value&#39;</span><span class="p">,</span> <span class="s">&#39;value&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;__class__&#39;</span><span class="p">,</span> <span class="s">&#39;__delattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__dict__&#39;</span><span class="p">,</span> <span class="s">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s">&#39;__format__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__getattribute__&#39;</span><span class="p">,</span> <span class="s">&#39;__hash__&#39;</span><span class="p">,</span> <span class="s">&#39;__init__&#39;</span><span class="p">,</span> <span class="s">&#39;__module__&#39;</span><span class="p">,</span> <span class="s">&#39;__new__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__reduce__&#39;</span><span class="p">,</span> <span class="s">&#39;__reduce_ex__&#39;</span><span class="p">,</span> <span class="s">&#39;__repr__&#39;</span><span class="p">,</span> <span class="s">&#39;__setattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__sizeof__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__str__&#39;</span><span class="p">,</span> <span class="s">&#39;__subclasshook__&#39;</span><span class="p">,</span> <span class="s">&#39;__weakref__&#39;</span><span class="p">,</span> <span class="s">&#39;get_value&#39;</span><span class="p">,</span> <span class="s">&#39;value&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">(</span><span class="n">Parent</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;__class__&#39;</span><span class="p">,</span> <span class="s">&#39;__delattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__dict__&#39;</span><span class="p">,</span> <span class="s">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s">&#39;__format__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__getattribute__&#39;</span><span class="p">,</span> <span class="s">&#39;__hash__&#39;</span><span class="p">,</span> <span class="s">&#39;__init__&#39;</span><span class="p">,</span> <span class="s">&#39;__module__&#39;</span><span class="p">,</span> <span class="s">&#39;__new__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__reduce__&#39;</span><span class="p">,</span> <span class="s">&#39;__reduce_ex__&#39;</span><span class="p">,</span> <span class="s">&#39;__repr__&#39;</span><span class="p">,</span> <span class="s">&#39;__setattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__sizeof__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__str__&#39;</span><span class="p">,</span> <span class="s">&#39;__subclasshook__&#39;</span><span class="p">,</span> <span class="s">&#39;__weakref__&#39;</span><span class="p">,</span> <span class="s">&#39;get_value&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">(</span><span class="n">Child</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;__class__&#39;</span><span class="p">,</span> <span class="s">&#39;__delattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__dict__&#39;</span><span class="p">,</span> <span class="s">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s">&#39;__format__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__getattribute__&#39;</span><span class="p">,</span> <span class="s">&#39;__hash__&#39;</span><span class="p">,</span> <span class="s">&#39;__init__&#39;</span><span class="p">,</span> <span class="s">&#39;__module__&#39;</span><span class="p">,</span> <span class="s">&#39;__new__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__reduce__&#39;</span><span class="p">,</span> <span class="s">&#39;__reduce_ex__&#39;</span><span class="p">,</span> <span class="s">&#39;__repr__&#39;</span><span class="p">,</span> <span class="s">&#39;__setattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__sizeof__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__str__&#39;</span><span class="p">,</span> <span class="s">&#39;__subclasshook__&#39;</span><span class="p">,</span> <span class="s">&#39;__weakref__&#39;</span><span class="p">,</span> <span class="s">&#39;get_value&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Parent</span><span class="o">.</span><span class="n">__dict__</span>
</span><span class='line'><span class="n">dict_proxy</span><span class="p">({</span><span class="s">&#39;__module__&#39;</span><span class="p">:</span> <span class="s">&#39;__main__&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;get_value&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="n">get_value</span> <span class="n">at</span> <span class="mh">0xb69a656c</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;__dict__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">attribute</span> <span class="s">&#39;__dict__&#39;</span> <span class="n">of</span> <span class="s">&#39;Parent&#39;</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;__weakref__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">attribute</span> <span class="s">&#39;__weakref__&#39;</span> <span class="n">of</span> <span class="s">&#39;Parent&#39;</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;__doc__&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;__init__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="n">__init__</span> <span class="n">at</span> <span class="mh">0xb69a6534</span><span class="o">&gt;</span><span class="p">})</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Child</span><span class="o">.</span><span class="n">__dict__</span>
</span><span class='line'><span class="n">dict_proxy</span><span class="p">({</span><span class="s">&#39;__module__&#39;</span><span class="p">:</span> <span class="s">&#39;__main__&#39;</span><span class="p">,</span> <span class="s">&#39;__doc__&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This shows that the <code>Child</code> class does not actually contain the <code>get_value()</code> method and that a mechanism of automatical delegation is active under the hood. For an insight on this mechanism check <a href="http://lgiordani.github.io/blog/2014/03/05/oop-concepts-in-python-2-dot-x-part-1/">this post</a>.</p>

<h2>Method overriding in action</h2>

<p>In Python method overriding occours simply defining in the child class a method with the same name of a method in the parent class. When you define a method in the object you make this latter able to satisfy that method call, so the implementations of its ancestors do not come in play.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Parent</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_value</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">Parent</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_value</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">+</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now <code>Child</code> objects behave differently</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">Child</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span><span class="o">.</span><span class="n">get_value</span><span class="p">()</span>
</span><span class='line'><span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>


<p>and taking a look inside the class we spot a difference</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Parent</span><span class="o">.</span><span class="n">__dict__</span>
</span><span class='line'><span class="n">dict_proxy</span><span class="p">({</span><span class="s">&#39;__module__&#39;</span><span class="p">:</span> <span class="s">&#39;__main__&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;get_value&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="n">get_value</span> <span class="n">at</span> <span class="mh">0xb69a656c</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;__dict__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">attribute</span> <span class="s">&#39;__dict__&#39;</span> <span class="n">of</span> <span class="s">&#39;Parent&#39;</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;__weakref__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">attribute</span> <span class="s">&#39;__weakref__&#39;</span> <span class="n">of</span> <span class="s">&#39;Parent&#39;</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;__doc__&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;__init__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="n">__init__</span> <span class="n">at</span> <span class="mh">0xb69a6534</span><span class="o">&gt;</span><span class="p">})</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Child</span><span class="o">.</span><span class="n">__dict__</span>
</span><span class='line'><span class="n">dict_proxy</span><span class="p">({</span><span class="s">&#39;__module__&#39;</span><span class="p">:</span> <span class="s">&#39;__main__&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;get_value&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="n">get_value</span> <span class="n">at</span> <span class="mh">0xb69a65a4</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;__doc__&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>since now the <code>Child</code> class actually contains a <code>get_value()</code> method with a different implementation (the id of the two functions are different).</p>

<p>This is of uttermost importance in Python. Inheritance delegation occours automatically, but if a method is overridden the implementation of the ancestors is not considered at all. So, if you want to run the implementation of one or more of the ancestors of your class, you have to call them explicitly.</p>

<p>Why should you want to call the implementation of objects that are deeper in the class hierarchy?</p>

<p>You may want to call it because many times you override a method to enhance its nature, that is to improve the &#8220;quality&#8221; of the result, and to improve something you need to first access it. So, by calling the original implementation, you get the result you later want to improve.</p>

<p>There is however a well defined reason why <strong>you must always call the original implementation</strong>. This reason may be called &#8220;hidden side effects&#8221;.</p>

<p>When you inherit from a class, you are actually inheriting a whole class hierarchy which internal structure is (or shall be considered) unknown. This means that any method call may hide a complex set of operations on the whole class hierarchy, and some of them may be vital for the library or the framework you are using.</p>

<p>Python makes you call the original implementation of an overridden method explicitly (not differently from other object-oriented languages). This surely follows the Python idea that &#8220;Explicit is better than implicit&#8221; (<a href="http://legacy.python.org/dev/peps/pep-0020/">The Zen of Python</a>), but this advice is not just a matter of taste or some sort of programming mannerism.</p>

<p>When you override you have to think if you want to filter the arguments for the original implementation, if you want to filter its results, or both. You typically want to filter arguments (pre-filter) if you want to change the data that the parent implementation shall process while you filter the results (post-filter) if you want to add an additional processing layer. Obviously both things may be done together in the same method. Since you have to explicitly call the parent implementation you are free to do it where you want in the code of the new method: the decision about the type of filtering you want to achieve affects the position of the call.</p>

<h4>An example of pre-filtering</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">datetime</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Logger</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">message</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TimestampLogger</span><span class="p">(</span><span class="n">Logger</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
</span><span class='line'>        <span class="n">message</span> <span class="o">=</span> <span class="s">&quot;{ts} {msg}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">ts</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">isoformat</span><span class="p">(),</span>
</span><span class='line'>                                      <span class="n">msg</span><span class="o">=</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">TimestampLogger</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>TimestampLogger</code> object adds some information to the message string before calling the original implementation of its <code>log()</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span> <span class="o">=</span> <span class="n">Logger</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s">&#39;hi!&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">hi</span><span class="err">!</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">TimestampLogger</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s">&#39;hi!&#39;</span><span class="p">)</span>
</span><span class='line'><span class="mi">2014</span><span class="o">-</span><span class="mo">05</span><span class="o">-</span><span class="mi">19</span><span class="n">T13</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mf">53.402123</span> <span class="n">hi</span><span class="err">!</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>An example of post-filtering</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FileCat</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cat</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filepath</span><span class="p">):</span>
</span><span class='line'>        <span class="n">f</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span><span class='line'>        <span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">lines</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FileCatNoEmpty</span><span class="p">(</span><span class="n">FileCat</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cat</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filepath</span><span class="p">):</span>
</span><span class='line'>        <span class="n">lines</span> <span class="o">=</span> <span class="nb">super</span><span class="p">(</span><span class="n">FileCatNoEmpty</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">cat</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span><span class='line'>        <span class="n">nonempty_lines</span> <span class="o">=</span> <span class="p">[</span><span class="n">l</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">lines</span> <span class="k">if</span> <span class="n">l</span> <span class="o">!=</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">nonempty_lines</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you use the <code>FileCatNoEmpty</code> object you get the result of the <code>FileCat</code> object with the empty lines stripped.</p>

<p>As you can see while in the first example the original implementation has been called as the last thing, in the second one it is called before everything else. There is therefore no fixed position for the call of the original method, and it depends on what you want to do.</p>

<h2>Always call super()?</h2>

<p>Shall we <em>always</em> call the original method implementation? In theory a well designed API should make it always possible but we know that boundary cases exist: the original method may have side effect that you want to avoid and sometimes the API cannot be refactored to avoid them. In those cases you may prefer to skip the call to the original implementation of the method; Python does not make it mandatory, so feel free to walk that path if you think the situation requires it. Be sure to know what you are doing, however, and document why you are completely overwriting the method.</p>

<h2>Summary</h2>

<ul>
<li>Call the original implementation of a method you are overriding whenever possible. This meakes the underlying API work as expected. When in need of skipping the call be sure to document the reasons.</li>
<li>Always use <code>super(cls, self)</code> for Python 2.x or <code>super()</code> for Python 3.x to call the original implementation of a method. This respects the resolution order in case of multiple inheritance and, for Python 3.x, protects from changes in the class hierarchy.</li>
<li>If you call to the original implementation of a method do it as soon as you have all the data you need to run it.</li>
</ul>


<h2>Updates</h2>

<p>2014-05-21 As suggested by <a href="http://www.reddit.com/user/caseyweb">caseyweb</a> in <a href="http://www.reddit.com/r/Python/comments/25y4hu/method_overriding_in_python/chn5v1q">this comment</a> the conclusions of the post were too strong, so I updated the post with a new section (&#8220;Always call super()?&#8221;) and the summary. Many thanks caseyweb!</p>

<h2>Links</h2>

<ul>
<li><a href="https://docs.python.org/3/tutorial/classes.html">Python official documentation on classes</a></li>
</ul>


<h2>Feedback</h2>

<p>Feel free to use <a href="https://plus.google.com/u/0/b/110554719587236016835/110554719587236016835/posts">the blog Google+ page</a> to comment the post. The <a href="https://github.com/lgiordani/lgiordani.github.com/issues">GitHub issues</a> page is the best place to submit corrections.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OOP concepts in Python 2.x - Part 2]]></title>
    <link href="http://lgiordani.github.io/blog/2014/03/10/oop-concepts-in-python-2-dot-x-part-2/"/>
    <updated>2014-03-10T18:56:56+01:00</updated>
    <id>http://lgiordani.github.io/blog/2014/03/10/oop-concepts-in-python-2-dot-x-part-2</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p>This post continues the analysis of the Python OOP implementation started with <a href="http://lgiordani.github.io/blog/2014/03/05/oop-concepts-in-python-2-dot-x-part-1">this post</a>, which I recommend reading before taking on this new one.</p>

<p>This second post discusses the following OOP features in Python:</p>

<ul>
<li>Polymorphism</li>
<li>Classes and instances (again)</li>
<li>Metaclasses</li>
<li>Object creation</li>
</ul>


<p><em>This post refers to the internals of Python 2.x - please note that Python 3.x changes (improves!) some of the features shown here. As soon as I feel comfortable with my Python 3 knowledge, I will post an update.</em></p>

<!--more-->


<h2>Good Morning, Polymorphism</h2>

<p>The term <em>polymorphism</em>, in the OOP lingo, refers to the ability of an object to adapt the code to the type of the data it is processing.</p>

<p>Polymorphism has two major applications in an OOP language. The first is that an object may provide different implementations of one of its methods depending on the type of the input parameters. The second is that code written for a given type of data may be used on data with a derived type, i.e. methods understand the class hierarchy of a type.</p>

<p>In Python polymorphism is one of the key concepts, and we can say that it is a built-in feature. Let us deal with it step by step.</p>

<p>First of all, you know that in Python the type of a variable is not explicitly declared. Beware that this does not mean that Python variables are <em>untyped</em>. On the contrary, everything in Python has a type, it just happens that the type is implicitly assigned. If you remember the last paragraph of the previous post, I stated that in Python variables are just pointers (using a C-like nomenclature), in other words they just tell the language <em>where</em> in memory a variable has been stored. What is stored at that address is not a business of the variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;int&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
</span><span class='line'><span class="s">&#39;0x89812b0&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&quot;five&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span>
</span><span class='line'><span class="s">&#39;five&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;str&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
</span><span class='line'><span class="s">&#39;0xb74bb280L&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This little example shows a lot about the Python typing system. The variable <code>a</code> is not statically declared, after all it can contain only one type of data: a memory address. When we assign the number 5 to it, Python stores in <code>a</code> the <em>address</em> of the number 5 (<code>0x89812b0</code> in my case, but your result will be different). The <code>type()</code> built-in function is smart enough to understand that we are not asking about the type of <code>a</code> (which is always a reference), but about the type of the content. When you store another value in <code>a</code>, the string <code>"five"</code>, Python shamelessly replaces the previous content of the variable with the new address.</p>

<p>So, thanks to the reference system, Python type system is both <em>strong</em> and <em>dynamic</em>. The exact definition of those two concepts is not universal, so if you are interested be ready to dive into a broad matter. However, in Python, the meaning of those two words is the following:</p>

<ul>
<li>type system is <em>strong</em> because everything has a well-defined type, that you can check with the <code>type()</code> built-in</li>
<li>type system is <em>dynamic</em> since the type of a variable is not explicitly declared, but changes with the content</li>
</ul>


<p>Onward! We just scratched the surface of the whole thing.</p>

<p>To explore the subject a little more, try to define the simplest function in Python (apart from an empty function)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">echo</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty straightforward, isn&#8217;t it? Well, if you come from a statically compiled language such as C or C++ you should be at least puzzled. What is <code>a</code>? I mean: what type of data does it contain? Moreover, how can Python know what it is returning if there is no type specification?</p>

<p>Again, if you recall the references stuff everything becomes clear: that function accepts a reference and returns a reference. In other words we just defined a sort of universal function, that does the same thing regardless of the input.</p>

<p>This is exactly the problem that polymorphism wants to solve. We want to describe an action regardless of the type of objects, and this is what we do when we talk among humans. When you describe how to move an object by pushing it, you may explain it using a box, but you expect the person you are addressing to be able to repeat the action even if you need to move a pen, or a book, or a bottle.</p>

<p>There are two main strategies you can apply to get code that performs the same operation regardless of the input types.</p>

<p>The first approach is to cover all cases, and this is a typical approach of procedural languages. If you need to sum two numbers that can be integers, float or complex, you just need to write three <code>sum()</code> functions, one bound to the integer type, the second bound to the float type and the third bound to the complex type, and to have some language feature that takes charge of choosing the correct implementation depending on the input type. This logic can be implemented by a compiler (if the language is statically typed) or by a runtime environment (if the language is dynamically typed) and is the approach chosen by C++. The disadvantage of this solution is that it requires the programmer to forecast all the possible situations: what if I need to sum an integer with a float? What if I need to sum two lists? (Please note that C++ is not so poorly designed, and the operator overloading technique allows to manage such cases, but the base polymorphism strategy of that language is the one exposed here).</p>

<p>The second strategy, the one implemented by Python, is simply to require the input objects to solve the problem for you. In other words you <em>ask the data itself to perform the operation</em>, reversing the problem. Instead of writing a bunch on functions that sum all the possible types in every possible combination you just write one function that requires the input data to sum, trusting that they know how to do it. Does it sound complex? It is not.</p>

<p>Let&#8217;s look at the Python implementation of the <code>+</code> operator. When we write <code>c = a + b</code>, Python actually executes <code>c = a.__add__(b)</code>. As you can see the sum operation is delegated to the first input variable. So if we write</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>there is no need to specify the type of the two input variables. The object <code>a</code> (the object contained in the variable <code>a</code>) shall be able to sum with the object <code>b</code>. This is a very beautiful and simple implementation of the polymorphism concept. Python functions are polymorphic simply because they accept everything and trust the input data to be able to perform some actions.</p>

<p>Let us consider another simple example before moving on. The built-in <code>len()</code> function returns the length of the input object. For example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;Just a sentence&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="mi">15</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see it is perfectly polymorphic: you can feed both a list or a string to it and it just computes its length. Does it work with any type? let&#8217;s check</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">TypeError</span><span class="p">:</span> <span class="nb">object</span> <span class="n">of</span> <span class="nb">type</span> <span class="s">&#39;int&#39;</span> <span class="n">has</span> <span class="n">no</span> <span class="nb">len</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ouch! Seems that the <code>len()</code> function is smart enough to deal with dictionaries, but not with integers. Well, after all, the length of an integer is not defined.</p>

<p>Indeed this is exactly the point of Python polymorphism: <em>the integer type does not define a length operation</em>. While you blame the <code>len()</code> function, the <code>int</code> type is at fault. The <code>len()</code> function just calls the <code>__len__()</code> method of the input object, as you can see from this code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">l</span><span class="o">.</span><span class="n">__len__</span><span class="p">()</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">__len__</span><span class="p">()</span>
</span><span class='line'><span class="mi">15</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="o">.</span><span class="n">__len__</span><span class="p">()</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">i</span><span class="o">.</span><span class="n">__len__</span><span class="p">()</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">AttributeError</span><span class="p">:</span> <span class="s">&#39;int&#39;</span> <span class="nb">object</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="s">&#39;__len__&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>but the <code>'int' object</code> does not define any <code>__len__()</code> method.</p>

<p>So, to sum up what we discovered until here, I would say that <em>Python polymorphism is based on delegation</em>. In the following sections we will talk about the <a href="http://docs.python.org/2/glossary.html#term-eafp">EAFP</a> Python principle, and you will see that the delegation principle is somehow ubiquitous in this language.</p>

<h2>Type Hard</h2>

<p>Another real-life concept that polymorphism wants to bring into a programming language is the ability to walk the class hierarchy, that is <em>to run code on specialized types</em>. This is a complex sentence to say something we are used to do every day, and an example will clarify the matter.</p>

<p>You know how to open a door, it is something you learned in your early years. Under an OOP point of view you are an object (sorry, no humiliation intended) which is capable of interacting with a wood rectangle rotating on hinges. When you can open a door, however, you can also open a window, which, after all, is a specialized type of wood-rectangle-with-hinges, hopefully with some glass in it too. You are also able to open the car door, which is also a specialized type (this one is a mix between a standard door and a window). This shows that, once you know how to interact with the most generic type (basic door) you can also interact with specialized types (window, car door) as soon as they act like the ancestor type (e.g. as soon as they rotate on hinges).</p>

<p>This directly translates into OOP languages: polymorphism requires that <em>code written for a given type may also be run on derived types</em>. For example, a list (a generic list object, not a Python one) that can contain &#8220;numbers&#8221; shall be able to accept integers because they <em>are</em> numbers. The list could specify an ordering operation which requires the numbers to be able to compare each other. So, as soon as integers specify a way to compare each other they can be inserted into the list and ordered.</p>

<p>Statically compiled languages shall provide specific language features to implement this part of the polymorphism concept. In C++, for example, the language needs to introduce the concept of pointer compatibility between parent and child classes.</p>

<p>In Python there is no need to provide special language features to implement subtype polymorphism. As we already discovered Python functions accept any variable without checking the type and rely on the variable itself to provide the correct methods. But you already know that a subtype must provide the methods of the parent type, either redefining them or through implicit delegation, so as you can see Python implements subtype polymorphism from the very beginning.</p>

<p>I think this is one of the most important things to understand when working with this language. Python is not really interested in the actual type of the variables you are working with. It is interested in how those variables act, that is it just wants the variable <em>to provide the right methods</em>. So, if you come from statically typed languages, you need to make a special effort to think about <em>acting like</em> instead of <em>being</em>. This is what we called &#8220;duck typing&#8221;.</p>

<p>Time to do an example. Let us define a <code>Room</code> class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Room</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">door</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">door</span> <span class="o">=</span> <span class="n">door</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">door</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">close</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">door</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">is_open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">door</span><span class="o">.</span><span class="n">is_open</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>A very simple class, as you can see, just enough to exemplify polymorphism. The <code>Room</code> class accepts a <code>door</code> variable, and the type of this variable is not specified. Duck typing in action: the actual type of <code>door</code> is not declared, there is no &#8220;acceptance test&#8221; built in the language. Indeed, the incoming variable shall export the following methods that are used in the <code>Room</code> class: <code>open()</code>, <code>close()</code>, <code>is_open()</code>. So we can build the following classes</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Door</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&quot;closed&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&quot;open&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">close</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&quot;closed&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">is_open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="s">&quot;open&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BooleanDoor</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">close</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">is_open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">status</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both represent a door that can be open or closed, and they implement the concept in two different ways: the first class relies on strings, while the second leverages booleans. Despite <em>being</em> two different types, both <em>act</em> the same way, so both can be used to build a <code>Room</code> object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door</span> <span class="o">=</span> <span class="n">Door</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">bool_door</span> <span class="o">=</span> <span class="n">BooleanDoor</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">room</span> <span class="o">=</span> <span class="n">Room</span><span class="p">(</span><span class="n">door</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">bool_room</span> <span class="o">=</span> <span class="n">Room</span><span class="p">(</span><span class="n">bool_door</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">room</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">room</span><span class="o">.</span><span class="n">is_open</span><span class="p">()</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">room</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">room</span><span class="o">.</span><span class="n">is_open</span><span class="p">()</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">bool_room</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">bool_room</span><span class="o">.</span><span class="n">is_open</span><span class="p">()</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">bool_room</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">bool_room</span><span class="o">.</span><span class="n">is_open</span><span class="p">()</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<h4>File Like Us</h4>

<p>File-like objects are a concrete and very useful example of polymorphism in Python. A file-like object is a class (or the instance of a class) that acts like a file, i.e. it provides those methods a file object exposes.</p>

<p>Say for example that you code a class that parses an XML tree, and that you expect the XML code to be contained in a file. So your class accepts a file in its <code>__init__()</code> method, and reads the content from it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">XMLReader</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">xmlfile</span><span class="p">):</span>
</span><span class='line'>        <span class="n">xmlfile</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">xmlfile</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>        <span class="n">xmlfile</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The class works well until your application shall be modified to receive XML content from a network stream. To use the class without modifying it you shall write the stream in a temporary file and load this latter, but this sounds a little overkill. So you plan to change the class to accept a string, but this way you shall change every single code that uses the class to read a file, since now you shall open, read and close the file on your own, outside the class.</p>

<p>Polymorphism offers a better way. Why not store the incoming stream inside an object that <em>acts like</em> a file, even if it is not an actual one? If you check the StringIO module you will find that such an object has been already invented and provided in the standard Python library.</p>

<p>Other very useful file-like classes are those contained in the <code>gzip</code>, <code>bz2</code>, and <code>zipfile</code> modules (just to name some of the most used), which provide objects that allow you to manage compressed files just like plain files, hiding the decompression/compression machinery.</p>

<h2>Unforgiveness</h2>

<p>EAFP is a Python acronym that stands for <em>easier to ask for forgiveness than permission</em>. This coding style is highly pushed in the Python community because it completely relies on the duck typing concept, thus fitting well with the language philosophy.</p>

<p>The concept behind EAFP is fairly easy: instead of checking if an object has a given attribute or method before actually accessing or using it, just trust the object to provide what you need and manage the error case. This can be probably better understood by looking at some code. According to EAFP, instead of writing</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">someobj</span><span class="p">,</span> <span class="s">&#39;open&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>you shall write</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">someobj</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'>    <span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span><span class='line'><span class="k">except</span> <span class="ne">AttributeError</span><span class="p">:</span>
</span><span class='line'>    <span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the second snippet directly uses the method and deals with the possible <code>AttributeError</code> exception (by the way: managing exceptions is one of the top Black Magic Topics in Python, more on it in a future post. A very quick preview: I think we may learn something from Erlang - check <a href="http://lgiordani.github.io/blog/2013/05/30/error-handling-in-erlang-a-primer/">this</a>).</p>

<p>Why is this coding style pushed so much in the Python community? I think the main reason is that through EAFP you <em>think</em> polymorphically: you are not interested in knowing if the object <em>has</em> the <code>open</code> attribute, you are interested in knowing if the object can satisfy your request, that is to perform the <code>open()</code> method call.</p>

<h2>Intermezzo</h2>

<p>Are you still with me? Good. Now go, make yourself a cup of tea and fasten belts: the Python roller coaster is about to start.</p>

<p>We will leave the polymorphism palace for a while to explore other parts of the Python OOP world. Don&#8217;t worry, however, it is just to lay some foundation before diving another time into the matter.</p>

<h2>The Type Brothers</h2>

<p>The first step into the most intimate secrets of Python objects comes from two components we already met in the first post: <code>type</code> and <code>object</code>. These two things are the very fundamental elements of Python OOP system, so it is worth spending some time to understand how they work and relate each other.</p>

<p>First of all recall that in Python <em>everything is an object</em>, that is everything inherits from <code>object</code>. Thus, <code>object</code> seems to be the deepest thing you can find digging into Python veriables. Let&#8217;s check this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;int&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">__class__</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;int&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__bases__</span>
</span><span class='line'><span class="p">(</span><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;object&#39;</span><span class="o">&gt;</span><span class="p">,)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">object</span><span class="o">.</span><span class="n">__bases__</span>
</span><span class='line'><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The variable <code>a</code> is an instance of the <code>int</code> class, and this latter inherits from <code>object</code>, which inherits from nothing. This demonstrates that <code>object</code> is at the top of the class hierarchy. However, as you can see, both <code>int</code> and <code>object</code> are called <em>types</em> (<code>&lt;type 'int'&gt;</code>, <code>&lt;type 'object'&gt;</code>), which in Python is a pure alias of the word <em>class</em>. Indeed, while <code>a</code> is an instance of the <code>int</code> class, <code>int</code> itself is an instance of another class, <em>a class that is instanced to build classes</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;int&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;type&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;type&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="nb">dict</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;type&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Since in Python everything is an object, everything is the instance of a class, even classes. Well, <code>type</code> is the class that is instanced to get classes. So remember this: <code>object</code> is the base of every object, <code>type</code> is the class of every type. Sounds puzzling? It is not your fault, don&#8217;t worry. However, just to strike you with the finishing move, this is what Python is built on</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="nb">object</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;type&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="o">.</span><span class="n">__bases__</span>
</span><span class='line'><span class="p">(</span><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;object&#39;</span><span class="o">&gt;</span><span class="p">,)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are not about to faint at this point chances are that you are Guido van Rossum of one of his friends down at the Python core development team (in this case let me thank you for your beautiful creation). You may get another cup of tea, if you need it.</p>

<p>Jokes apart, at the very base of Python type system there are two things, <code>object</code> and <code>type</code>, which are inseparable. The previous code shows that <code>object</code> is an instance of <code>type</code>, and <code>type</code> inherits from <code>object</code>. Take your time to understand this subtle concept, as it is very important for the upcoming discussion about metaclasses.</p>

<p>When you think you grasped the <code>type</code>/<code>object</code> matter read this and start thinking again</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="nb">type</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;type&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hint: type is a class (i.e. a type). =)</p>

<h2>The Metaclasses Take Python</h2>

<p>You are now familiar with Python classes. You know that a class is used to create an instance, and that the structure of this latter is ruled by the source class and all its parent classes (until you reach <code>object</code>).</p>

<p>Since classes are objects too, you know that a class itself is an instance of a (super)class, and this class is <code>type</code>. That is, as already stated, <code>type</code> is the class that is used to build classes.</p>

<p>So for example you know that a class may be instanced, i.e. it can be called and by calling it you obtain another object that is linked with the class. What prepares the class for being called? What gives the class all its methods? In Python the class in charge of performing such tasks is called <em>metaclass</em>, and <code>type</code> is the default metaclass of all classes.</p>

<p>The point of exposing this structure of Python objects is that you may change the way classes are built. As you know, <code>type</code> is an object, so it can be subclassed just like any other class. Once you get a subclass of <code>type</code> you need to instruct your class to use it as the metaclass instead of type, and you can do this by setting the <code>__metaclass__</code> attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">MyType</span><span class="p">(</span><span class="nb">type</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>  <span class="k">pass</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">MySpecialClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>  <span class="n">__metaclass__</span> <span class="o">=</span> <span class="n">MyType</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">msp</span> <span class="o">=</span> <span class="n">MySpecialClass</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">msp</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">MySpecialClass</span><span class="s">&#39;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">MySpecialClass</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">MyType</span><span class="s">&#39;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">MyType</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;type&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Metaclasses 2: Singleton Day</h4>

<p>Metaclasses are a very advanced topic in Python, but they have many practical uses. For example, by means of a custom metaclass you may log any time a class is instanced, which can be important for applications that shall keep a low memory usage or have to monitor it.</p>

<p>I am going to show here a very simple example of metaclass, the Singleton. Singleton is a well known design pattern, and many description of it may be found on the Internet. It has also been heavily criticized mostly because its bad behaviour when subclassed, but here I do not want to introduce it for its technological value, but for its simplicity (so please do not question the choice, it is just an example). Check the links at the bottom if you are interested in this topic.</p>

<p>Singleton has one purpose: to return the same instance every time it is instanced, like a sort of object-oriented global variable. So we need to build a class that does not work like standard classes, which return a new instance every time they are called.</p>

<p>&#8220;Build a class&#8221;? This is a task for metaclasses. The following implementation comes from <a href="http://python-3-patterns-idioms-test.readthedocs.org/en/latest/Metaprogramming.html#intercepting-class-creation">Python 3 Patterns, Recipes and Idioms</a>, but is also valid for Python 2.x</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Singleton</span><span class="p">(</span><span class="nb">type</span><span class="p">):</span>
</span><span class='line'>    <span class="n">instance</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">cls</span><span class="o">.</span><span class="n">instance</span><span class="p">:</span>
</span><span class='line'>             <span class="n">cls</span><span class="o">.</span><span class="n">instance</span> <span class="o">=</span> <span class="nb">super</span><span class="p">(</span><span class="n">Singleton</span><span class="p">,</span> <span class="n">cls</span><span class="p">)</span><span class="o">.</span><span class="n">__call__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cls</span><span class="o">.</span><span class="n">instance</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are defining a new type, which inherits from <code>type</code> to provide all bells and whistles of Python classes. We override the <code>__call__</code> method, that is a special method invoked when we call the class, i.e. when we instance it. The new method wraps the original method of <code>type</code> by calling it only when the <code>instance</code> attribute is not set, i.e. the first time the class is instanced, otherwise it just returns the recorded instance. As you can see this is a very basic cache class, the only trick is that it is applied to the creation of instances.</p>

<p>To test the new type we need to define a new class that uses it as its metaclass</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">ASingleton</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="n">__metaclass__</span> <span class="o">=</span> <span class="n">Singleton</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="n">ASingleton</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">ASingleton</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="ow">is</span> <span class="n">b</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
</span><span class='line'><span class="s">&#39;0xb6aae28cL&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">b</span><span class="p">))</span>
</span><span class='line'><span class="s">&#39;0xb6aae28cL&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By using the <code>is</code> operator we test that the two objects are the very same structure in memory, that is their ids are the same, as explicitly shown. What actually happens is that when you issue <code>a = ASingleton()</code> the <code>ASingleton</code> class runs its <code>__call__()</code> method, which is taken from the <code>Singleton</code> type behind the class. That method recognizes that no instance has been created (<code>Singleton.instance</code> is <code>None</code>) and acts just like any standard class does. When you issue <code>b = ASingleton()</code> the very same things happen, but since <code>Singleton.instance</code> is now different from <code>None</code> its value (the previous instance) is directly returned.</p>

<p>Metaclasses are a very powerful programming tool and leveraging them you can achieve very complex behaviours with a small effort. Their use is a must every time you are actually metaprogramming, that is you are writing code that has to drive the way your code works. Good examples are creational patterns (injecting custom class attributes depending on some configuration), testing, debugging, and performance monitoring.</p>

<h2>Coming to Instance</h2>

<p>Before introducing you to a very smart use of metaclasses by talking about Abstract Base Classes (read: to save some topics for the third part of this series), I want to dive into the object creation procedure in Python, that is what happens when you instance a class. In the previous post this procedure was described only partially, by looking at the <code>__init_()</code> method.</p>

<p>In the first post I recalled the object-oriented concept of <em>constructor</em>, which is a special method of the class that is automatically called when the instance is created. The class may also define a destructor, which is called when the object is destroyed. In languages without a garbage collection mechanism such as C++ the destructor shall be carefully designed. In Python the destructor may be defined through the <code>__del__()</code> method, but it is hardly used.</p>

<p>The constructor mechanism in Python is on the contrary very important, and it is implemented by two methods, instead of just one: <code>__new__()</code> and <code>__init__()</code>. The tasks of the two methods are very clear and distinct: <code>__new__()</code> shall perform actions needed when <em>creating</em> a new instance while <code>__init__</code> deals with object <em>initialization</em>.</p>

<p>Since in Python you do not need to declare attributes due to its dynamic nature, <code>__new__()</code> is rarely defined by programmers, who may rely on <code>__init__</code> to perform the majority of the usual tasks. Typical uses of <code>__new__()</code> are very similar to those listed in the previous section, since it allows to trigger some code whenever your class is instanced.</p>

<p>The standard way to override <code>__new__()</code> is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds</span><span class="p">):</span>
</span><span class='line'>        <span class="n">obj</span> <span class="o">=</span> <span class="nb">super</span><span class="p">(</span><span class="n">MyClass</span><span class="p">,</span> <span class="n">cls</span><span class="p">)</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds</span><span class="p">)</span>
</span><span class='line'>        <span class="p">[</span><span class="n">put</span> <span class="n">your</span> <span class="n">code</span> <span class="n">here</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">obj</span>
</span></code></pre></td></tr></table></div></figure>


<p>just like you usually do with <code>__init__()</code>. When your class inherits from <code>object</code> you do not need to call the parent method (<code>object.__init__()</code>) because it is empty.</p>

<p>Remember that <code>__new__()</code> is not forced to return an instance of the class in which it is defined, even if you shall have very good reasons to break this behaviour. Anyway, <code>__init__()</code> will be called only if you return an instance of the container class. Please also note that <code>__new__()</code>, unlike <code>__init__()</code>, accepts the class as its first parameter. The name is not important in Python, and you can also call it <code>self</code>, but it is worth using <code>cls</code> to remember that it is not an instance.</p>

<h2>Final words</h2>

<p>Next post will introduce Abstract Base Classes as the major topic. Slots are another topic which for many people is buried into the Tome of Python Secrets and is worth uncovering. Stay tuned! You can <a href="https://twitter.com/tw_lgiordani/">follow me on Twitter</a> if you want to get the latest news from the blog.</p>

<h2>Movie Trivia</h2>

<p>This time section titles come from the following movies: <em>Good Morning, Vietnam</em>, <em>Die Hard</em>, <em>Spies Like Us</em>, <em>Unforgiven</em>, <em>The Blues Brothers</em>, <em>The Muppets Take Manhattan</em>, <em>Terminator 2: Judgement Day</em>, <em>Coming to America</em></p>

<h2>Sources</h2>

<p>Some sources for the content of this post. Thank you authors!</p>

<ul>
<li><a href="http://docs.python.org/2/tutorial/classes.html">The official Python documentation</a> and the Python source code.</li>
<li><a href="http://www.cafepy.com/article/python_types_and_objects/">Python Types and Objects - by Shalabh Chaturvedi</a></li>
<li><a href="http://www.amazon.com/Python-Nutshell-Second-Edition-In/dp/0596100469/">Python in a Nutshell - by Alex Martelli</a></li>
<li><a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/">Design Patterns: Elements of Reusable Object-Oriented Software - by Gamma, Helm, Johnson, Vlissides</a></li>
<li><a href="http://python-3-patterns-idioms-test.readthedocs.org/en/latest/">Python 3 Patterns, Recipes and Idioms</a></li>
<li><a href="http://www.aleax.it/5ep.html">Singleton and Borg patterns - by Alex Martelli</a></li>
<li>Many <a href="http://stackoverflow.com/questions/tagged/python">Stackoverflow</a> questions and answers</li>
</ul>


<h2>Feedback</h2>

<p>Feel free to use <a href="https://plus.google.com/u/0/b/110554719587236016835/110554719587236016835/posts">the blog Google+ page</a> to comment the post. The <a href="https://github.com/lgiordani/lgiordani.github.com/issues">GitHub issues</a> page is the best place to submit corrections.</p>

<h2>Previous articles</h2>

<ul>
<li><a href="http://lgiordani.github.io/blog/2014/03/05/oop-concepts-in-python-2-dot-x-part-1">OOP Concepts in Python 2.x - Part 1</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OOP concepts in Python 2.x - Part 1]]></title>
    <link href="http://lgiordani.github.io/blog/2014/03/05/oop-concepts-in-python-2-dot-x-part-1/"/>
    <updated>2014-03-05T12:46:06+01:00</updated>
    <id>http://lgiordani.github.io/blog/2014/03/05/oop-concepts-in-python-2-dot-x-part-1</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p>Object-oriented programming (OOP) has been the leading programming paradigm for several decades now, starting from the initial attempts back in the 60s to some of the most important languages used nowadays. Being a set of programming concepts and design methodologies, OOP can never be said to be &#8220;correctly&#8221; or &#8220;fully&#8221; implemented by a language: indeed there are as many implementations as languages.</p>

<p>So one of the most interesting aspects of OOP languages is to understand how they implement those concepts. In this post I am going to try and start analyzing the OOP implementation of the Python language. Due to the richness of the topic, however, I consider this attempt just like a set of thoughts for Python beginners trying to find their way into this beautiful (and sometimes peculiar) language.</p>

<p>This first post covers the following topics:</p>

<ul>
<li>Objects and types</li>
<li>Classes and instances</li>
<li>Object members: methods and attributes</li>
<li>Delegation: inheritance and composition</li>
</ul>


<p><em>This post refers to the internals of Python 2.x - please note that Python 3.x changes (improves!) some of the features shown here. As soon as I feel comfortable with my Python 3 knowledge, I will post an update.</em></p>

<!--more-->


<h2>Back to the Object</h2>

<p>Computer science deals with data and with procedures to manipulate that data. Everything, from the earliest Fortran programs to the latest mobile apps is about data and their manipulation.</p>

<p>So if data are the ingredients and procedures are the recipes, it seems (and can be) reasonable to keep them separate.</p>

<p>Let&#8217;s do some procedural programming in Python</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># This is some data</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">378</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This is a procedure that computes the average</span>
</span><span class='line'><span class="k">def</span> <span class="nf">avg</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">avg</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the procedure is quite good and general: the procedure is run on a sequence of data, and it returns the average of the sequence items. So far, so good: computing the average of some numbers leaves the numbers untouched and creates new data.</p>

<p>The observation of the everyday world, however, shows that <em>complex data mutate</em>: an electrical device is on or off, a door is open or closed, the content of a bookshelf in your room changes as you buy new books.</p>

<p>You can still manage it keeping data and procedures separate, for example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># These are two numbered doors, initially closed</span>
</span><span class='line'><span class="n">door1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;closed&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">door2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="s">&#39;closed&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This procedure opens a door</span>
</span><span class='line'><span class="k">def</span> <span class="nf">open_door</span><span class="p">(</span><span class="n">door</span><span class="p">):</span>
</span><span class='line'>    <span class="n">door</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;open&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">open_door</span><span class="p">(</span><span class="n">door1</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">door1</span>
</span></code></pre></td></tr></table></div></figure>


<p>I described a door as a structure containing a number and the status of the door. The procedure knows how this structure is made and may alter it.</p>

<p>This also works like a charm. Some problems arise, however, when we start building specialized types of data. What happens, for example, when I introduce a &#8220;lockable door&#8221; data type, which can be opened only when it is not locked? Let&#8217;s see</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># These are two standard doors, initially closed</span>
</span><span class='line'><span class="n">door1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;closed&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">door2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="s">&#39;closed&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This is a lockable door, initially closed and unlocked</span>
</span><span class='line'><span class="n">ldoor1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;closed&#39;</span><span class="p">,</span> <span class="s">&#39;unlocked&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This procedure opens a standard door</span>
</span><span class='line'><span class="k">def</span> <span class="nf">open_door</span><span class="p">(</span><span class="n">door</span><span class="p">):</span>
</span><span class='line'>    <span class="n">door</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;open&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This procedure opens a lockable door</span>
</span><span class='line'><span class="k">def</span> <span class="nf">open_ldoor</span><span class="p">(</span><span class="n">door</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">door</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;unlocked`:</span>
</span><span class='line'>        <span class="n">door</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sb">`open`</span>
</span><span class='line'>
</span><span class='line'><span class="n">open_door</span><span class="p">(</span><span class="n">door1</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">door1</span>
</span><span class='line'>
</span><span class='line'><span class="n">open_ldoor</span><span class="p">(</span><span class="n">ldoor1</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">ldoor1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything still works, no surprises in this code. However, as you can see, I had to find a different name for the procedure that opens a locked door since its implementation differs from the procedure that opens a standard door. But, wait&#8230; I&#8217;m still opening a door, the action is the same, and it just changes the status of the door itself. So why shall I remember that a locked door shall be opened with <code>open_ldoor()</code> instead of <code>open_door()</code> if the verb is the same?</p>

<p>Chances are that this separation between data and procedures doesn&#8217;t perfectly fit some situations. The key problem is that the &#8220;open&#8221; action is not actually <em>using</em> the door; rather it is <em>changing its state</em>. So, just like the volume control buttons of your phone, which are <em>on</em> your phone, the &#8220;open&#8221; procedure should stick to the &#8220;door&#8221; data.</p>

<p>This is exactly what leads to the concept of <em>object</em>: an object, in the OOP context, is a structure holding data <em>and</em> procedures operating on them.</p>

<h2>What About Type?</h2>

<p>When you talk about data you immediately need to introduce the concept of <em>type</em>. This concept may have two meanings that are worth being mentioned in computer science: the <em>behavioural</em> and the <em>structural</em> one.</p>

<p>The behavioural meaning represents the fact that you know what something is by describing how it acts. This is the foundation of the so-called &#8220;duck typing&#8221; (here &#8220;typing&#8221; means &#8220;to give a type&#8221; and not &#8220;to type on a keyboard&#8221;): if it <del>types</del> acts like a duck, it <em>is</em> a duck.</p>

<p>The structural meaning identifies the type of something by looking at its internal structure. So two things that act in the same way but are internally different are of different type.</p>

<p>Both points of view can be valid, and different languages may implement and emphasize one meaning of type or the other, and even both.</p>

<h2>Class Games</h2>

<p>Objects in Python may be built describing their structure through a <em>class</em>. A class is the programming representation of a generic object, such as &#8220;a book&#8221;, &#8220;a car&#8221;, &#8220;a door&#8221;: when I talk about &#8220;a door&#8221; everyone can understand what I&#8217;m saying, without the need of referring to a specific door in the room.</p>

<p>In Python, the type of an object is represented by the class used to build the object: that is, in Python the word <em>type</em> has the same meaning of the word <em>class</em>.</p>

<p>For example, one of the built-in classes of Python is <code>int</code>, which represents an integer number</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">6</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">a</span>
</span><span class='line'><span class="mi">6</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;int&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">a</span><span class="o">.</span><span class="n">__class__</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;int&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the built-in function <code>type()</code> returns the content of the <em>magic attribute</em> <code>__class__</code> (magic here means that its value is managed by Python itself offstage). The type of the variable <code>a</code>, or its class, is <code>int</code>. (This is a very inaccurate description of this rather complex topic, so remember that we are just scratching the surface).</p>

<p>Once you have a class you can <em>instantiate</em> it to get a concrete object (an <em>instance</em>) of that type, i.e. an objects built according to the structure of that class. The Python syntax to instantiate a class is the same of a function call</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;int&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you create an instance, you can pass some values, according to the class definition, to <em>initialize</em> it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">b</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">c</span>
</span><span class='line'><span class="mi">7</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, the <code>int</code> class creates an integer with value 0 when called without arguments, otherwise it uses the given argument to initialize the newly created object.</p>

<p>Let us write a class that represents a door to match the procedural examples done in the first section</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Door</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">status</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">number</span> <span class="o">=</span> <span class="n">number</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">status</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&#39;open&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">close</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&#39;closed&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>class</code> keyword defines a new class named <code>Door</code>; everything indented under <code>class</code> is part of the class. The functions you write inside the object are called <em>methods</em> and don&#8217;t differ at all from standard functions; the name changes only to highlight the fact that those functions now are part of an object.</p>

<p>Methods of a class must accept as first argument a special value called <code>self</code> (the name is a convention but please never break it).</p>

<p>The class can be given a special method called <code>__init__()</code> which is run when the class is instantiated, receiving the arguments passed when calling the class; the general name of such a method, in the OOP context, is <em>constructor</em>, even if the <code>__init__()</code> method is not the only part of this mechanism in Python.</p>

<p>The <code>self.number</code> and <code>self.status</code> variables are called <em>attributes</em> of the object. In Python, methods and attributes are both <em>members</em> of the object and are accessible with the dotted syntax; the difference between attributes and methods is that the latter can be called (in Python lingo you say that a method is a <em>callable</em>).</p>

<p>As you can see the <code>__init__()</code> method shall create and initialize the attributes since they are not declared elsewhere.</p>

<p>The class can be used to create a concrete object</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span> <span class="o">=</span> <span class="n">Door</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;closed&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">door1</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">Door</span><span class="s">&#39;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">door1</span><span class="o">.</span><span class="n">number</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">door1</span><span class="o">.</span><span class="n">status</span>
</span><span class='line'><span class="n">closed</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now <code>door1</code> is an instance of the <code>Door</code> class; <code>type()</code> returns the class as <code>__main__.Door</code> since the class was defined directly in the interactive shell, that is in the current main module. To call a method of an object, that is to run one of its internal functions, you just access it as an attribute with the dotted syntax and call it like a standard function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">door1</span><span class="o">.</span><span class="n">number</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">door1</span><span class="o">.</span><span class="n">status</span>
</span><span class='line'><span class="nb">open</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, the <code>open()</code> method of the <code>door1</code> instance has been called. No arguments have been passed to the <code>open()</code> method, but if you review the class declaration, you see that it was declared to accept an argument (<code>self</code>). When you call a method of an instance, Python automatically passes the instance itself to the method as the first argument.</p>

<p>You can create as many instances as needed and they are completely unrelated each other. That is the changes you make on one instance do not reflect on another instance of the same class.</p>

<h4>Recap</h4>

<p>Objects are described by a <em>class</em>, which can generate one or more <em>instances</em>, unrelated each other. A class contains <em>methods</em>, which are functions, and they accept at least one argument called <code>self</code>, which is the actual instance on which the method has been called. A special method, <code>__init__()</code> deals with the initialization of the object, seting the initial value of the <em>attributes</em>.</p>

<h2>Python Classes Strike Again</h2>

<p>The Python implementation of classes has some peculiarities. The bare truth is that in Python the class of an object is an object itself. You can check this by issuing <code>type()</code> on the class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">door1</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">Door</span><span class="s">&#39;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="nb">type</span><span class="p">(</span><span class="n">Door</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;type&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This shows that the <code>Door</code> class is an object, an instance of the <code>type</code> class.</p>

<p>This concept is not so difficult to grasp as it can seem at first sight: in the real world we deal with concepts using them like <em>things</em>: for example we can talk about the concept of &#8220;door&#8221;, telling people how a door looks like and how it works. So in our everyday experience the <em>type</em> of an object is an object itself. In Python this can be expressed by saying that <em>everything is an object</em>.</p>

<p>If the class is an instance it is a concrete object and is stored somewhere in memory. Let us leverage the <em>inspection</em> capabilities of Python and its <code>id()</code> function to check the status of our objects. The <code>id()</code> built-in function returns the memory position of an object.</p>

<p>First of all, let&#8217;s check that the two objects are stored at different addresses</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">door1</span><span class="p">))</span>
</span><span class='line'><span class="s">&#39;0x7fa4c818bad0&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">door2</span><span class="p">))</span>
</span><span class='line'><span class="s">&#39;0x7fa4c818b890&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This confirms that the two instances are separate and unrelated.
<strong>Please note that your values are very likely to be different from the ones I got.</strong></p>

<p>However if we use <code>id()</code> on the class of the two instances we discover that the class is <em>exactly</em> the same</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">door1</span><span class="o">.</span><span class="n">__class__</span><span class="p">))</span>
</span><span class='line'><span class="s">&#39;0x766800&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">door2</span><span class="o">.</span><span class="n">__class__</span><span class="p">))</span>
</span><span class='line'><span class="s">&#39;0x766800&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well this is very important. In Python, a class is not just the schema used to build an object. Rather, the class is a shared living object, which code is accessed at run time.</p>

<p>As we already tested, however, attributes are not stored in the class but in every instance, due to the fact that <code>__init__()</code> works on <code>self</code> when creating them. Classes, however, can be given attributes like any other object; with a terrific effort of imagination, let&#8217;s call them <em>class attributes</em>.</p>

<p>As you can expect, class attributes are shared among the class instances just like their container</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Door</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="n">colour</span> <span class="o">=</span> <span class="s">&#39;brown&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">status</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">number</span> <span class="o">=</span> <span class="n">number</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">status</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&#39;open&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">close</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&#39;closed&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>colour</code> attribute here is not created using <code>self</code>, and any change of its value reflects on all instances</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span> <span class="o">=</span> <span class="n">Door</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;closed&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door2</span> <span class="o">=</span> <span class="n">Door</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">&#39;closed&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Door</span><span class="o">.</span><span class="n">colour</span>
</span><span class='line'><span class="s">&#39;brown&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">colour</span>
</span><span class='line'><span class="s">&#39;brown&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door2</span><span class="o">.</span><span class="n">colour</span>
</span><span class='line'><span class="s">&#39;brown&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Door</span><span class="o">.</span><span class="n">colour</span> <span class="o">=</span> <span class="s">&#39;white&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Door</span><span class="o">.</span><span class="n">colour</span>
</span><span class='line'><span class="s">&#39;white&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">colour</span>
</span><span class='line'><span class="s">&#39;white&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door2</span><span class="o">.</span><span class="n">colour</span>
</span><span class='line'><span class="s">&#39;white&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">Door</span><span class="o">.</span><span class="n">colour</span><span class="p">))</span>
</span><span class='line'><span class="s">&#39;0xb74c5420L&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">door1</span><span class="o">.</span><span class="n">colour</span><span class="p">))</span>
</span><span class='line'><span class="s">&#39;0xb74c5420L&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">door2</span><span class="o">.</span><span class="n">colour</span><span class="p">))</span>
</span><span class='line'><span class="s">&#39;0xb74c5420L&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Raiders of the Lost Attribute</h2>

<p>Any Python object is automatically given a <code>__dict__</code> attribute, which contains its list of attributes. Let&#8217;s investigate what this dictionary contains for our example objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Door</span><span class="o">.</span><span class="n">__dict__</span>
</span><span class='line'><span class="n">dict_proxy</span><span class="p">({</span><span class="s">&#39;__module__&#39;</span><span class="p">:</span> <span class="s">&#39;__main__&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;colour&#39;</span><span class="p">:</span> <span class="s">&#39;brown&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;__weakref__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">attribute</span> <span class="s">&#39;__weakref__&#39;</span> <span class="n">of</span> <span class="s">&#39;Door&#39;</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;__dict__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">attribute</span> <span class="s">&#39;__dict__&#39;</span> <span class="n">of</span> <span class="s">&#39;Door&#39;</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;close&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="n">close</span> <span class="n">at</span> <span class="mh">0xb6a8a56c</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;open&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="nb">open</span> <span class="n">at</span> <span class="mh">0xb6a8a534</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;__doc__&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;__init__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="n">__init__</span> <span class="n">at</span> <span class="mh">0xb6a8a48c</span><span class="o">&gt;</span><span class="p">})</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">__dict__</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;closed&#39;</span><span class="p">,</span> <span class="s">&#39;number&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Leaving aside the difference between a dictionary and a <code>dict_proxy</code> object, you can see that the <code>colour</code> attribute is listed among the <code>Door</code> class attributes, while <code>status</code> and <code>number</code> are listed for the instance.</p>

<p>How comes that we can call <code>door1.colour</code>, if that attribute is not listed for that instance? This is a job performed by the magic <code>__getattribute__()</code> method; in Python the dotted syntax automatically invokes this method so when we write <code>door1.colour</code>, Python executes <code>door1.__getattribute__('colour')</code>. That method performs the  <em>attribute  lookup</em> action, i.e. finds the value of the attribute by looking in different places.</p>

<p>The standard implementation of <code>__getattribute__()</code> searches first the internal dictionary (<code>__dict__</code>) of an object, then the type of the object itself; in this case <code>door1.__getattribute__('colour')</code> executes first <code>door1.__dict__['colour']</code> and then <code>door1.__class__.__dict__['colour']</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;colour&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">KeyError</span><span class="p">:</span> <span class="s">&#39;colour&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;colour&#39;</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;brown&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Indeed, if we check the objects equality through the <code>is</code> operator we can confirm that both <code>door1.colour</code> and <code>Door.colour</code> are exactly the same object</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">colour</span> <span class="ow">is</span> <span class="n">Door</span><span class="o">.</span><span class="n">colour</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we try to assign a value to a class attribute directly on an instance, we just put in the <code>__dict__</code> of the instance a value with that name, and this value masks the class attribute since it is found first by <code>__getattribute__()</code>. As you can see from the examples of the previous section, this is different from changing the value of the attribute on the class itself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">colour</span> <span class="o">=</span> <span class="s">&#39;white&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;colour&#39;</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;white&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;colour&#39;</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;brown&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Door</span><span class="o">.</span><span class="n">colour</span> <span class="o">=</span> <span class="s">&#39;red&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;colour&#39;</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;white&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;colour&#39;</span><span class="p">]</span>
</span><span class='line'><span class="s">&#39;red&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Revenge of the Methods</h2>

<p>Let&#8217;s play the same game with methods. First of all you can see that, just like class attributes, methods are listed only in the class <code>__dict__</code>. Chances are that they behave the same as attributes when we get them</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">open</span> <span class="ow">is</span> <span class="n">Door</span><span class="o">.</span><span class="n">open</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whoops. Let us further investigate the matter</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Door</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;open&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">function</span> <span class="nb">open</span> <span class="n">at</span> <span class="mh">0xb73ee10c</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Door</span><span class="o">.</span><span class="n">open</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">unbound</span> <span class="n">method</span> <span class="n">Door</span><span class="o">.</span><span class="n">open</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">open</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">bound</span> <span class="n">method</span> <span class="n">Door</span><span class="o">.</span><span class="n">open</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">Door</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xb73f956c</span><span class="o">&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, the class method is listed in the members dictionary as <em>function</em>. So far, so good. The same method, taken directly from the class is returned as <em>unbound method</em>, while taking it from the instance it changes to <em>bound method</em>. Well, a <em>function</em> is a procedure you named and defined with the <code>def</code> statement. When you refer to a function as part of a class you get an unbound method. The name <em>method</em> simply means &#8220;a function inside a class&#8221;, according to the usual OOP definitions, while <em>unbound</em> signals that the method is not bound to any instance. As you can see, as soon as you access the method from an instance, the method becomes <em>bound</em>.</p>

<p>Why does Python bother with methods being bound or unbound? And how does Python transform an unbound method into a bound one?</p>

<p>First of all, if you try to call an unbound method you get an error</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Door</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">TypeError</span><span class="p">:</span> <span class="n">unbound</span> <span class="n">method</span> <span class="nb">open</span><span class="p">()</span> <span class="n">must</span> <span class="n">be</span> <span class="n">called</span> <span class="k">with</span>
</span><span class='line'>    <span class="n">Door</span> <span class="n">instance</span> <span class="k">as</span> <span class="n">first</span> <span class="n">argument</span> <span class="p">(</span><span class="n">got</span> <span class="n">nothing</span> <span class="n">instead</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>so by default Python considers methods as functions that shall operate on instances, and calling them from the class leaves the interpreter puzzled. Let us try to pass the instance as suggested by the exception message</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Door</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">door1</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">status</span>
</span><span class='line'><span class="s">&#39;open&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python does not complain here, and the method works as expected. So <code>Door.open(door1)</code> is the same as <code>door1.open()</code>. Again, under the hood, <code>__getattribute__()</code> is working to make everything work and when we call <code>door1.open()</code>, Python actually calls <code>door1.__class__.open(door1)</code>. However, <code>door1.__class__.open</code> is an unbound method, so there is something more that converts it into a bound method that Python can safely call.</p>

<p>When you access a member of an object, Python calls <code>__getattribute__()</code> to satisfy the request. This magic method, however, conforms to a procedure known as <em>descriptor protocol</em>. For the read access <code>__getattribute__()</code> checks if the object has a <code>__get__()</code> method and calls this latter. So for function the conversion from an unbound into a bound method is made by such a mechanism. Let us review it by means of an example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;open&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">function</span> <span class="nb">open</span> <span class="n">at</span> <span class="mh">0xb73ee10c</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This syntax retrieves the function defined in the class; the function knows nothing about objects, but it <em>is</em> an object (remember &#8220;everything is an object&#8221;). So we can look inside it with the <code>dir()</code> built-in function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">(</span><span class="n">door1</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;open&#39;</span><span class="p">])</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;__call__&#39;</span><span class="p">,</span> <span class="s">&#39;__class__&#39;</span><span class="p">,</span> <span class="s">&#39;__closure__&#39;</span><span class="p">,</span> <span class="s">&#39;__code__&#39;</span><span class="p">,</span> <span class="s">&#39;__defaults__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__delattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__dict__&#39;</span><span class="p">,</span> <span class="s">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s">&#39;__format__&#39;</span><span class="p">,</span> <span class="s">&#39;__get__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__getattribute__&#39;</span><span class="p">,</span> <span class="s">&#39;__globals__&#39;</span><span class="p">,</span> <span class="s">&#39;__hash__&#39;</span><span class="p">,</span> <span class="s">&#39;__init__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__module__&#39;</span><span class="p">,</span> <span class="s">&#39;__name__&#39;</span><span class="p">,</span> <span class="s">&#39;__new__&#39;</span><span class="p">,</span> <span class="s">&#39;__reduce__&#39;</span><span class="p">,</span> <span class="s">&#39;__reduce_ex__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;__repr__&#39;</span><span class="p">,</span> <span class="s">&#39;__setattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__sizeof__&#39;</span><span class="p">,</span> <span class="s">&#39;__str__&#39;</span><span class="p">,</span> <span class="s">&#39;__subclasshook__&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;func_closure&#39;</span><span class="p">,</span> <span class="s">&#39;func_code&#39;</span><span class="p">,</span> <span class="s">&#39;func_defaults&#39;</span><span class="p">,</span> <span class="s">&#39;func_dict&#39;</span><span class="p">,</span> <span class="s">&#39;func_doc&#39;</span><span class="p">,</span>
</span><span class='line'> <span class="s">&#39;func_globals&#39;</span><span class="p">,</span> <span class="s">&#39;func_name&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;open&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">__get__</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">method</span><span class="o">-</span><span class="n">wrapper</span> <span class="s">&#39;__get__&#39;</span> <span class="n">of</span> <span class="n">function</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xb73ee10c</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, a <code>__get__</code> method is listed among the members of the function, and Python recognizes it as a <em>method-wrapper</em>. This method shall connect the <code>open</code> function to the <code>door1</code> instance, so we can call it passing the instance alone</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;open&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">__get__</span><span class="p">(</span><span class="n">door1</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">bound</span> <span class="n">method</span> <span class="err">?</span><span class="o">.</span><span class="n">open</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">Door</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xb73f956c</span><span class="o">&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, something is missing. Indeed <code>__get__()</code> in this case also accepts the <em>owner</em> class, i.e. the class we are trying to get the attribute from. So the correct form is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;open&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">__get__</span><span class="p">(</span><span class="n">door1</span><span class="p">,</span> <span class="n">Door</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">bound</span> <span class="n">method</span> <span class="n">Door</span><span class="o">.</span><span class="n">open</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">Door</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xb73f956c</span><span class="o">&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>When methods met classes</h2>

<p>If we use <code>type()</code> on an unbound method, we get an interesting result</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;open&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">function</span> <span class="nb">open</span> <span class="n">at</span> <span class="mh">0xb6aa548c</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">door1</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">open</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;instancemethod&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method is an <em>instance method</em>; as we discovered, it shall be bound to an instance to work, so the name is a good choice. Does this imply that we can also define a <em>class method</em>? Indeed we can, through the <code>classmethod</code> decorator</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Door</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="n">colour</span> <span class="o">=</span> <span class="s">&#39;brown&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">status</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">number</span> <span class="o">=</span> <span class="n">number</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">status</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">knock</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Knock!&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&#39;open&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">close</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&#39;closed&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Such a definition makes the method callable on both the instance and the class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">knock</span><span class="p">()</span>
</span><span class='line'><span class="n">Knock</span><span class="err">!</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Door</span><span class="o">.</span><span class="n">knock</span><span class="p">()</span>
</span><span class='line'><span class="n">Knock</span><span class="err">!</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">knock</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">bound</span> <span class="n">method</span> <span class="nb">type</span><span class="o">.</span><span class="n">knock</span> <span class="n">of</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">Door</span><span class="s">&#39;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Door</span><span class="o">.</span><span class="n">knock</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">bound</span> <span class="n">method</span> <span class="nb">type</span><span class="o">.</span><span class="n">knock</span> <span class="n">of</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">Door</span><span class="s">&#39;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is possible since, as you can see, both the class method and the instance method are bound. The class method is bound to the class itself, while the instance method is bound to the instance of the class. What about the type of the method?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">door1</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;knock&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">classmethod</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xb6a8db6c</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">door1</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">knock</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;instancemethod&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Puzzled? Don&#8217;t be confused! When you look in the <code>__dict__</code> you are not going through the <code>__getattribute__()</code> and <code>__get__()</code> machinery, so you get the plain unprocessed attribute. With standard methods you find <code>function</code> objects in the members dictionary, while for class methods you find <code>classmethod</code> objects.</p>

<p>On the other side, when you check the type of <code>door1.__class__.knock</code> you implicitly invoke <code>__get__()</code>, which binds the method to the class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">door1</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;knock&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">__get__</span><span class="p">(</span><span class="n">door1</span><span class="p">,</span> <span class="n">Door</span><span class="p">))</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;instancemethod&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">door1</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;knock&#39;</span><span class="p">])</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;classmethod&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After all, it is no surprise that a class method is bound since a class is an instance of <code>type</code>.</p>

<h2>Intermezzo</h2>

<p>I realize now that I introduced this post as &#8220;a set of thoughts for Python beginners&#8221;. Sorry. If you are reading this, however, chances are that you are still alive. Calm down. Breathe. Relaxed? Ready to go? Let&#8217;s dive into delegation!</p>

<h2>The Delegation Run</h2>

<p>If classes are objects what is the difference between types and instances? When I talk about &#8220;my cat&#8221; I am referring to a concrete instance of the &#8220;cat&#8221; concept, which is a <em>subtype</em> of &#8220;animal&#8221;. So, despite being both objects, while types can be <em>specialized</em>, instances cannot.</p>

<p>Usually an object B is said to be a specialization of an object A when:</p>

<ul>
<li>B has all the features of A</li>
<li>B can provide new features</li>
<li>B can perform some or all the tasks performed by A in a different way</li>
</ul>


<p>Those targets are very general and valid for any system and the key to achieve them with the maximum reuse of already existing components is <em>delegation</em>. Delegation means that an object shall perform only what it knows best, and leave the rest to other objects.</p>

<p>Delegation can be implemented with two different mechanisms: <em>composition</em> and <em>inheritance</em>. Sadly, very often inheritance is listed among the pillars of OOP techniques, forgetting that it is an implementation of the more generic and fundamental mechanism of delegation; perhaps a better nomenclature for the two techniques could be <em>explicit delegation</em> (composition) and <em>implicit delegation</em> (inheritance). Please note that, again, when talking about composition and inheritance we are talking about focusing on a behavioural or structural delegation. Another way to think about the difference between composition and inheritance is to consider if the object <em>knows</em> who can satisfy your request or if the object <em>is</em> the one that satisfy the request.</p>

<p>Please, please, please do not forget composition: in many cases, composition can lead you to a simpler system, with benefits on maintainability and changeability.</p>

<p>Usually composition is said to be a very generic technique that needs no special syntax, while inheritance and its rules are strongly dependent on the language of choice. Actually, the strong dynamic nature of Python softens the boundary line between the two techniques.</p>

<h2>Inheritance Now</h2>

<p>In Python a class can be declared as an <em>extension</em> of one or more different classes, through the <em>class inheritance</em> mechanism. The child class (the one that inherits) internally has the same structure of the parent class (the one that is inherited), and for the case of multiple inheritance the language has very specific rules to manage possible conflicts or redefinitions among the parent classes. A very simple example of inheritance is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SecurityDoor</span><span class="p">(</span><span class="n">Door</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>where we declare a new class <code>SecurityDoor</code> that, at the moment, is a perfect copy of the <code>Door</code> class. Let us investigate what happens when we access attributes and methods. First we instance the class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">sdoor</span> <span class="o">=</span> <span class="n">SecurityDoor</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#39;closed&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first check we can do is that class attributes are still global and shared</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">SecurityDoor</span><span class="o">.</span><span class="n">colour</span> <span class="ow">is</span> <span class="n">Door</span><span class="o">.</span><span class="n">colour</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">sdoor</span><span class="o">.</span><span class="n">colour</span> <span class="ow">is</span> <span class="n">Door</span><span class="o">.</span><span class="n">colour</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>This shows us that Python tries to resolve instance members not only looking into the class the instance comes from, but also investigating the parent classes. In this case <code>sdoor.colour</code> becomes <code>SecurityDoor.colour</code>, that in turn becomes <code>Door.colour</code>. <code>SecurityDoor</code> <em>is</em> a <code>Door</code>.</p>

<p>If we investigate the content of <code>__dict__</code> we can catch a glimpse of the inheritance mechanism in action</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">sdoor</span><span class="o">.</span><span class="n">__dict__</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;status&#39;</span><span class="p">:</span> <span class="s">&#39;closed&#39;</span><span class="p">,</span> <span class="s">&#39;number&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">sdoor</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__dict__</span>
</span><span class='line'><span class="n">dict_proxy</span><span class="p">({</span><span class="s">&#39;__module__&#39;</span><span class="p">:</span> <span class="s">&#39;__main__&#39;</span><span class="p">,</span> <span class="s">&#39;__doc__&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">})</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">Door</span><span class="o">.</span><span class="n">__dict__</span>
</span><span class='line'><span class="n">dict_proxy</span><span class="p">({</span><span class="s">&#39;knock&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="nb">classmethod</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0xb6a8db6c</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;__module__&#39;</span><span class="p">:</span> <span class="s">&#39;__main__&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;__weakref__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">attribute</span> <span class="s">&#39;__weakref__&#39;</span> <span class="n">of</span> <span class="s">&#39;Door&#39;</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;__dict__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">attribute</span> <span class="s">&#39;__dict__&#39;</span> <span class="n">of</span> <span class="s">&#39;Door&#39;</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;close&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="n">close</span> <span class="n">at</span> <span class="mh">0xb6aa5454</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;colour&#39;</span><span class="p">:</span> <span class="s">&#39;brown&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;open&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="nb">open</span> <span class="n">at</span> <span class="mh">0xb6aa53e4</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;__doc__&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;__init__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="n">__init__</span> <span class="n">at</span> <span class="mh">0xb6aa51ec</span><span class="o">&gt;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the content of <code>__dict__</code> for <code>SecurityDoor</code> is very narrow compared to that of <code>Door</code>. The inheritance mechanism takes care of the missing elements by climbing up the classes tree. Where does Python get the parent classes? A class always contains a <code>__bases__</code> tuple that lists them</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">SecurityDoor</span><span class="o">.</span><span class="n">__bases__</span>
</span><span class='line'><span class="p">(</span><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">Door</span><span class="s">&#39;&gt;,)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So an example of what Python does to resolve a class method call through the inheritance tree is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">sdoor</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__bases__</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">__dict__</span><span class="p">[</span><span class="s">&#39;knock&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">__get__</span><span class="p">(</span><span class="n">sdoor</span><span class="p">,</span> <span class="n">SecurityDoor</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">bound</span> <span class="n">method</span> <span class="nb">type</span><span class="o">.</span><span class="n">knock</span> <span class="n">of</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">SecurityDoor</span><span class="s">&#39;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">sdoor</span><span class="o">.</span><span class="n">knock</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">bound</span> <span class="n">method</span> <span class="nb">type</span><span class="o">.</span><span class="n">knock</span> <span class="n">of</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">SecurityDoor</span><span class="s">&#39;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note that this is just an example that does not consider multiple inheritance.</p>

<p>Let us try now to override some methods and attributes. In Python you can <em>override</em> (redefine) a parent class member simply by redefining it in the child class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SecurityDoor</span><span class="p">(</span><span class="n">Door</span><span class="p">):</span>
</span><span class='line'>    <span class="n">colour</span> <span class="o">=</span> <span class="s">&#39;gray&#39;</span>
</span><span class='line'>    <span class="n">locked</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">locked</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">&#39;open&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can forecast, the overridden members now are present in the <code>__dict__</code> of the <code>SecurityDoor</code> class</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">SecurityDoor</span><span class="o">.</span><span class="n">__dict__</span>
</span><span class='line'><span class="n">dict_proxy</span><span class="p">({</span><span class="s">&#39;locked&#39;</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;__module__&#39;</span><span class="p">:</span> <span class="s">&#39;__main__&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;open&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">function</span> <span class="nb">open</span> <span class="n">at</span> <span class="mh">0xb73d8844</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;colour&#39;</span><span class="p">:</span> <span class="s">&#39;gray&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;__doc__&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>So when you override a member, the one you put in the child class is used instead of the one in the parent class simply because the former is found before the latter while climbing the class hierarchy. This also shows you that Python does not implicitly call the parent implementation when you override a method. So, overriding is a way to block implicit delegation.</p>

<p>If we want to call the parent implementation we have to do it explicitly. In the former example we could write</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SecurityDoor</span><span class="p">(</span><span class="n">Door</span><span class="p">):</span>
</span><span class='line'>    <span class="n">colour</span> <span class="o">=</span> <span class="s">&#39;gray&#39;</span>
</span><span class='line'>    <span class="n">locked</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">locked</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="n">Door</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can easily test that this implementation is working correctly. This form of explicit parent delegation is heavily discouraged, however.</p>

<p>The first reason is because of the very high coupling that results from explicitly naming the parent class again when calling the method; if you decide to use a new parent class you have to manually propagate the change to every method that calls it. Moreover, since in Python the class hierarchy can be dynamically changed (i.e. at runtime), this form of explicit delegation could be not only annoying but wrong.</p>

<p>The second reason is that in general you need to deal with multiple inheritance, where you do not know a priori which parent class implements the original form of the method you are overriding.</p>

<p>To solve these issues, Python supplies the <code>super()</code> built-in function, that climbs the class hierarchy and returns the correct class that shall be called. The syntax for calling <code>super()</code> is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SecurityDoor</span><span class="p">(</span><span class="n">Door</span><span class="p">):</span>
</span><span class='line'>    <span class="n">colour</span> <span class="o">=</span> <span class="s">&#39;gray&#39;</span>
</span><span class='line'>    <span class="n">locked</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">locked</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">(</span><span class="n">SecurityDoor</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see you have to explicitly pass the class you are in and the current instance. This is a (indeed very light) form of repetition that has been fixed in Python 3.x.</p>

<h2>Enter the Composition</h2>

<p>Composition means that an object knows another object, and explicitly delegates some tasks to it. While inheritance is implicit, composition is explicit: in Python, however, things are far more interesting than this =).</p>

<p>First of all let us implement classic composition, which simply makes an object part of the other as an attribute</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SecurityDoor</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="n">colour</span> <span class="o">=</span> <span class="s">&#39;gray&#39;</span>
</span><span class='line'>    <span class="n">locked</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">status</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">door</span> <span class="o">=</span> <span class="n">Door</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">locked</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">door</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">close</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">door</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The primary goal of composition is to relax the coupling between objects. This little example shows that now <code>SecurityDoor</code> is an <code>object</code> and no more a <code>Door</code>, which means that the internal structure of <code>Door</code> is not copied. For this very simple example both <code>Door</code> and <code>SecurityDoor</code> are not big classes, but in a real system objects can very complex; this means that their allocation consumes a lot of memory and if a system contains thousands or millions of objects that could be an issue.</p>

<p>As you can see, however, our solution is far from perfect.</p>

<p>The composed <code>SecurityDoor</code> has to redefine the <code>colour</code> attribute since the concept of delegation applies only to methods and not to attributes, doesn&#8217;t it? Well, no. Python provides a very high degree of indirection for objects manipulation and attribute access is one of the most useful. As you already discovered, accessing attributes is ruled by a special method called <code>__getattribute__()</code> that is called whenever an attribute of the object is accessed. Overriding <code>__getattribute__()</code>, however, is overkill; it is a very complex method, and, being called on every attribute access, any change makes the whole thing slower.</p>

<p>The method we have to leverage to delegate attribute access is <code>__getattr__()</code>, which is a special method that is called whenever the requested attribute is not found in the object. So basically it is the right place to dispatch all attribute and method access our object cannot handle. In the previous example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SecurityDoor</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="n">locked</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">status</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">door</span> <span class="o">=</span> <span class="n">Door</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">locked</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">door</span><span class="o">.</span><span class="n">open</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">attr</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">door</span><span class="p">,</span> <span class="n">attr</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>__getattr__()</code> blends the separation line between inheritance and composition since after all the former is a form of automatic delegation of every member access.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">ComposedDoor</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="p">,</span> <span class="n">status</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">door</span> <span class="o">=</span> <span class="n">Door</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">attr</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">door</span><span class="p">,</span> <span class="n">attr</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As this last example shows, delegating every member access through <code>__getattr__()</code> is very simple. Pay attention to <code>getattr()</code> which is different from <code>__getattr__()</code>. The former is a built-in that is equivalent to the dotted syntax, i.e. <code>getattr(obj, 'someattr')</code> is the same as <code>obj.someattr</code>, but you have to use it since the name of the attribute is contained in a string.</p>

<p>Composition provides a superior way to manage delegation since it can selectively delegate the access, even mask some attributes or methods, while inheritance cannot. In Python you also avoid the memory problems that might arise when you put many objects inside another; Python handles everything through its reference, i.e. through a pointer to the memory position of the thing, so the size of an attribute is constant and very limited.</p>

<h2>Final words</h2>

<p>There is much more that can be said about the Python implementation of objects, classes, and friends. Just to name a couple of things, the object creation mechanism and the relationship between <code>object</code> and <code>type</code> have not been explained. Hopefully, there will be space in a later post. In the second post, however, I&#8217;ll start talking about polymorphism, Abstract Base Classes, and metaclasses. Stay tuned!</p>

<h2>Movie Trivia</h2>

<p>If you are wondering why section titles are so weird, chances are that you missed some good movies to watch while you are not coding =). The movies are: <em>Back to the Future</em>, <em>What About Bob?</em>, <em>Wargames</em>, <em>The Empire Strikes Back</em>, <em>Raiders of the Lost Ark</em>, <em>Revenge of the Nerds</em>, <em>When Harry Met Sally</em>, <em>Apocalypse Now</em>, <em>Enter the Dragon</em>.</p>

<h2>Sources</h2>

<p>Some sources for the content of this post. Thank you authors!</p>

<ul>
<li><a href="http://docs.python.org/2/tutorial/classes.html">The official Python documentation</a> and the Python source code.</li>
<li><a href="http://www.cafepy.com/article/python_types_and_objects/">Python Types and Objects - by Shalabh Chaturvedi</a></li>
<li><a href="http://rhettinger.wordpress.com/2011/05/26/super-considered-super/">Python’s super() considered super! - by Raymond Hettinger</a></li>
<li><a href="http://www.aleax.it/gdd_pydp.pdf">Design Patterns in Python - by Alex Martelli</a></li>
<li>Many <a href="http://stackoverflow.com/questions/tagged/python">Stackoverflow</a> questions and answers</li>
</ul>


<h2>Updates</h2>

<p>2014-03-08: &#8220;When methods met classes&#8221; section had a typo: the sentence &#8220;The class method is bound to the class itself, while the instance method is bound to the class of the instance.&#8221; is &#8220;while the instance method is bound to instance of the class.&#8221;. Thanks <a href="https://plus.google.com/u/0/116309787480950087834/posts">Mohcin Shah</a> for spotting it!</p>

<p>2014-03-10: Fixed link to Alex Martelli&#8217;s presentation.</p>

<p>2014-04-07: A typo when discussing <code>door1.colour</code> has been fixed. Thanks to <a href="http://www.reddit.com/user/pujuma">pujuma</a>.</p>

<h2>Feedback</h2>

<p>Feel free to use <a href="https://plus.google.com/u/0/b/110554719587236016835/110554719587236016835/posts">the blog Google+ page</a> to comment the post. The <a href="https://github.com/lgiordani/lgiordani.github.com/issues">GitHub issues</a> page is the best place to submit corrections.</p>

<h2>Next articles</h2>

<ul>
<li><a href="http://lgiordani.github.io/blog/2014/03/10/oop-concepts-in-python-2-dot-x-part-2">OOP Concepts in Python 2.x - Part 2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digging up Django class-based views - 3]]></title>
    <link href="http://lgiordani.github.io/blog/2014/02/14/digging-up-django-class-based-views-3/"/>
    <updated>2014-02-14T16:13:41+01:00</updated>
    <id>http://lgiordani.github.io/blog/2014/02/14/digging-up-django-class-based-views-3</id>
    <content type="html"><![CDATA[<p><em>This post refers to Django 1.5. Please be warned that some of the matters discussed here, some solutions or the given code can be outdated by more recent Django versions</em></p>

<p>In the first two issues of this short series we wandered around the basic concepts of class-based views in Django, and started understanding and using two of the basic generic views Django makes available to you: <code>ListView</code> and <code>DetailView</code>. Both are views that read some data from the database and show them on a rendered template.</p>

<p>This third issue wants to introduce the reader to the class-based version of Django forms. This post is not meant to be a full introduction to the Django form library; rather, I want to show how class-based generic views implement the CUD part of the CRUD operations (Create, Read, Update, Delete), the Read one being implemented by &#8220;standard&#8221; generic views.</p>

<!--more-->


<h2>A very basic example</h2>

<p>To start working with CBFs (class-based forms) let&#8217;s say we are working with a <code>StickyNote</code> class which represents a simple text note with a date:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">StickyNote</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">timestamp</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">()</span>
</span><span class='line'>    <span class="n">text</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">TextField</span><span class="p">(</span><span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the first things we usually want to do is to build a form that allows the user to create a new entry in the database, in this case a new sticky note. The functional version of such a form would be the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">note_add</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="n">form</span> <span class="o">=</span> <span class="n">StickyNoteForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span> <span class="ow">or</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
</span><span class='line'>        <span class="n">new_note</span> <span class="o">=</span> <span class="n">form</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>        <span class="n">new_note</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">render_to_response</span><span class="p">(</span><span class="s">&#39;note_add.html&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^note_add/$&#39;</span><span class="p">,</span> <span class="s">&#39;note_add&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>which is not too complex to grasp. Note that I left aside some imports; the <code>StickNoteForm</code> class is built using a <a href="https://docs.djangoproject.com/en/1.5/topics/forms/modelforms/">model form</a>. Since you <a href="https://docs.djangoproject.com/en/1.5/topics/forms/">already know</a> how functional form views work, let&#8217;s compare it with the same view expressed with a class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">NoteAdd</span><span class="p">(</span><span class="n">CreateView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">model</span> <span class="o">=</span> <span class="n">StickyNote</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is no surprise that most of the code went away, thanks to inheritance. As happened in the first two posts with standard views, the class mechanism provides us with a bunch of code that lives somewhere in the class hierarchy and works behind the scenes. Our mission is now to uncover that code to figure out how exactly CBFs work and how we can change them to perform what we need.</p>

<p>To make the post easier to follow, please always remember that &#8220;class-based form&#8221; is a short name for &#8220;class-based form view&#8221;. That is, CBFs are views, so their job is to process incoming HTTP requests and return a HTTP response. Form views do this in a slightly different way than the standard ones, mostly due to the different nature of POST requests compared with GET ones. Let us take a look at this concept before moving on.</p>

<h2>HTTP requests: GET and POST</h2>

<p><em>Please note that this is a broad subject and that the present section wants only to be a very quick review of the main concepts that are related to Django CBFs</em></p>

<p>HTTP requests come in different forms, depending on the <strong>method</strong> they carry. Those methods are called <strong>HTTP verbs</strong> and the two most used ones are <strong>GET</strong> and <strong>POST</strong>. The GET method tells the server that the client wants to retrieve a resource (the one connected with the relative URL) and shall have no side effects (such as changing the resource). The POST method is used to send some data to the server, the given URL being the <em>resource</em> that shall handle the data.</p>

<p>As you can see, the definition of POST is very broad: the server accepts the incoming data and is allowed to perform any type of action with it, such as creating a new entity, editing or deleting one or more of them, and so on.</p>

<p>Keep in mind that forms are not the same thing as POST request. As a matter of fact, they are connected just incidentally: a form is a way to collect data from a user browsing a HTML page while POST is the way that data is transmitted to the server. You do not need to have a form to make a POST request, you just need some data to send. HTML forms are just a useful way to send POST requests, but not the only one.</p>

<h2>Form views</h2>

<p>Why are form views different from standard views? The answer can be found looking at the flow of a typical data submission on a Web site:</p>

<ol>
<li>The user browses a web page (GET)</li>
<li>The server answers the GET request with a page containing a form</li>
<li>The user fills the form and submits it (POST)</li>
<li>The server receives and processes data</li>
</ol>


<p>As you can see the procedure involves a double interaction with the server: the first request GETs the page, the second POSTs the data. So you need to build a view that answers the GET request and a view that answers the POST one.</p>

<p>Since most of the time the URL we use to POST data is the same URL we used to GET the page, we need to build a view that accepts both methods. This is the main reason of the pattern you are used to see in functional form views in Django. <a href="https://docs.djangoproject.com/en/1.5/topics/forms/">The official Django documentation</a> on the subject uses this snippet of code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">contact</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;POST&#39;</span><span class="p">:</span> <span class="c"># If the form has been submitted...</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">ContactForm</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">)</span> <span class="c"># A form bound to the POST data</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span> <span class="c"># All validation rules pass</span>
</span><span class='line'>            <span class="c"># Process the data in form.cleaned_data</span>
</span><span class='line'>            <span class="c"># ...</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HttpResponseRedirect</span><span class="p">(</span><span class="s">&#39;/thanks/&#39;</span><span class="p">)</span> <span class="c"># Redirect after POST</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">ContactForm</span><span class="p">()</span> <span class="c"># An unbound form</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#39;contact.html&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;form&#39;</span><span class="p">:</span> <span class="n">form</span><span class="p">,</span>
</span><span class='line'>    <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the first conditional path deals with the data submission (POST) while the else part deals with the usual case of a GET request.</p>

<p>Now it is time to dig into the class-based forms that Django provides us to understand how they deal with this double interaction.</p>

<p>Let us start with the <code>CreateView</code> class we used in our simple example, which is defined in <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L202">views/generic/edit.py#202</a>. It is an almost empty class that inherits from <code>SingleObjectTemplateResponseMixin</code> and from <code>BaseCreateView</code>. The first class deals with the template selected to render the response and we can leave it aside for the moment. The second class, on the other hand, can be found a couple of lines above, at <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L187">views/generic/edit.py#L187</a>, and implements two methods which names are self explaining, <code>get()</code> and <code>post()</code>.</p>

<h4>Processing GET and POST requests</h4>

<p>We already met the <code>get()</code> method in the <a href="http://lgiordani.github.io/blog/2013/12/11/digging-up-django-class-based-views-2">past article</a> when we talked about the <code>dispatch()</code> method of the <code>View</code> class. A quick recap of its purpose: this method is called when the incoming HTTP request carries the GET verb and is used to process the request itself. Not surprisingly, the <code>post()</code> method is called when the incoming request is a POST one. The two methods are already defined by an ancestor of the <code>BaseCreateView</code> class, namely <code>ProcessFormView</code> (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L145">views/generic/edit.py#L145</a>). It is useful to take a peek at the source code of this last class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">ProcessFormView</span><span class="p">(</span><span class="n">View</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    A mixin that renders a form on GET and processes it on POST.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Handles GET requests and instantiates a blank version of the form.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">form_class</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_form_class</span><span class="p">()</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_form</span><span class="p">(</span><span class="n">form_class</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">render_to_response</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">get_context_data</span><span class="p">(</span><span class="n">form</span><span class="o">=</span><span class="n">form</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Handles POST requests, instantiating a form instance with the passed</span>
</span><span class='line'><span class="sd">        POST variables and then checked for validity.</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">form_class</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_form_class</span><span class="p">()</span>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_form</span><span class="p">(</span><span class="n">form_class</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">form</span><span class="o">.</span><span class="n">is_valid</span><span class="p">():</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">form_valid</span><span class="p">(</span><span class="n">form</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">form_invalid</span><span class="p">(</span><span class="n">form</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the two methods are pretty straightforward. They both retrieve the class of the form with <code>get_form_class()</code> and instance it with <code>get_form()</code> (more on them later). The <code>get()</code> method then just calls the <code>render_to_response()</code> method to render a template, passing the context produced by the <code>get_context_data()</code> method. Note that the context receives the form as built by the <code>get_form()</code> method.</p>

<p>The <code>post()</code> method does not directly render the template since it has to process incoming data before doing this last step. Instead the validation of the form is performed through its <code>is_valid()</code> method and the two methods <code>form_valid()</code> and <code>form_invalid()</code> are called depending on the result of the test. See the <a href="https://docs.djangoproject.com/en/1.5/ref/forms/validation/">official documentation</a> for more information about form validation.</p>

<p>Please note that the behaviour of these classes follows the same pattern of that used in <code>ListView</code> and <code>DetailView</code> as described in the previous two posts.</p>

<p>The <code>ProcessFormView</code> class inherits from <code>View</code>, which was already described in depth in the first two posts of this series; there you can find the <code>as_view()</code> and <code>dispatch()</code> method that are the foundation of the CBVs system.</p>

<h2>The form workflow - part I</h2>

<p>The inheritance path that starts with <code>ProcessFormView</code> spans all the classes that deal with the incoming request, telling GET and POST methods apart. The second inheritance path we can follow from <code>BaseCreateView</code> leads to <code>ModelFormMixin</code>, which is defined at <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L75">views/generic/edit.py#L75</a>. This path contains the classes that implement the form management methods. The first two methods that deal with the form are <code>get_form_class()</code> and <code>get_form()</code> that we encountered when discussing the <code>get()</code> and <code>post()</code> methods.</p>

<p>The <code>get_form_class()</code> tries to get the form model from the <code>self.form_class</code> attribute, and if this is not defined tries to extract the model from the <code>self.model</code> or from the queryset. Then it returns a suitable modelform, using a factory defined in <a href="https://github.com/django/django/blob/stable/1.5.x/django/forms/models.py">forms/models.py</a>.</p>

<p>The <code>get_form()</code> method is defined in <code>FormMixin</code> (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L10">views/generic/edit.py#L10</a>) and instances the form class with the keywords returned by <code>get_form_kwargs()</code>, implemented in <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L100">views/generic/edit.py#L100</a>. This last method is quite important as we are going to discover in a short while, since it has a big role in the double interaction that happens with POST requests.</p>

<p>The first implementation of the <code>get_form_kwargs()</code> method that we find in the ancestors tree is in <code>ModelFormMixin</code> (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L100">views/generic/edit.py#L100</a>), but this immediately calls the same method defined in <code>FormMixin</code> (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L10">views/generic/edit.py#L10</a>). The code is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_form_kwargs</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="n">kwargs</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;initial&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_initial</span><span class="p">()}</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&#39;POST&#39;</span><span class="p">,</span> <span class="s">&#39;PUT&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">kwargs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span>
</span><span class='line'>            <span class="s">&#39;data&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">POST</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;files&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">FILES</span><span class="p">,</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">kwargs</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first value of the form keywords dictionary is the copy of the <code>self.initial</code> dictionary, returned by <code>get_initial()</code> as stated by <a href="https://docs.djangoproject.com/en/1.5/ref/forms/api/#dynamic-initial-values">the official documentation</a>. Then, if the method of the request being processed is POST or PUT, the keywords are updated with the content of the request itself, i.e. posted data and uploaded files. This is used to initialize the form object itself as you can see at <a href="https://github.com/django/django/blob/stable/1.5.x/django/forms/forms.py#L77">forms/forms.py#L77</a>, and I am going to describe this mechanism later.</p>

<p>After this method returns its dictionary, the execution continues in <code>ModelFormMixin</code>. The code of that method is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_form_kwargs</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="n">kwargs</span> <span class="o">=</span> <span class="nb">super</span><span class="p">(</span><span class="n">ModelFormMixin</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">get_form_kwargs</span><span class="p">()</span>
</span><span class='line'>    <span class="n">kwargs</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s">&#39;instance&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">object</span><span class="p">})</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">kwargs</span>
</span></code></pre></td></tr></table></div></figure>


<p>that just adds <code>self.object</code> under the <code>instance</code> key of the keywords dictionary. We already met <code>self.object</code> when discussing <code>DetailView</code>, where it contained the result of the queryset, i.e. the object being shown by the view.</p>

<p>What is <code>self.object</code> now? Among the ancestors of our <code>CreateView</code> class, <code>BaseCreateView</code> defines <code>self.object</code> as <code>None</code> so for the moment we can leave it aside. It will come to the rescue later, when we will discuss update and deletion forms, so do not forget it.</p>

<p>The last things we find in the <code>get()</code> method, just after <code>get_form_class()</code> and <code>get_form()</code>, is <code>get_context_data()</code>. As happened in <code>ListView</code> and <code>DetailView</code>, this method builds a dictionary (the context) that is used to render a template. You can find the implementation of <code>get_context_data()</code> at <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L130">views/generic/edit.py#L130</a>. As you can see, since <code>self.object</code> has been set to <code>None</code>, the context contains only the instanced form under the <code>form</code> keyword (inserted at <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L155">views/generic/edit.py#L155</a>).</p>

<p>Let&#8217;s recap the process until here.</p>

<ol>
<li>The URL dispatcher requests with GET a page containing a form.</li>
<li>The <code>get()</code> method of <code>ProcessFormView</code> finds the form class of choice through <code>get_form_class()</code></li>
<li>The form class is instanced by <code>get_form()</code> with the values contained in the <code>self.initial</code> dictionary</li>
<li>At this point a template is rendered with a context returned by <code>get_context_data()</code> as usual. The context contains the form.</li>
</ol>


<h2>The form workflow - part II</h2>

<p>Now the user obtained the requested page and is facing an empty form. Once the form has been filled, he or she clicks the submit button and a new HTTP request reaches the server, this time carrying the POST method and a set of data taken from the input fields of the form itself. Our view shall now handle the second interaction step, the one that in functional views is usually managed by the part starting with <code>if request.method == 'POST':</code>.</p>

<p>As we already know, the incoming request is processed by the <code>post()</code> method of <code>ProcessFormView</code>, which works like the <code>get()</code> method in its first part, calling <code>get_form_class()</code> and <code>get_form()</code>. This latter method now deals with a POST request, so the code of <code>get_form_kwargs()</code> in <code>FormMixin</code> (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L10">views/generic/edit.py#L10</a>) adds to the keywords dictionary the submitted data with the <code>data</code> key and the uploaded files under the <code>files</code> key. Why does Django do this? Well, as you can see at <a href="https://github.com/django/django/blob/stable/1.5.x/django/forms/forms.py#L77">forms/forms.py#L77</a> a Django form can be instanced with an optional <code>data</code> keyword, which is stored inside the form object for the subsequent validation phase.</p>

<p>So now the form is bound (that is, it contains some data or files - see <a href="https://github.com/django/django/blob/stable/1.5.x/django/forms/forms.py#L80">forms/forms.py#L80</a>). The <code>post()</code> method now tests the result of <code>is_valid()</code> and acts accordingly calling either <code>form_valid()</code> or <code>form_invalid()</code>. Pay attention that, while <code>is_valid()</code> is a method of the form itself, the two latter methods belong to the <code>BaseCreateView</code>, defined by the same ancestor classes that implement <code>get_form_kwargs()</code>, <code>ModelFormMixin</code> and <code>FormMixin</code>.</p>

<p>The former class implements it at <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L123">views/generic/edit.py#L123</a> and puts the result of <code>form.save()</code> into <code>self.object</code>. Remember that <code>self.object</code> is appended to the context under the <code>object</code> key by the <code>get_context_data()</code> method, as shown in the previous section. The <code>form.save()</code> method for modelforms is defined by <code>BaseModelForm</code> at <a href="https://github.com/django/django/blob/stable/1.5.x/django/forms/models.py#L357">forms/models.py#L357</a> and basically saves the instance of the Django model connected with the modelform, that is implements the actual creation at the base of the <code>CreateView</code> form view. As <code>form.save()</code> returns the object saved to the database, it makes sense to store it in <code>self.object</code> and pass it to the template.</p>

<p>The execution of <code>form_valid()</code> continues with the implementation in the <code>FormMixin</code> class at <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L61">views/generic/edit.py#L61</a>. This method returns a <code>HttpResponseRedirect</code> object, which is the way you make the browser point to the given URL in Django. In this case the URL is given by <code>self.get_success_url()</code> which tries to return <code>self.success_url</code> if defined, otherwise returns the result of <code>get_absolute_url()</code> for the fresh-made object.</p>

<p>On the other hand, <code>form_invalid()</code> at <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L67">views/generic/edit.py#L67</a> deals with the case of a form containing some errors and simply calls <code>render_to_response()</code> passing it the context with the compiled form under the <code>form</code> key.</p>

<h2>Update and Delete operations</h2>

<p>This rather rich code tour unveiled the inner mechanism of the <code>CreateView</code> class, which can be used to create a new object in the database. The <code>UpdateView</code> and <code>DeleteView</code> classes follow a similar path, with minor changes to perform the different action they are implementing.</p>

<p><code>UpdateView</code> wants to show the form already filled with values, so it instances <code>self.object</code> before processing the request (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L210">views/generic/edit.py#L210</a>). This makes the object available in the keywords dictionary under the <code>instance</code> key (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L105">views/generic/edit.py#L105</a>), which is used by modelforms to initialize the data (<a href="https://github.com/django/django/blob/stable/1.5.x/django/forms/models.py#L244">forms/models.py#L244</a>). The <code>form.save()</code> method of <code>BaseModelForm</code> is smart enough to understand if the object has been created or just changed (<a href="https://github.com/django/django/blob/stable/1.5.x/django/forms/models.py#L365">forms/models.py#L365</a> so the <code>post()</code> method of <code>UpdateView</code> works just like the one of <code>CreateView</code>.</p>

<p><code>DeleteView</code> is a bit different from <code>CreateView</code> and <code>UpdateView</code>. As <a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/generic-editing/#deleteview">the official documentation</a> states, if called with a GET method it shows a confirmation page that POSTs to the same URL. So, as for the GET requests, <code>DeleteView</code> just uses the <code>get()</code> method defined by its ancestor <code>BaseDetailView</code> (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/detail.py#L103">views/generic/detail.py#L103</a>), which renders the template putting the object in the context. When called with a POST request, the view uses the <code>post()</code> method defined by <code>DeletionMixin</code> (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L233">views/generic/edit.py#L233</a>, which in turn just calls the <code>delete()</code> method of the same class (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L239">views/generic/edit.py#L239</a>). This performs the deletion on the database and redirects to the success URL.</p>

<h2>Conclusion</h2>

<p>As you can see, the structure behind the current implementation of Django class-based form views is rather complex. This allows the user to achieve complex behaviours like the CUD operations just by defining a couple of classes as I did in the simple example at the beginning of the post. Most of the time, however, such a simplification makes it difficult for the programmer to understand how to achieve the desired changes to the class behaviour. So the purpose of this big tour I made inside the Django source code was to give an insight of what methods are called in the lifetime of your HTTP request so that you can better identify what methods you need to override.</p>

<p>When performing special actions that fall outside the standard CUD operations you better inherit from <code>FormView</code> (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L181">views/generic/edit.py#L181</a>). The first thing to do is to check if and how you need to customize the <code>get()</code> and <code>post()</code> methods; remember that you either need to implement the full behaviour of those methods or make you changes and call the parent implementation. If this is not enough for your application consider overriding one of the more dedicated methods, such as <code>get_form_kwargs()</code> or <code>form_valid()</code>.</p>

<p>This post ends the series &#8220;Digging Up Django Class-based Views&#8221;. Stay tuned for other <a href="http://lgiordani.github.io/blog/categories/django/">upcoming articles on Django</a>!</p>

<p>Feel free to use <a href="https://plus.google.com/u/0/b/110554719587236016835/110554719587236016835/posts">the blog Google+ page</a> to comment the post or to ask for an in-depth analysis of some topic. The <a href="https://github.com/lgiordani/lgiordani.github.com/issues">GitHub issues</a> page is the best place to submit corrections.</p>

<h2>Previous articles</h2>

<ul>
<li><p><a href="http://lgiordani.github.io/blog/2013/10/28/digging-up-django-class-based-views-1">Digging Up Django Class-based Views - 1</a></p></li>
<li><p><a href="http://lgiordani.github.io/blog/2013/12/11/digging-up-django-class-based-views-2">Digging Up Django Class-based Views - 2</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digging up Django class-based views - 2]]></title>
    <link href="http://lgiordani.github.io/blog/2013/12/11/digging-up-django-class-based-views-2/"/>
    <updated>2013-12-11T09:00:00+01:00</updated>
    <id>http://lgiordani.github.io/blog/2013/12/11/digging-up-django-class-based-views-2</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p><em>This post refers to Django 1.5. Please be warned that some of the matters discussed here, some solutions or the given code can be outdated by more recent Django versions</em></p>

<p>In the first installment of this short series, I introduced the theory behind Django class-based views and the reason why in this context classes are more powerful than pure functions. I also introduced one of the generic views Django provides out-of-the-box, which is <code>ListView</code>.</p>

<p>In this second post I want to talk about the second most used generic view, <code>DetailView</code>, and about custom querysets and arguments. Last, I&#8217;m going to introduce unspecialized class-based views that allow you to build more complex Web pages. To fully understand <code>DetailView</code>, however, you need to grasp two essential concepts, namely <strong>querysets</strong> and <strong>view parameters</strong>. So I&#8217;m sorry for the learn-by-doing readers, but this time too I&#8217;m going to start with some pure programming topics.</p>

<!--more-->


<h2>QuerySets or the art of extracting information</h2>

<p>One of the most important parts of Django is the ORM (Object Relational Mapper), which allows you to access the underlying database just like a collection of Python objects. As you know, Django provides you tools to simplify the construction of DB queries; they are <strong>managers</strong> (the <code>.objects</code> attribute of any models, for example) and <strong>query methods</strong> (<code>get()</code>, <code>filter()</code>, and friends). Pay attention because things here are slightly more magical than you can think at a first glance.</p>

<p>When you use one of the methods of a manager you get as a result a <code>QuerySet</code>, which most of the time is used as a list, but is more than this. You can find <a href="https://docs.djangoproject.com/en/1.5/topics/db/queries/">here</a> and <a href="https://docs.djangoproject.com/en/1.5/ref/models/querysets/">here</a> the official documentation about queries and QuerySets, a very recommended reading.</p>

<p>What I want to stress here is that QuesySets are not evaluated until you perform an action that access the content like slicing or iterating on it. This means that we can build QuerySets, pass them to functions, store them, and even build them programmatically or metaprogramming them without the DB being hit. If you think at QuerySets as recipes you are not far from the truth: they are objects that store how you want to retrieve the data of your interest. Actually retriving them is another part of the game. This separation between the definition of something and its execution is called <strong>lazy evaluation</strong>.</p>

<p>Let me give you a very trivial example to show why the lazy evaluation of QuerySets is important.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_oldest_three</span><span class="p">(</span><span class="n">queryset</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">queryset</span><span class="o">.</span><span class="n">order_by</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">old_books</span> <span class="o">=</span> <span class="n">get_oldest_three</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">())</span>
</span><span class='line'><span class="n">old_hardcover_books</span> <span class="o">=</span> \
</span><span class='line'>    <span class="n">get_oldest_three</span><span class="p">(</span><span class="n">Book</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="s">&#39;type=Book.HARDCOVER&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the <code>get_oldest_three()</code> method is just filtering an incoming QuerySet (which can be of any type); it simply orders the objects and gets the first three inserted in the DB. The important thing here is that we are using QuerySets like pure &#8216;algorithms&#8217;, or descriptions of a procedure. When creating the <code>old_books</code> variable we are just telling the <code>get_oldest_three()</code> method &#8220;Hey, this is the way I extract the data I&#8217;m interested in. May you please refine it and return the actual data?&#8221;</p>

<p>Being such flexible objects, QuerySets are an important part of generic views, so keep them warm for the upcoming banquet.</p>

<h2>Being flexible: parametric views</h2>

<p>URLs are the API of our Web site or service. This can be more or less evident for the user that browses through the pages, but from the programmer&#8217;s point of view URLs are the entry points of a computer system. As such, they are not very different from the API of a library: here, static pages are just like constants, or functions that always return that same value (such as a configuration parameter), while dynamic pages are like functions that process incoming data (parameters) and return a result.</p>

<p>So Web URLs can accept parameters, and our underlying view shall do the same. You basically have three methods to convey parameters from the user&#8217;s browser to your server using HTTP. The first method is named <a href="http://en.wikipedia.org/wiki/Query_string">query string</a> and lists parameters directly in the URL through a universal syntax. The second method is storing parameters in the HTTP request body, which is what POST requests do. We will discuss this method in a later post about forms.</p>

<p>The first method has one big drawback: most of the time URLs are long (and sometimes <em>too</em> long), and difficult to use as a real API. To soften this effect the concept of <a href="http://en.wikipedia.org/wiki/Clean_URL">clean URL</a> arose, and this is the way Django follows natively (though, if you want, you can also stick to the query string method).</p>

<p>Now, <a href="https://docs.djangoproject.com/en/1.5/topics/http/urls/">you know</a> that you can collect parameters contained in the URL parsing it with a regular expression; what we need to discover is how class-based views receive and process them.</p>

<p>In the previous post we already discussed the <code>as_view()</code> method that shall instance the class and return the result of <code>dispatch()</code> (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L46">views/generic/base.py#L46</a>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@classonlymethod</span>
</span><span class='line'><span class="k">def</span> <span class="nf">as_view</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="o">**</span><span class="n">initkwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Main entry point for a request-response process.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="c"># sanitize keyword arguments</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">initkwargs</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">cls</span><span class="o">.</span><span class="n">http_method_names</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s">&quot;You tried to pass in the </span><span class="si">%s</span><span class="s"> method name as a &quot;</span>
</span><span class='line'>                            <span class="s">&quot;keyword argument to </span><span class="si">%s</span><span class="s">(). Don&#39;t do that.&quot;</span>
</span><span class='line'>                            <span class="o">%</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">cls</span><span class="o">.</span><span class="n">__name__</span><span class="p">))</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">() received an invalid keyword </span><span class="si">%r</span><span class="s">. as_view &quot;</span>
</span><span class='line'>                            <span class="s">&quot;only accepts arguments that are already &quot;</span>
</span><span class='line'>                            <span class="s">&quot;attributes of the class.&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">cls</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">key</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span> <span class="o">=</span> <span class="n">cls</span><span class="p">(</span><span class="o">**</span><span class="n">initkwargs</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">&#39;get&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nb">hasattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s">&#39;head&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">request</span> <span class="o">=</span> <span class="n">request</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">args</span> <span class="o">=</span> <span class="n">args</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">kwargs</span> <span class="o">=</span> <span class="n">kwargs</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">dispatch</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># take name and docstring from class</span>
</span><span class='line'>    <span class="n">update_wrapper</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">cls</span><span class="p">,</span> <span class="n">updated</span><span class="o">=</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># and possible attributes set by decorators</span>
</span><span class='line'>    <span class="c"># like csrf_exempt from dispatch</span>
</span><span class='line'>    <span class="n">update_wrapper</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">cls</span><span class="o">.</span><span class="n">dispatch</span><span class="p">,</span> <span class="n">assigned</span><span class="o">=</span><span class="p">())</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">view</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now look at what the <code>view()</code> wrapper function actually does with the instanced class (here line 21, <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L65">views/generic/base.py#L65</a>); not surprisingly it takes the <code>request</code>, <code>args</code> and <code>kwargs</code> passed by the URLconf passes and converts them into as many class attributes with the same names.</p>

<p>This means that <em>everywhere in our CBVs</em> we can access the original call parameters simply reading <code>self.request</code>, <code>self.args</code> and <code>self.kwargs</code>, where <code>*args</code> and <code>**kwargs</code> are the unnamed and named values extracted by the URLconf regular expression.</p>

<h2>Details</h2>

<p>Just after listing things, one of the most useful things a Web site does is giving details about objects. Obviously any e-commerce site is made for the most part by pages that list products and show product details, but also a blog is made of one or more pages with a list of posts and a page for each of them. So building a detailed view of the content of our database is worth learning.</p>

<p>To help us in this task Django provides <code>DetailView</code>, which indeed deals, as the name suggests, with the details of what we get from the DB. While <code>ListView</code>&#8217;s basic behaviour is to extract the list of all objects with a given model, <code>DetailView</code> extracts a single object. How does it know what object shall be extracted?</p>

<p>When <code>dispatch()</code> is called on an incoming HTTP request the only thing it does is to look at the <code>method</code> attribute, which for <code>HttpRequest</code> objects contains the name of the HTTP verb used (e.g. <code>'GET'</code>); then <code>dispatch()</code> looks for a method of the class with the lowercase name of the verb (e.g. <code>'GET'</code> &#8211;> <code>get()</code>) (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L78">views/generic/base.py#L78</a>). This handler is then called with the same parameters of <code>dispatch()</code>, namely the <code>request</code> itself, <code>*args</code> and <code>**kwargs</code>.</p>

<p><code>DetailView</code> has no body and inherits everything from two classes; the second one, <code>BaseDetailView</code>, implements the <code>get()</code> method (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/detail.py#L107">views/generic/detail.py#L107</a>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">object</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_object</span><span class="p">()</span>
</span><span class='line'>    <span class="n">context</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_context_data</span><span class="p">(</span><span class="nb">object</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">object</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">render_to_response</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see this method extracts the single object it shall represent calling <code>self.get_object()</code>, then calls <code>self.get_context_data()</code> (that we met in the previous post) and last the familiar <code>self.render_to_response()</code> that is the class equivalent of the well know Django function. The method <code>self.get_object()</code> is provided by <code>BaseDetailView</code>&#8217;s ancestor <code>SingleObjectMixin</code> (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/detail.py#L10">generic/detail.py#L10</a>): the most important parts of its code, for the sake of our present topic are</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_object</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">queryset</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">queryset</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">queryset</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_queryset</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pk</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">kwargs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pk_url_kwarg</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">pk</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">queryset</span> <span class="o">=</span> <span class="n">queryset</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="n">pk</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">obj</span> <span class="o">=</span> <span class="n">queryset</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">obj</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Warning</strong>: I removed many lines from the previous function to improve readability; please check the original source code for the complete implementation.</p>

<p>The code shows where <code>DetailView</code> gets the queryset from; the <code>get_queryset()</code> method is provided by <code>SingleObjectMixin</code> itself and basically returns <code>self.queryset</code> if present, otherwise returns all objects of the given model (acting just like <code>ListView</code> does). This <code>queryset</code> is then refined by a <code>filter()</code> and last by a <code>get()</code>. Here <code>get()</code> is not used directly (I think) to manage the different error cases and raise the correct exceptions.</p>

<p>The parameter <code>pk</code> used in <code>filter()</code> comes directly from <code>self.kwargs</code>, so it is taken directly from the URL. Since this is a core concept of views in general I want to look at this part carefully.</p>

<p>Our <code>DetailView</code> is called by an URLconf that provides a regular expression to parse the URL, for example <code>url(r'^(?P&lt;pk&gt;\d+)/$',</code>. This regex extracts a parameter and gives it the name <code>pk</code>, so <code>kwargs</code> of the view will contain <code>pk</code> as key and the actual number in the URL as value. For example the URL <code>123/</code> will result in <code>{'pk': 123}</code>. The default behaviour of <code>DetailView</code> is to look for a <code>pk</code> key and use it to perform the filtering of the queryset, since <code>self.pk_url_kwarg</code> is <code>'pk'</code>.</p>

<p>So if we want to change the name of the parameter we can simply define the <code>pk_url_kwarg</code> of our class and provide a regex that extract the primary key with the new name. For example <code>url(r'^(?P&lt;key&gt;\d+)/$',</code> extracts it with the name <code>key</code>, so we will define <code>pk_url_kwarg = 'key'</code> in our class.</p>

<p>From this quick exploration we learned that a class inheriting from <code>DetailView</code>:</p>

<ul>
<li>provides a context with the <code>object</code> key initialized to a single object</li>
<li><strong>must</strong> be configured with a <code>model</code> class attribute, to know what objects to extract</li>
<li><strong>can</strong> be configured with a <code>queryset</code> class attribute, to refine the set of objects where the single object is extracted from</li>
<li><strong>must</strong> be called from a URL that includes a regexp that extracts the primary key of the searched object as <code>pk</code></li>
<li><strong>can</strong> be configured to use a different name for the primary key through the <code>pk_url_kwarg</code> class attribute</li>
</ul>


<p>The basic use of <code>DetailView</code> is thus exemplified by the following code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">BookDetail</span><span class="p">(</span><span class="n">DetailView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">model</span> <span class="o">=</span> <span class="n">Book</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^(?P&lt;pk&gt;\d+)/$&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">BookDetail</span><span class="o">.</span><span class="n">as_view</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">name</span><span class="o">=</span><span class="s">&#39;detail&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The view extracts a single object with the <code>Book</code> model; the regex is configured with the standard <code>pk</code> name.</p>

<p>As shown for <code>ListView</code> in the previous post, any CBV uses <code>get_context_data()</code> to return the context dictionary to the rendering engine. So views that inherit from <code>DetailView</code> can add data to the context following the same pattern</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">BookDetail</span><span class="p">(</span><span class="n">DetailView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">model</span> <span class="o">=</span> <span class="n">Book</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_context_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>      <span class="n">context</span> <span class="o">=</span> <span class="nb">super</span><span class="p">(</span><span class="n">BookDetail</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">get_context_data</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>      <span class="n">context</span><span class="p">[</span><span class="s">&#39;similar&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">get_similar_books</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">object</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">context</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="n">patterns</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^(?P&lt;pk&gt;\d+)/$&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">BookDetail</span><span class="o">.</span><span class="n">as_view</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">name</span><span class="o">=</span><span class="s">&#39;detail&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As explained before, you can access the object being shown through <code>self.object</code>, which in the above example is passed to a service function we implemented somewhere in our code.</p>

<h2>Using the base views</h2>

<p>Sometimes, when dealing with complex pages, the generic display CBVs that Django provides are not the right choice. This usually becomes evident when you start overriding method to prevent the view to perform its standard behaviour. As an instance say that you want to show detailed information of more than one object: probably DetailView will soon show its limits, being built to show only one object.</p>

<p>In all those cases that cannot be easily solved by one of the generic display CBVs, your way goes through other classes: <code>RedirectView</code>, <code>TemplateView</code>, and <code>View</code>. The documentation for these base views is <a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/base/">here</a>, while the source code is in <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py">views/generic/base.py</a>.</p>

<p>I&#8217;m not going to fully describe those views; I want however to briefly point out some peculiarities.</p>

<p><code>View</code> is by now an old friend of us; we met it when we discussed the <code>as_view()</code> and <code>dispatch()</code> method. It is the most generic view class and can be leveraged to perform very specialized tasks such as rendering pages without templates (for example when returning JSON data in AJAX techniques).</p>

<p><code>TemplateView</code> is the best choice to render pages from a template keeping in the meanwhile freedom as regards the context content. Chances are that this is going to be the view you will use the most after <code>ListView</code> and <code>DetailView</code>. Basically you just need to inherit from it and define the <code>get_context_data()</code> method. As you can see from the <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L147">source code</a> <code>TemplateView</code> answers to GET requests only.</p>

<p><code>RedirectView</code>, as the name implies, is used to redirect a request. The redirection mechanism is very simple: its <code>get()</code> method returns a <code>HttpResponseRedirect</code> to the URL defined by the <code>url</code> class attribute. The class exhibits a very interesting behaviour (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L195">views/generic/base.py#L195</a>) when called through HTTP methods other than GET (namely HEAD, POST, OPTIONS, DELETE, and PUT): it &#8220;converts&#8221; the method to GET simply calling <code>get()</code> from the respective method (<code>head()</code>, <code>post()</code>, and so on). In the next post I&#8217;ll show how to leverage this simple technique to show the user a prefilled form.</p>

<h2>Date-based views</h2>

<p>Django provides other class-based views that simplify dealing with objects extracted or ordered by date. As a programmer, you know that dealing with dates is sometimes at least awkward; the views in <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/dates.py">views/generic/dates.py</a> aims to help you to tame your date-based objects; any object that contains a date (e.g. post date for articles, birth date for people, log date for messages, etc) can be processed by these views. You can find the official documentation <a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/generic-date-based/">here</a>.</p>

<p>Remember that date-based views are CBVs, so they are based on <code>View</code>, just like <code>ListView</code> or <code>TemplateView</code>. So, apart from their specialization on date processing, they behave the same (<code>get_context_data()</code>, <code>get()</code>, <code>dispatch()</code>, and so on).</p>

<h2>Conclusion</h2>

<p>In this post we covered <code>DetailView</code> in deep and, more quickly, all the remaining base and data-based views. In the next post we will step into the rich (and strange) world of forms.</p>

<p>Feel free to use <a href="https://plus.google.com/u/0/b/110554719587236016835/110554719587236016835/posts">the blog Google+ page</a> to comment the post or to ask for an in-depth analysis of some topic. <a href="https://github.com/lgiordani/lgiordani.github.com/issues">GitHub issues</a> is the best place to submit corrections.</p>

<h2>Previous articles</h2>

<ul>
<li><a href="http://lgiordani.github.io/blog/2013/10/28/digging-up-django-class-based-views-1">Digging Up Django Class-based Views - 1</a></li>
</ul>


<h2>Next articles</h2>

<ul>
<li><a href="http://lgiordani.github.io/blog/2014/02/14/digging-up-django-class-based-views-3">Digging Up Django Class-based Views - 3</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Digging up Django class-based views - 1]]></title>
    <link href="http://lgiordani.github.io/blog/2013/10/28/digging-up-django-class-based-views-1/"/>
    <updated>2013-10-28T08:43:00+01:00</updated>
    <id>http://lgiordani.github.io/blog/2013/10/28/digging-up-django-class-based-views-1</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p><em>This post refers to Django 1.5. Please be warned that some of the matters discussed here, some solutions or the given code can be outdated by more recent Django versions</em></p>

<p>Django programmers that started with versions prior to 1.3 are used to deal with views as functions, and they learned how to process even complex forms in a procedural way. From the release 1.3, Django introduced class-based views (CBVs) and ported its powerful generic views to this new paradigm (class-based generic views, or CBGVs).</p>

<p>This change, however, has not been harmless for Django novices: the django-users mailing list and StackOverflow are full of questions about views and classes, and the official documentation on this topic is still a little unorganized. Well, open source things are always ready to be improved, aren&#8217;t they? This post aims to share some thoughts and insights about CBVs, and hopefully it can also lead to an improvement of the official documentation.</p>

<p>I want to thank all Django developers for their work. Despite the previous criticism on documentation, this post wants to be a thanksgiving for their efforts.</p>

<!--more-->


<p>Feel free to comment <a href="https://plus.google.com/u/0/b/110554719587236016835/110554719587236016835/posts">here</a> or to submit issues <a href="https://github.com/lgiordani/lgiordani.github.com/issues">here</a>.</p>

<h2>What are CBVs?</h2>

<p>Class-based views are, indeed, (Django) views based on (Python) classes. Until here, it makes sense, hopefully. This means that, to master them, you need to understand both Django views and Python classes, so let&#8217;s give a quick definition of them.</p>

<p>A Django view is a piece of code that processes an HTTP request and returns an HTTP response. Oh yes, nothing more, nothing less.
A Python class is the implementation of the Object-Oriented concept of class in the Python language.</p>

<p>So a view just need to be a <a href="http://docs.python.org/2/library/functions.html#callable">callable</a>, and this includes functions and classes. Thus, to understand the advantages of class-based views over function-based views we shall discuss the merits of classes over functions. This latter sentence could be the title of a 10 volumes book on programming (followed by another 10 volumes book titled &#8220;Merits of functions over classes&#8221;), so I am just going to scratch the surface of the matter.</p>

<h2>Starting off with Python classes</h2>

<p>The main point of a class is implementing encapsulation: they represent a way of coupling data and functions. Doing this, a class loses the dynamic essence of a procedure, which exists only while it is running, and becomes a living entity, something that sits there, caring for its data, and reacts when we call its functions (methods).</p>

<p>A good analogy for a class is a finite-state machine: once the class has been initialized, methods are what we use to make it move between states. If we do not call methods, the class simply waits there without complaining.</p>

<p>As an example, let&#8217;s look at a very simple procedure that takes a list and extracts the even numbers from it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">extract_even_numbers</span><span class="p">(</span><span class="n">alist</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">alist</span> <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The example is very trivial, but I think there is always time to tangle up the code, so let us start with simple things. A class version of this function could be written as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">EvenExtractor</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">alist</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">l</span> <span class="o">=</span> <span class="n">alist</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">extract</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">l</span> <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seems to be the same thing, doesn&#8217;t it? Indeed the difference is subtle but remarkable. Now the extractor has two parts, the first being the initialization and the second being the actual extraction, and we can have the class in one of three states: before initialization (<code>e = EvenExtractor</code>), after initialization (<code>e = EvenExtractor(range(120))</code>), and after extraction (<code>l = e.extract()</code>. Being a finite-state machine we can interact with it before moving from a state to another. For example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">e</span> <span class="o">=</span> <span class="n">EvenExtractor</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">120</span><span class="p">))</span> <span class="c"># State B</span>
</span><span class='line'><span class="n">e</span><span class="o">.</span><span class="n">l</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>
</span><span class='line'><span class="n">e</span><span class="o">.</span><span class="n">extract</span><span class="p">()</span> <span class="c"># State C</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, despite the very simple example the point is: by converting the procedure to a class we obtained a rich tool that can execute its job step by step and, in general, can work in a non linear way.</p>

<h2>Playing with genetics</h2>

<p>The real power of classes used as finite-state machines lies in the concept of <a href="http://en.wikipedia.org/wiki/Inheritance_%28object-oriented_programming%29">inheritance</a>. Inheritance is a mechanism through which a class can copy another class and then change only the parts that have to behave differently. Please note that here we talk about classes and not instances, so the copy action here refers to the structure of the class, not the actual data contained in it. Inheritance is a mean to mimic the behaviour of a class.</p>

<p>(Sidenote: <em>I am a strong supporter of an OO design principle that states &#8220;Favour composition over inheritance&#8221; (and favor &#8220;favor&#8221; over &#8220;favour&#8221; for US audience). I read too many OOP introductions that stress too much the inheritance mechanism and leave composition aside, raising a generation of OOP programmers that, instead of building systems populated by many small collaborating objects create nightmares infested by giant all-purpose things that sometimes resemble an operating system more than a system component. Given that, inheritance plays an important role in OOP, and here we find a very good example of its real benefit.</em>)</p>

<p>Let&#8217;s continue the above example, first by enriching the EvenExtractor class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">EvenExtractor</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">alist</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="k">for</span> <span class="n">elem</span> <span class="ow">in</span> <span class="n">alist</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">extract</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">l</span> <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the class performs an important action in its initialization phase, converting all elements of the input list to integers, and we can happily use it in our Next Big Project™. Some days after this change we realize that we could also profitably use a class that extracts odd elements form a list. Being good object oriented programmers we write</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">OddExtractor</span><span class="p">(</span><span class="n">EvenExtractor</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">extract</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">l</span> <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>and call it a day. Indeed, through the inheritance mechanism expressed by that <code>(EvenExtractor)</code> signature of the new class, we defined something that is exactly the same thing as <code>EvenExtractor</code>, with the same methods and attributes, but with a different name. Then we changed the behaviour of the new class but only for the extraction part by <a href="http://en.wikipedia.org/wiki/Method_overriding">overriding the method</a>.</p>

<p>To summarize the lesson: using classes and inheritance you can build finite-state machines that are easily customizable to suit your exact needs. This obviously is just one of the many points of view under which you can consider classes, but it is the one we need to understand Django CBVs.</p>

<h2>Back to Django</h2>

<p>Finally! You couldn&#8217;t take Python classes anymore, could you? Sorry, we are dealing with them further, but for the moment let us move to Django to look at a practical use of what we learned in the previous sections.</p>

<p>A Django view is a perfect example of a finite-state machine. It takes an incoming request and makes it flow through different processing steps until a final response is produced, which is then sent back to the user. So, for the love of definitions, say that CBVs are the Django mechanism to allow the programmer to write their views leveraging the tools made available by the object-oriented paradigm. In this context (pun intended) CBGVs are the &#8220;batteries included&#8221; of Django views: (class-based) generic views are powerful tools that the framework gives you to accomplish the most usual tasks, and sometimes even the unusual ones.</p>

<p>Let&#8217;s dig into one of the examples of the official Django docs; <a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/generic-display/#listview">here</a> you find the API of the beloved <code>ListView</code>, a generic view to deal with a list of things (extracted from the database).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.views.generic.list</span> <span class="kn">import</span> <span class="n">ListView</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">articles.models</span> <span class="kn">import</span> <span class="n">Article</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ArticleListView</span><span class="p">(</span><span class="n">ListView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">model</span> <span class="o">=</span> <span class="n">Article</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example assumes that <code>articles</code> is your application and <code>Article</code> is one of its models.</p>

<p>This short piece of code leverages the full power of inheritance. Indeed we just derived <code>ArticleListView</code> from <code>ListView</code> and changed the class attribute <code>model</code>: how can this work? How can this class process incoming requests and what are the outputs? The official documentation states &#8220;While this view is executing, self.object_list will contain the list of objects (usually, but not necessarily a queryset) that the view is operating upon.&#8221;; this leaves many dark corners, however, and if you are a novice, chances are that you are already lost.</p>

<p>Since <code>ArticleListView</code> derives from <code>ListView</code>, the latter is the class we have to analyze to understand how data are processed. To do this you need to look at the <a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/generic-display/#django.views.generic.list.ListView">documentation</a>, and if something is still unclear you can freely look at the <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/list.py">source code</a>. As already said I find a little difficult to find a clear way through the docs, so I&#8217;ll try to summarize here what I learned. In the following paragraphs you will find links like (<a href="">SC</a>) which point to the source code, if you want to read it by yourself.</p>

<h4>URL dispatchers and views</h4>

<p>A CBV cannot directly be used in your URL dispatcher; instead you have to give the result of the <code>as_view()</code> method (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L31">SC</a>), which basically defines a function that instances the class (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L46">SC</a>) and calls the <code>dispatch()</code> method (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L47">SC</a>); then the function is returned to be used in the URL dispatcher (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L55">SC</a>). As a user, we are interested only in the fact that the <em>entry point</em> of the class, i.e. the method called when a request hits the URL linked with it, is <code>dispatch()</code>.</p>

<p>Let&#8217;s use this knowledge to print out a string on the console each time a request is served by our CBV. I&#8217;m running through this (indeed simple) task step by step since it shows exactly how you have to deal with CBVs when solving real problems.</p>

<p>If we define the <code>ArticleListView</code> class this way</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.views.generic.list</span> <span class="kn">import</span> <span class="n">ListView</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">articles.models</span> <span class="kn">import</span> <span class="n">Article</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ArticleListView</span><span class="p">(</span><span class="n">ListView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">model</span> <span class="o">=</span> <span class="n">Article</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="nf">dispatch</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>      <span class="nb">super</span><span class="p">(</span><span class="n">ArticleListView</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">dispatch</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>the class does not change its behaviour. What we did was to override the <code>dispatch()</code> method with a call to the parent&#8217;s method, i.e. we explicitly wrote what Python does by default. You can find detailed information about <code>super()</code> <a href="http://docs.python.org/2/library/functions.html#super">here</a>. Please be also sure to understand the star and double star notation to define variable number of arguments; the official documentation is <a href="http://docs.python.org/2.7/tutorial/controlflow.html#more-on-defining-functions">here</a>.</p>

<p>Since views are automatically called by the framework, this latter expects them to comply with a very specific API, so when overriding a method you have to obey its signature. The signature of <code>dispatch()</code> can be found <a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/base/#django.views.generic.base.View.dispatch">here</a>; by the way, this documentation of <code>dispatch()</code> gives you good hints about the internal working mechanism of CBVs.</p>

<p>The <code>dispatch()</code> method receives a <code>request</code> argument, which type is <code>HttpRequest</code> (<a href="https://docs.djangoproject.com/en/1.5/ref/request-response/#httprequest-objects">documentation</a>), and we can print it on the console with the standard <code>print()</code> function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.views.generic.list</span> <span class="kn">import</span> <span class="n">ListView</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">articles.models</span> <span class="kn">import</span> <span class="n">Article</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ArticleListView</span><span class="p">(</span><span class="n">ListView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">model</span> <span class="o">=</span> <span class="n">Article</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="nf">dispatch</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>      <span class="k">print</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">super</span><span class="p">(</span><span class="n">ArticleListView</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">dispatch</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This prints the content of the <code>request</code> object on the standard output of the Python code, that is on the standard output of the server that is running the Django project. If you are running the Django development server, you will find the output on the text console where you issued the <code>django-admin.py runserver</code> command (or <code>manage.py runserver</code>).</p>

<p>This, in a nutshell, is the standard way of dealing with framework classes, and thus with Django&#8217;s CBGVs: inherit from a predefined class, identify which methods you need to change, override them complying with their signature and calling the parent&#8217;s code somewhere in the new code.</p>

<p>The full list of methods <code>ListView</code> uses when processing incoming requests is listed on its <a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/generic-display/#listview">official documentation page</a> in the &#8220;Method Flowchart&#8221; section; in the &#8220;Ancestors (MRO)&#8221; section you can see that <code>ListView</code> itself inherits from a good number of other classes. MRO stands for Method Resolution Order and has to deal with multiple inheritance: if you are eager to deal with one of the most intricate Python topics feel free to read <a href="http://docs.python.org/2/tutorial/classes.html#multiple-inheritance">here</a>.</p>

<h4>Incoming GET requests</h4>

<p>Back to our <code>ArticleListView</code>. The <code>dispatch()</code> method of the parent reads the <code>method</code> attribute of the <code>request</code> object and selects a handler to process the request itself (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L57">SC</a>): this means that if <code>request.method</code> is <code>'GET'</code>, which is the HTTP way to say that we are <em>reading</em> a resource, <code>dispatch()</code> will call the <code>get()</code> method of the class.</p>

<p>The <code>get()</code> method of <code>ListView</code> comes from its <code>BaseListView</code> ancestor (<a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/generic-display/#django.views.generic.list.BaseListView">documentation</a>, <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/list.py#L114">source code</a>). This function is the one that contains the functional view code, so if you are accustomed to function-based views you&#8217;ll find yourself at home here. As you can see, the function basically fills the attribute <code>self.object_list</code> with the result of the method <code>self.get_queryset()</code>, creates a context calling the method <code>self.get_context_data()</code> and calls the class version of <code>render_to_response()</code>, namely <code>self.render_to_response()</code>.</p>

<p>Are you still with me? Don&#8217;t give up, we are nearly at the end (with ListView). The method <code>self.get_queryset()</code> comes from the <code>MultipleObjectMixin</code> ancestor of <code>ListView</code> (<a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/mixins-multiple-object/#multipleobjectmixin">documentation</a>, <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/list.py#L11">source code</a>) and simply gets all objects of a given model (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/list.py#L29">SC</a>) issuing <code>queryset = self.model._default_manager.all()</code>. The value of <code>self.model</code> is what we configured in our class when we wrote <code>model = Article</code>.</p>

<p>That&#8217;s all. Our <code>ArticleListView</code> class extracts all <code>Article</code> objects from the database, and calls a template passing a context that contains a single variable, <code>object_list</code>, instanced with the list of extracted objects.</p>

<h4>Templates and contexts</h4>

<p>Are you satisfied? I&#8217;m actually still curious about the template and the context. Let&#8217;s see what we can find about these topics. First of all, when the class calls <code>self.render_to_response()</code> it uses the code that comes from its <code>TemplateResponseMixin</code> ancestor (<a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/mixins-simple/#templateresponsemixin">documentation</a>, <a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L81">source code</a>); the method calls some other functions but its basic behaviour is to create a response using a template and a context. The template, again through a series of calls which you can follow by yourself, comes from <code>self.template_name</code> (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L109">SC</a>); while <code>TemplateResponseMixin</code> defines it <code>None</code> (<a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L85">SC</a>), <code>ListView</code> does some magic through ancestors (<a href="https://github.com/django/django/blob/stable/1.3.x/django/views/generic/list.py#L128">SC</a>) to return a template which name derives from the given model. So, in short, our <code>ArticleListView</code>, defining an <code>Article</code> model, automatically uses a template that is called <code>article_list.html</code>.</p>

<p>May we change this behaviour? Of course! This is, after all, the point of using classes instead of functions: easily customize the behaviour. We can change the definition of our class like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.views.generic.list</span> <span class="kn">import</span> <span class="n">ListView</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">articles.models</span> <span class="kn">import</span> <span class="n">Article</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ArticleListView</span><span class="p">(</span><span class="n">ListView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">model</span> <span class="o">=</span> <span class="n">Article</span>
</span><span class='line'>    <span class="n">template_name</span> <span class="o">=</span> <span class="s">&#39;sometemplate.html&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What does this exactly do? When the <code>self.render_to_response()</code> method looks for <code>self.template_name</code> this attribute has a value, so there is no need to call the predefined methods and <code>sometemplate.html</code> becomes the name of the template used to render the response. This follows a very useful pattern of object-oriented programming; if you are interested I can write something about this topic.</p>

<p>As regards the context, remember that it is only a dictionary of values you want to access when compiling the template. Variable names inside the context (as thus inside the template), data format and data content are completely up to you. When using CBGVs, however, you will find in your context some variables that have been created by the ancestors of your view, as happens for <code>object_list</code>. What if you want to show a page with the list of all Articles, but you want to add a value to the context?</p>

<p>Nothing is easier: you just need to override the function that produces the context and change its behaviour. Say, for example, that we want to show the number of total readers of our site, along with the list of articles. Assuming that a <code>Reader</code> model is available we can write</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.views.generic.list</span> <span class="kn">import</span> <span class="n">ListView</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">articles.models</span> <span class="kn">import</span> <span class="n">Article</span><span class="p">,</span> <span class="n">Reader</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ArticleListView</span><span class="p">(</span><span class="n">ListView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">model</span> <span class="o">=</span> <span class="n">Article</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_context_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>      <span class="n">context</span> <span class="o">=</span> <span class="nb">super</span><span class="p">(</span><span class="n">ArticleListView</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">get_context_data</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>      <span class="n">context</span><span class="p">[</span><span class="s">&#39;readers&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">Reader</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">context</span>
</span></code></pre></td></tr></table></div></figure>


<p>As always, when overriding a method we first call the ancestor&#8217;s one, so that we get the result expected from a normal behaviour of the method, then we add out customizations.</p>

<h2>Conclusion</h2>

<p>In this first post I tried to uncover some of the mysteries behind CBVs and CBGVs in Django, by showing step by step what happens to a GET request that hits a class-based view. Hopefully the matter has now been demystified a little!</p>

<p>In the next posts I will discuss DetailView, the generic view to show detail about an object, how to create custom CBVs and how to use CBVs to process forms, i.e. POST requests.</p>

<p>Let me know if this post helped you in understanding the matter and feel free to point out any error or to ask questions.</p>

<h2>Updates</h2>

<p>2013-10-29: As pointed out by <a href="http://www.reddit.com/user/mbrochh">mbrochh</a> on Reddit, there is a very useful resource for Django programmers: <a href="http://ccbv.co.uk/">Classy Class-Based Views</a>. It is a comprensive index of all CBGVs with ancestors and method signatures. Make sure to have it in you Django bookmarks!</p>

<p>2013-10-29: I fixed a couple of typos when overriding <code>dispatch()</code>. Thanks to Tom Evans for spotting them.</p>

<p>2013-10-30: Fixed the <code>__init__()</code> method of <code>EvenExtractor</code>, that was missing the <code>self</code> parameter. Thanks <a href="http://www.reddit.com/user/meatypocket">meatypocket</a>.</p>

<h2>Next articles</h2>

<ul>
<li><p><a href="http://lgiordani.github.io/blog/2013/12/11/digging-up-django-class-based-views-2">Digging Up Django Class-based Views - 2</a></p></li>
<li><p><a href="http://lgiordani.github.io/blog/2014/02/14/digging-up-django-class-based-views-3">Digging Up Django Class-based Views - 3</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some tips about AMQP direct exchanges]]></title>
    <link href="http://lgiordani.github.io/blog/2013/08/21/some-tips-about-amqp-direct-exchanges/"/>
    <updated>2013-08-21T18:10:00+02:00</updated>
    <id>http://lgiordani.github.io/blog/2013/08/21/some-tips-about-amqp-direct-exchanges</id>
    <content type="html"><![CDATA[<p><em>EDIT: thanks to Alvaro Videla that pointed out that a queue can be connected to more than one exchange; sorry for the wrong information.</em></p>

<p>Everyone who started using AMQP learned from the very beginning that there are three different types of exchanges, namely direct, fanout and topic. In this post, I am going to highlight some interesting properties of direct exchanges, which were not clear to me when I started using RabbitMQ.</p>

<p>Now some time has passed since I started, and reading the <a href="http://www.rabbitmq.com/getstarted.html">RabbitMQ tutorials</a> again I can see that these properties are no mystery. However, in this short post I want to clearly point out three different uses of direct exchanges, in the hope that other novices will be helped to better understand those powerful components of an AMQP system.</p>

<!--more-->


<h2>Movie cast</h2>

<p>The cast of an AMQP message delivery is made of three different type of components: the exchange, the queues, and the consumers.</p>

<p>The exchange is the container of all the messages other components sent; each message has been tagged with a routing key and they can be extracted from the exchange by means of those keys.</p>

<p>The consumers are those which are interested in getting messages from the exchange, so their main activity is to connect to the exchange, pick messages from it and act according to its content. A consumer can connect to more than one exchange and receive messages concurrently.</p>

<p>The queues are the real core of the system. They actually extract messages from the exchange according to their configuration, and you are not wrong if you think that they are the real routing component of AMQP; indeed exchanges do not exist as separate components, so the routing game is played by the channel and the queues.</p>

<p>Let us consider queues at a deeper level. They are two sided components, messages enter from one side and exit from the other one. Thus each queue can establish connections on both sides: on the input side a queue fetches messages from <strong>one or more exchanges</strong> while on the output side the queue can be connected to <strong>one or more consumers</strong>. From the single queue point of view being connected to more than one exchange with the same routing key is transparent, since the only thing that concerns the queue itself are the incoming messages; being connected to more than one exchange with different routing keys leads to complex scenarios, so in this article I will consider a single direct exchange delivering messages to queues.</p>

<h2>Three configurations</h2>

<p>As you can easily see, the most general case with direct exchanges is that of multiple queues connected to the same exchange, with multiple consumers connected to each queue.</p>

<p><img src="http://lgiordani.github.io/downloads/images/amqp_direct_exchanges/image01.jpg"></p>

<p>The edge cases of this configuration can be obtained decreasing the number of queues, the number of consumers, or both, to a single unit. This leads to three different configurations:</p>

<ul>
<li>The &#8220;direct&#8221; case (see <a href="http://www.rabbitmq.com/tutorials/tutorial-one-python.html">tutorial number 1</a>). Here, only a queue is configured with a given routing key and only a consumer is connected to that queue. Every message sent to the exchange with that routing key will be delivered to the consumer.</li>
</ul>


<p><img src="http://lgiordani.github.io/downloads/images/amqp_direct_exchanges/image02.jpg"></p>

<ul>
<li>The &#8220;round robin&#8221; case (see <a href="http://www.rabbitmq.com/tutorials/tutorial-two-python.html">tutorial number 2</a>). Here, two or more consumers are connected to the same queue (pay attention, not two queues configured with the same key), and the messages in the queue are dispatched in a round robin way, i.e. each consumer receives one of the messages until there are no more consumers, then the procedure starts again.</li>
</ul>


<p><img src="http://lgiordani.github.io/downloads/images/amqp_direct_exchanges/image03.jpg"></p>

<ul>
<li>The &#8220;fanout&#8221; case (see &#8220;Multiple bindings&#8221; in <a href="http://www.rabbitmq.com/tutorials/tutorial-four-python.html">tutorial number 4</a>). Here, two or more different queues configured with the same key connect to the same exchange, and each of them dispatches messages to only one consumer. Since the queues pick messages with the same routing key, messages are duplicated and dispatched simultaneously to each of them. This makes the direct exchange behave like a fanout one, <strong>but only for the queues bound with that routing key</strong>.</li>
</ul>


<p><img src="http://lgiordani.github.io/downloads/images/amqp_direct_exchanges/image04.jpg"></p>

<p>The last consideration about the fanout case is important. A pure fanout exchange is somehow limited since it can only blindly dispatch messages to everyone connects. A direct exchange can behave like a fanout only for certain keys while acting as a direct or round robin dispatcher with other keys, at the same time.</p>

<h2>A real use case</h2>

<p>Let us look at a concrete example to better understand why direct exchanges can be used to solve the most part of routing issues we face. Remember that in AMQP queues are named objects and that names are primary keys, i.e. there cannot be two queues with the same name under the same virtual host.</p>

<p>This example is a simplified version of a real RabbitMQ system running Python programs based on <a href="https://github.com/lgiordani/postage">Postage</a>.</p>

<p>In a cluster, a single program can be uniquely identified by the compound value <code>(pid,host)</code>, since given a host only one program can have the given PID. To simplify the notation say that any program in the cluster is identified by a string of the form <code>pid@host</code> (for example <code>8669@yoda</code>, which is the editor I&#8217;m using in this very moment). To further simplify the management of our cluster say that each program has a name, such as the name of its executable file.</p>

<p>Given this configuration an obvious requirement is to be able to reach programs with messages grouping them according to some of the listed properties; the possible targets of our messages are:</p>

<ul>
<li>All programs on a given host. This is useful for example when you are going to reset that machine, and you need to previously signal each program running on it.</li>
<li>All programs running with a given name. This can be leveraged, for example, because you updated the executable or some plugins and you want them to refresh the code.</li>
<li>A single program, given its unique key <code>pid@host</code>. This comes in handy when you have to address a specific process, for example to gracefuly terminate it or to collect output.</li>
</ul>


<p>All these requirements can be fulfilled by a single direct exchange and multiple queues with suitable routing keys.</p>

<p>Take as an instance the first requirement: reaching all programs on a single host. You only need each program to declare a queue which is unique and to bind it to the exchange with the routing key <code>@host</code>, where host is the actual name of the host (<code>@yoda</code> in the previous example). Declaring a unique queue is simple, in that you can use the unique process name <code>pid@host</code>. The following picture shows the resulting setup: as you can see each queue has a unique name (its owner&#8217;s unique key) and is bound to the exchange with a routing key that depends on the host.</p>

<p><img src="http://lgiordani.github.io/downloads/images/amqp_direct_exchanges/image05.jpg"></p>

<p>Now some little magic. The second requirement can be fulfilled by connecting <strong>the same queue to the same exchange</strong> but with a different routing key, this time made by the program&#8217;s name. The resulting setup is represented in the following picture.</p>

<p><img src="http://lgiordani.github.io/downloads/images/amqp_direct_exchanges/image06.jpg"></p>

<p>The third requirement makes us connect the same queue with the same exchange with a routing key which is the unique name of the queue.</p>

<p>I hear you scream &#8220;Why do you call this <em>magic</em>?&#8221;</p>

<p>Indeed it is something very simple and straightforward, but take a look at the complete setup, where, for simplicity&#8217;s sake, the three connections between a queue and the exchange have been collapsed to one line.</p>

<p><img src="http://lgiordani.github.io/downloads/images/amqp_direct_exchanges/image07.jpg"></p>

<p>Here, we have a &#8220;selective fanout&#8221; behaviour, in that the actual &#8220;active&#8221; connections change depending on the routing key. If an incoming message is routed with the key &#8220;@host1&#8221;, for example, we obtain the following connections</p>

<p><img src="http://lgiordani.github.io/downloads/images/amqp_direct_exchanges/image08.jpg"></p>

<p>If the routing key changes to &#8220;program1&#8221; the connections become the following</p>

<p><img src="http://lgiordani.github.io/downloads/images/amqp_direct_exchanges/image09.jpg"></p>

<h2>Direct exchanges and load balance</h2>

<p>In the previous section we looked at a smart use of the third of the three configurations explained at the beginning of the post. We can profitably leverage the second one (the &#8220;round robin&#8221; case) to selectively reach cluster programs while balancing the load. Remember that the main use of a round robin message delivery is indeed to avoid overloading a single component or machine.</p>

<p>To balance the load among a set of programs we need each of them to declare a queue and share it with others: in other words we need to declare a queue with a shared name. This is very easy: for each of the properties of our programs a shared queue can be declared simply by naming it with the value of the property itself.</p>

<p>For example, declaring a queue named &#8220;@host1&#8221; creates a queue shared by each program running on host1, while a queue named &#8220;program1&#8221; is shared among all the programs running the same executable. Even PIDs can be used in this way, but since it is usually not interesting to get the set of all programs on the cluster running with the same pid, there is also no point in defining queues based on them.</p>

<p>In defining such queues you need to define a syntax (just like for the previous &#8220;fanout&#8221; case) to avoid name clashes; this is the reason why host routing keys have been prepended the <code>@</code> sign. Otherwise, a process named as one of the hosts would break the routing scheme.</p>

<p>The resulting setup is portrayed in the following picture</p>

<p><img src="http://lgiordani.github.io/downloads/images/amqp_direct_exchanges/image10.jpg"></p>

<p>Here you can see, for example, that sending a message with the routing key &#8220;@host1/rr&#8221; makes the message flow into the queue called &#8220;@host1&#8221;, which is shared by all the processes running on that host. Since the queue is shared, messages are not duplicated but delivered in a balanced way. The &#8220;/rr&#8221; suffix stands for Round Robin and usefully tells apart fanout routing keys from load balance ones.</p>

<h2>Conclusions</h2>

<p>Well, after all I just explained again and more verbosely the basic RabbitMQ examples, didn&#8217;t I?</p>

<p>Yes. However, I think such considerations can be useful for novices and from time to time it is a good thing for experts to refresh the plain old basic stuff. So this post can be used as a quick memo of the different configurations you can create with an AMQP direct exchange.</p>

<p>Stay tuned for other <a href="http://lgiordani.github.io/blog/categories/rabbitmq/">RabbitMQ</a> and <a href="http://lgiordani.github.io/blog/categories/amqp/">AMQP</a> posts!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postage - a RabbitMQ-based component Python library]]></title>
    <link href="http://lgiordani.github.io/blog/2013/07/25/postage-a-rabbitmq-based-component-python-library/"/>
    <updated>2013-07-25T15:50:00+02:00</updated>
    <id>http://lgiordani.github.io/blog/2013/07/25/postage-a-rabbitmq-based-component-python-library</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/pika/pika">Pika</a> is a wonderful pure Python implementation of the AMQP protocol. Using it you can exploit the full power of your RabbitMQ installation from your Python code.</p>

<p>When using pika to develop a component-based system I tried to write some code to simplify its use: the result is <a href="https://github.com/lgiordani/postage">Postage</a>, a Python library that provides higher level structures such as a message format, components fingerprint, rich producer and consumers.</p>

<p>Most notably it provides a handler mechanism for consumers that makes message processing a breeze.</p>

<p>Postage is freely available under the GPL2. It is based on the pika BlockingConnection since I had no experience with other adapters. If you want to hack it, feel free to <a href="https://github.com/lgiordani/postage">fork it on Github</a> and submit a pull request.</p>

<!--more-->


<h2>A simple ping example</h2>

<p>I&#8217;ll describe here a very simple example of a producer/consumer system using Postage; I&#8217;ll write a server that answers ping messages and a program that sends them. First I will implement a simple server that receives ping messages without answering, to introduce the reader to the base structures, then I will evolve it.</p>

<p>To execute the program you need a working RabbitMQ system, check the RabbitMQ documentation to install and run it. Postage assumes that your system is configured with the standard values (a &#8220;/&#8221; virtualhost, &#8220;guest&#8221; user and password). If not check <a href="https://github.com/lgiordani/postage#environment-variables">this paragraph</a> of the documentation.</p>

<h4>Setting up the exchange</h4>

<p>Put the following code in a <code>facilities.py</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">postage</span> <span class="kn">import</span> <span class="n">messaging</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PingExchange</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">Exchange</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;This is the exchange that receives ping messages.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;ping-exchange&quot;</span>
</span><span class='line'>    <span class="n">exchange_type</span> <span class="o">=</span> <span class="s">&quot;direct&quot;</span>
</span><span class='line'>    <span class="n">passive</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>    <span class="n">durable</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>    <span class="n">auto_delete</span> <span class="o">=</span> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>This imports the messaging part of Postage and declares a <code>PingExchange</code>, which is a simple direct RabbitMQ exchange, which name is <code>ping-exchange</code>. Remember that in a AMQP system exchanges are unique by name and virtualhost, i.e. given a virtualhost the name of the exchange uniquely identifies it.</p>

<h4>Setting up the producer</h4>

<p>Just below the exchange object we declare a producer, a class that can send a given set of messages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">PingProducer</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">GenericProducer</span><span class="p">):</span>
</span><span class='line'>    <span class="n">eks</span> <span class="o">=</span> <span class="p">[(</span><span class="n">PingExchange</span><span class="p">,</span> <span class="s">&#39;ping_rk&#39;</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">build_message_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">messaging</span><span class="o">.</span><span class="n">MessageCommand</span><span class="p">(</span><span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>First of all our producer inherits from <code>GenericProducer</code>, a rich object that manages low-level stuff such as connection to the AMQP broker (RabbitMQ), exchange declaration and message creation.</p>

<p>The <code>eks</code> class attribute is a list of exchange/routing key couples (tuples); we list here all the exchanges that will receive our messages when the object will send them and for each exchange we give a routing key. Recall that routing keys are used to label messages so that the exchange can route them to the subscribing queues (according to the rules of the exchange type). Here, we declare that the messages of our producer are going to be sent to the <code>PingExchange</code> exchange with the <code>ping_rk</code> routing key.</p>

<p>Then we declare a <code>build_message_ping()</code> method, which simply builds a new message and returns it. This latter is a command message that in Postage lingo means a message that contains an action the receiver shall execute (a fire-and-forget call).</p>

<h4>The producer</h4>

<p>The program that sends ping messages is very straightforward; it shall declare a message producer and use it to send the message. Create the <code>send_ping.py</code> file and write the following code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">postage</span> <span class="kn">import</span> <span class="n">messaging</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">facilities</span>
</span><span class='line'>
</span><span class='line'><span class="n">fingerprint</span> <span class="o">=</span> <span class="n">messaging</span><span class="o">.</span><span class="n">Fingerprint</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;ping_sender&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the usual imports, I create a fingerprint for this program. As explained in <a href="https://github.com/lgiordani/postage#fingerprint">the documentation</a>, a fingerprint is a collection of useful information about the component that sends messages. It can be easily customized since all Postage objects expect it to be a dictionary, so any object that behaves like a dictionary works. The standard <code>Fingerprint</code> provided by Postage collects some useful properties from the OS and the RabbitMQ installation; here we customize the <code>name</code> value that otherwise would be set to <code>None</code>. The fingerprint, once loaded in a producer, will be automatically attached to any message the producer will send.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">producer</span> <span class="o">=</span> <span class="n">facilities</span><span class="o">.</span><span class="n">PingProducer</span><span class="p">(</span><span class="n">fingerprint</span><span class="o">.</span><span class="n">as_dict</span><span class="p">())</span>
</span><span class='line'><span class="n">producer</span><span class="o">.</span><span class="n">message_ping</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>PingProducer</code> we declared in <code>facilities.py</code> is instanced, and its <code>message_ping()</code> method is invoked.
If you review the above paragraph you will notice that you never defined a <code>message_ping()</code> method; this is automatically implemented by the <code>GenericProducer</code> class from the <code>build_message_ping()</code> method. The class performs many actions under the hood: it executes some code to set up the correct RabbitMQ structures, calls your method to get the actual message data, attaches the fingerprint to the message, and serializes the message data. Eventually, the producer sends the message to the exchange defined in the class (<code>PingExchange</code>) with the linked routing key (<code>ping_rk</code>).</p>

<h4>The server program</h4>

<p>Now we will write a component that receives ping command messages and performs some action accordingly. Open a <code>receive_ping.py</code> file and write the following code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">postage</span> <span class="kn">import</span> <span class="n">messaging</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">postage</span> <span class="kn">import</span> <span class="n">microthreads</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">facilities</span>
</span><span class='line'>
</span><span class='line'><span class="n">fingerprint</span> <span class="o">=</span> <span class="n">messaging</span><span class="o">.</span><span class="n">Fingerprint</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;ping_receiver&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>that loads the modules we need and builds the fingerprint of this application. Creating a receiver means declaring a class that inherits from <code>MessageProcessor</code> and implements a method for each incoming message we want to process.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">PingReceiver</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">MessageProcessor</span><span class="p">):</span>
</span><span class='line'>    <span class="nd">@messaging.MessageHandler</span><span class="p">(</span><span class="s">&#39;command&#39;</span><span class="p">,</span> <span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">msg_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Got a ping!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see here the <code>msg_ping()</code> method is declared as a handler for the command message <code>ping</code>; the name of the method is arbitrary, but it has to accept one parameter, namely the content of the incoming message (more on this later). In this case, when the object receives a ping message it just prints out a string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">eqks</span> <span class="o">=</span> <span class="p">[(</span><span class="n">facilities</span><span class="o">.</span><span class="n">PingExchange</span><span class="p">,</span> <span class="p">[(</span><span class="s">&#39;ping_queue&#39;</span><span class="p">,</span> <span class="s">&#39;ping_rk&#39;</span><span class="p">)])]</span>
</span><span class='line'><span class="n">receiver</span> <span class="o">=</span> <span class="n">PingReceiver</span><span class="p">(</span><span class="n">fingerprint</span><span class="o">.</span><span class="n">as_dict</span><span class="p">(),</span> <span class="n">eqks</span><span class="p">,</span>
</span><span class='line'>                        <span class="bp">None</span><span class="p">,</span> <span class="n">messaging</span><span class="o">.</span><span class="n">global_vhost</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To start the receiver we have to connect it to an exchange; recall that the AMQP mechanism requires you to declare a queue and to connect it to an exchange through a key, which format depends on the exchange type. Being the <code>PingExchange</code> a direct exchange we want to connect to it with the exact routing key we want to match, that is <code>ping_rk</code>. The <code>eqks</code> structure is rather complex and may result overblown in such a simple context: it is a list of tuples in the form <code>(exchange_class, qk_list)</code> that links the given exchange class to a list of queues; this latter list contains tuples in the form <code>(queue_name, key)</code>. Each queue listed here connects to the exchange and fetches messages that match the linked key.</p>

<p>In this case, we simply subscribe the <code>facilities.PingExchange</code> exchange with a <code>ping_queue</code> queue receiving messages routed with the <code>ping_rk</code> key.</p>

<p>The receiver is then instanced. The arguments we pass are the fingerprint dictionary, the eqks we just discussed, a HUP tuple (Host, User, Password) to connect to RabbitMQ and the RabbitMQ virtualhost we want to use. In this case, we stick to the <a href="https://github.com/lgiordani/postage#environment-variables">default HUP</a> and to the default virtualhost.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">scheduler</span> <span class="o">=</span> <span class="n">microthreads</span><span class="o">.</span><span class="n">MicroScheduler</span><span class="p">()</span>
</span><span class='line'><span class="n">scheduler</span><span class="o">.</span><span class="n">add_microthread</span><span class="p">(</span><span class="n">receiver</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">scheduler</span><span class="o">.</span><span class="n">main</span><span class="p">():</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code creates a scheduler and adds the receiver, which is a <code>microthreads.Microthread</code>, then starts the execution loop.</p>

<h4>Execution</h4>

<p>Open two different shells on your system and execute the receiver in the first</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ python receive_ping.py
</span><span class='line'>postage.messaging: global_vhost set to /
</span></code></pre></td></tr></table></div></figure>


<p>and the sender in the second</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ python send_ping.py
</span><span class='line'>postage.messaging: global_vhost set to /
</span><span class='line'>$
</span></code></pre></td></tr></table></div></figure>


<p>The receiver shall at this point notify that a message has been sent</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ python receive_ping.py
</span><span class='line'>postage.messaging: global_vhost set to /
</span><span class='line'>Got a ping!
</span></code></pre></td></tr></table></div></figure>


<p>which is what we expected. You can stop the receiver with <code>Ctrl-C</code>, this kills the Pika connection somehow abruptly, but I am not going to implement in this article a good signal management.</p>

<h4>Adding message parameters</h4>

<p>Now we want to add a parameter to the message we send, namely the time at which the message was sent. To do this we make some changes to <code>facilities.py</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PingProducer</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">GenericProducer</span><span class="p">):</span>
</span><span class='line'>    <span class="n">eks</span> <span class="o">=</span> <span class="p">[(</span><span class="n">PingExchange</span><span class="p">,</span> <span class="s">&#39;ping_rk&#39;</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">build_message_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">messaging</span><span class="o">.</span><span class="n">MessageCommand</span><span class="p">(</span><span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">build_message_timed_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">messaging</span><span class="o">.</span><span class="n">MessageCommand</span><span class="p">(</span><span class="s">&#39;timed_ping&#39;</span><span class="p">,</span>
</span><span class='line'>                                        <span class="n">parameters</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;time&#39;</span><span class="p">:</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()})</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see I just added the <code>build_message_timed_ping()</code> method, which sends a <code>timed_ping</code> command, but this time I added a <code>parameters</code> dictionary that encompasses all the parameters of the command. Remember that all the structures you put in a message are serialized in JSON by default so they must be processable by <code>json.dumps()</code>; if you need to send very complex structures you can customize Postage to use another encoder, either a customized JSON or a completely different one; see <a href="https://github.com/lgiordani/postage#encoder">the documentation</a>.</p>

<p>The receiver has to be modified accordingly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">PingReceiver</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">MessageProcessor</span><span class="p">):</span>
</span><span class='line'>    <span class="nd">@messaging.MessageHandler</span><span class="p">(</span><span class="s">&#39;command&#39;</span><span class="p">,</span> <span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">msg_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Got a ping!&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@messaging.MessageHandler</span><span class="p">(</span><span class="s">&#39;command&#39;</span><span class="p">,</span> <span class="s">&#39;timed_ping&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">msg_timed_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Got a timed ping! Time is </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="s">&#39;parameters&#39;</span><span class="p">][</span><span class="s">&#39;time&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the new method, <code>msg_timed_ping()</code>, prints a different message extracting the parameters from the message content.
Last, you need to add the actual call that sends the message to <code>send_ping.py</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">producer</span> <span class="o">=</span> <span class="n">facilities</span><span class="o">.</span><span class="n">PingProducer</span><span class="p">(</span><span class="n">fingerprint</span><span class="o">.</span><span class="n">as_dict</span><span class="p">())</span>
</span><span class='line'><span class="n">producer</span><span class="o">.</span><span class="n">message_ping</span><span class="p">()</span>
</span><span class='line'><span class="n">producer</span><span class="o">.</span><span class="n">message_timed_ping</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The execution shows that everything works as expected</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ python receive_ping.py
</span><span class='line'>postage.messaging: global_vhost set to /
</span><span class='line'>Got a ping!
</span><span class='line'>Got a timed ping! Time is 1374826309.06
</span></code></pre></td></tr></table></div></figure>


<h4>Adding call parameters</h4>

<p>If you want to allow the user to pass a parameter when sending the message, you just need to accept and use it in your <code>build_message_NAME()</code> method. In <code>facilities.py</code> add:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">PingProducer</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">GenericProducer</span><span class="p">):</span>
</span><span class='line'>    <span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">build_message_custom_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">custom_value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">messaging</span><span class="o">.</span><span class="n">MessageCommand</span><span class="p">(</span><span class="s">&#39;custom_ping&#39;</span><span class="p">,</span>
</span><span class='line'>                                    <span class="n">parameters</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;custom_value&#39;</span><span class="p">:</span><span class="n">custom_value</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add a handler in the receiver (<code>receive_ping.py</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">PingReceiver</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">MessageProcessor</span><span class="p">):</span>
</span><span class='line'>    <span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span><span class='line'>    <span class="nd">@messaging.MessageHandler</span><span class="p">(</span><span class="s">&#39;command&#39;</span><span class="p">,</span> <span class="s">&#39;custom_ping&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">msg_custom_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Got a custom ping! The custom value is </span><span class="si">%s</span><span class="s">&quot;</span>\
</span><span class='line'>              <span class="o">%</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="s">&#39;parameters&#39;</span><span class="p">][</span><span class="s">&#39;custom_value&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>And exploit it when sending the message (<code>send_ping.py</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">producer</span><span class="o">.</span><span class="n">message_custom_ping</span><span class="p">((</span><span class="s">&quot;Just ping me&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you execute it you get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ python receive_ping.py
</span><span class='line'>postage.messaging: global_vhost set to /
</span><span class='line'>Got a ping!
</span><span class='line'>Got a timed ping! Time is 1374832738.18
</span><span class='line'>Got a custom ping! The custom value is [u&#39;Just ping me&#39;, 1]
</span></code></pre></td></tr></table></div></figure>


<p>Pay attention to JSON, which does not tell apart tuples from lists.</p>

<h4>RPC calls to the rescue</h4>

<p>The ping mechanism is not really working until the server answers the message. To answer incoming messages we can implement two different strategies; the first is the asynchronous one, which leverages fire-and-forget messages, the second uses RPC calls. While the first is simpler to implement at a system level (you just send messages as usual), it is complex on the user side since it requires the programmer to structure the whole program in an asynchronous way. The second approach, resembling usual function calls, is easier to understand and include in a program; it has many downsides and caveats, however, so do not abuse it.</p>

<p>For the sake of simplicity let us implement a RPC version of the ping mechanism. First we add a specific message to the producer</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">PingProducer</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">GenericProducer</span><span class="p">):</span>
</span><span class='line'>    <span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">build_rpc_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">messaging</span><span class="o">.</span><span class="n">RpcCommand</span><span class="p">(</span><span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Things are not very different from the previous cases here: we use the <code>build_rpc_NAME()</code> form of the method then we return an RpcCommand, instead of a MessageCommand. Beware that, alas!, nomenclature here is a little misleading: both are messages in the sense of &#8220;something that will be sent on the AMQP network&#8221;, but while MessageCommand does not expect an answer, RpcCommand does.</p>

<p>I want to point out that the name of the message is <code>ping</code> just like the previous one; Postage tells the two messages apart using the name (<code>ping</code>), the type (<code>command</code>) and the category (<code>rpc</code> or <code>message</code>), although this latter is somewhat concealed.</p>

<p>The receiver needs a new handler to process the incoming RPC <code>ping</code> message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">PingReceiver</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">MessageProcessor</span><span class="p">):</span>
</span><span class='line'>    <span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span><span class='line'>    <span class="nd">@messaging.RpcHandler</span><span class="p">(</span><span class="s">&#39;command&#39;</span><span class="p">,</span> <span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">msg_rpc_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">reply_func</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Got a ping! Answering...&quot;</span>
</span><span class='line'>        <span class="n">reply_func</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">MessageResult</span><span class="p">(</span><span class="s">&#39;Pong&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Accordingly, there is an RPC version of <code>MessageHandler</code>, <code>RpcHandler</code>. The method has to accept an additional parameter that is a reply function; this latter can be called at any time from the method, allowing it to perform some cleanup after answering if needed. In this case, it simply sends a <code>MessageResult</code> object back with <code>'Pong'</code> as value.</p>

<p>In <code>send_ping.py</code> you can now make a remote call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">answer</span> <span class="o">=</span> <span class="n">producer</span><span class="o">.</span><span class="n">rpc_ping</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">answer</span><span class="o">.</span><span class="n">body</span><span class="p">[</span><span class="s">&#39;content&#39;</span><span class="p">][</span><span class="s">&#39;type&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;success&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Answer: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span><span class="p">(</span><span class="n">answer</span><span class="o">.</span><span class="n">body</span><span class="p">[</span><span class="s">&#39;content&#39;</span><span class="p">][</span><span class="s">&#39;value&#39;</span><span class="p">])</span>
</span><span class='line'><span class="k">elif</span> <span class="n">answer</span><span class="o">.</span><span class="n">body</span><span class="p">[</span><span class="s">&#39;content&#39;</span><span class="p">][</span><span class="s">&#39;type&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;exception&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;An exception occoured! (</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span><span class="p">(</span><span class="n">answer</span><span class="o">.</span><span class="n">body</span><span class="p">[</span><span class="s">&#39;content&#39;</span><span class="p">][</span><span class="s">&#39;value&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first part is straightforward: you call the RPC just like a local function. What you get is always a <code>MessageResult</code> object or derived (<code>MessageResultError</code> or <code>MessageResultException</code>). Be warned that the API here is awkward, to be indulgent. I wrote it, but probably the good-coder-in-me (TM) was on holiday that time; <a href="https://github.com/lgiordani/postage/issues/1">I am going to fix it</a> in a short time.</p>

<p>Anyway, you have to check the answer to be sure that the call was successful; never, never, never trust RPC calls, network is in the middle and everything can happen (yes, even someone tripping over the network cable).</p>

<p>If the receiver is unreachable the producer waits some time and then tries the call again: by default it waits 30 seconds and tries again 4 times; after all that it returns a <code>MessageResultException</code> containing a <code>TimeoutError</code> exception. You can try it changing the decorator of <code>msg_rpc_ping()</code> to match <code>ping_other</code> (or whatever) instead of <code>ping</code>. After two minutes, you will get your exception. You can easily customize these values by setting the value of <code>GenericProducer.rpc_timeout</code> and <code>GenericProducer.max_retry</code>.</p>

<h4>Handlers unleashed</h4>

<p>Message handlers are powerful, but there is a couple of tricks more in Postage. The first one is <code>MessageHandlerFullBody</code> that you can use exactly like <code>MessageHandler</code>; the difference is that the decorated method does not receive the message content (the <code>content</code> key of the body) but the full body. You can leverage this to access the underlying message structure: this allows you to access the fingerprint included in the message, which contains precious information about the process that sent the message. Let&#8217;s show how it works; add a new handler to the receiver:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">PingReceiver</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">MessageProcessor</span><span class="p">):</span>
</span><span class='line'>    <span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span><span class='line'>    <span class="nd">@messaging.MessageHandlerFullBody</span><span class="p">(</span><span class="s">&#39;command&#39;</span><span class="p">,</span> <span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">msg_ping_full</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
</span><span class='line'>        <span class="n">fingerprint</span> <span class="o">=</span> <span class="n">body</span><span class="p">[</span><span class="s">&#39;fingerprint&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Got a ping from </span><span class="si">%s</span><span class="s"> running on </span><span class="si">%s</span><span class="s"> with pid </span><span class="si">%s</span><span class="s">&quot;</span>\
</span><span class='line'>              <span class="o">%</span><span class="p">(</span><span class="n">fingerprint</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">],</span> <span class="n">fingerprint</span><span class="p">[</span><span class="s">&#39;host&#39;</span><span class="p">],</span> <span class="n">fingerprint</span><span class="p">[</span><span class="s">&#39;pid&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we handle the <code>ping</code> command, just like the method <code>msg_ping()</code> does; indeed nothing stops you to write more than a handler for a given message, but remember that they are processed in random order. Obviously we need to give the decorated method a different name, otherwise the second one will redefine the first one. Being decorated with <code>MessageHandlerFullBody</code> the method receives the full body of the message and can access the fingerprint.</p>

<p>Executing it we get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ python receive_ping.py
</span><span class='line'>postage.messaging: global_vhost set to staging
</span><span class='line'>Got a ping from ping_sender running on yoda with pid 26812
</span><span class='line'>Got a ping!
</span></code></pre></td></tr></table></div></figure>


<p>As we expected both handlers have been activated by the incoming message, and, not surprisingly, they have been processed out of order.</p>

<p>The second trick handlers have in store for you is the Handler class. Instead of decorating a method you can define a class that inherits from <code>Handler</code> and decorate that; this class shall at least define a <code>call()</code> method without arguments (aside from <code>self</code>) that will be executed when the relative message arrives. This class can access <code>self.data</code>, which is the data passed by the decorator (either the message content or the full body), <code>self.reply_func</code> that defaults to <code>None</code> for non-RPC messages, and <code>self.processor</code> that is the underlying <code>MessageProcessor</code> object hosting the handler.</p>

<p>To show how it works let&#8217;s add another handler to the receiver:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">PingReceiver</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">MessageProcessor</span><span class="p">):</span>
</span><span class='line'>    <span class="p">[</span><span class="o">...</span><span class="p">]</span>
</span><span class='line'>    <span class="nd">@messaging.MessageHandler</span><span class="p">(</span><span class="s">&#39;command&#39;</span><span class="p">,</span> <span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">MsgPing</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">Handler</span><span class="p">):</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;Got a ping - processed by </span><span class="si">%s</span><span class="s"> hosted by </span><span class="si">%s</span><span class="s">&quot;</span>\
</span><span class='line'>                  <span class="o">%</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__class__</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">processor</span><span class="o">.</span><span class="n">__class__</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that the definition of a basic handler class is pretty simple. When executed this gives the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ python receive_ping.py
</span><span class='line'>postage.messaging: global_vhost set to staging
</span><span class='line'>Got a ping - processed by &lt;class &#39;__main__.MsgPing&#39;&gt;
</span><span class='line'>             hosted by &lt;class &#39;__main__.PingReceiver&#39;&gt;
</span><span class='line'>Got a ping from ping_sender running on yoda with pid 27596
</span><span class='line'>Got a ping!
</span></code></pre></td></tr></table></div></figure>


<p>Leveraging the full body access and the class handlers you can write advanced filters on incoming messages, and add interesting features like runtime configuration of your handlers or configuration through incoming messages.</p>

<h2>Full code</h2>

<p>This is the full code of the discussed examples.</p>

<figure class='code'><figcaption><span> (facilities.py)</span> <a href='http://lgiordani.github.io/downloads/code/postage/facilities.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">postage</span> <span class="kn">import</span> <span class="n">messaging</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PingExchange</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">Exchange</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;This is the exchange that receives ping messages.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;ping-exchange&quot;</span>
</span><span class='line'>    <span class="n">exchange_type</span> <span class="o">=</span> <span class="s">&quot;direct&quot;</span>
</span><span class='line'>    <span class="n">passive</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>    <span class="n">durable</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>    <span class="n">auto_delete</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PingProducer</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">GenericProducer</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># Send messages to this exchange with this routing key</span>
</span><span class='line'>    <span class="n">eks</span> <span class="o">=</span> <span class="p">[(</span><span class="n">PingExchange</span><span class="p">,</span> <span class="s">&#39;ping_rk&#39;</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Send a &#39;ping&#39; command</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">build_message_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">messaging</span><span class="o">.</span><span class="n">MessageCommand</span><span class="p">(</span><span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Send a &#39;timed_ping&#39; command</span>
</span><span class='line'>    <span class="c"># Parameters: time</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">build_message_timed_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">messaging</span><span class="o">.</span><span class="n">MessageCommand</span><span class="p">(</span><span class="s">&#39;timed_ping&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">parameters</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;time&#39;</span><span class="p">:</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()})</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Send a &#39;custom_ping&#39; command</span>
</span><span class='line'>    <span class="c"># Parameters: custom_value</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">build_message_custom_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">custom_value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">messaging</span><span class="o">.</span><span class="n">MessageCommand</span><span class="p">(</span><span class="s">&#39;custom_ping&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="n">parameters</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;custom_value&#39;</span><span class="p">:</span><span class="n">custom_value</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Send a &#39;ping&#39; RPC command</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">build_rpc_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">messaging</span><span class="o">.</span><span class="n">RpcCommand</span><span class="p">(</span><span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (send_ping.py)</span> <a href='http://lgiordani.github.io/downloads/code/postage/send_ping.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">postage</span> <span class="kn">import</span> <span class="n">messaging</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">facilities</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Build the fingerprint of this application</span>
</span><span class='line'><span class="n">fingerprint</span> <span class="o">=</span> <span class="n">messaging</span><span class="o">.</span><span class="n">Fingerprint</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;ping_sender&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Instance the ping producer</span>
</span><span class='line'><span class="n">producer</span> <span class="o">=</span> <span class="n">facilities</span><span class="o">.</span><span class="n">PingProducer</span><span class="p">(</span><span class="n">fingerprint</span><span class="o">.</span><span class="n">as_dict</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Send a &#39;ping&#39; command</span>
</span><span class='line'><span class="n">producer</span><span class="o">.</span><span class="n">message_ping</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Send a &#39;timed_ping&#39; command</span>
</span><span class='line'><span class="n">producer</span><span class="o">.</span><span class="n">message_timed_ping</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Send a &#39;custom_ping&#39; command</span>
</span><span class='line'><span class="n">producer</span><span class="o">.</span><span class="n">message_custom_ping</span><span class="p">((</span><span class="s">&quot;Just ping me&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Send a &#39;ping&#39; RPC call</span>
</span><span class='line'><span class="n">answer</span> <span class="o">=</span> <span class="n">producer</span><span class="o">.</span><span class="n">rpc_ping</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="n">answer</span><span class="o">.</span><span class="n">body</span><span class="p">[</span><span class="s">&#39;content&#39;</span><span class="p">][</span><span class="s">&#39;type&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;success&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Answer: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span><span class="p">(</span><span class="n">answer</span><span class="o">.</span><span class="n">body</span><span class="p">[</span><span class="s">&#39;content&#39;</span><span class="p">][</span><span class="s">&#39;value&#39;</span><span class="p">])</span>
</span><span class='line'><span class="k">elif</span> <span class="n">answer</span><span class="o">.</span><span class="n">body</span><span class="p">[</span><span class="s">&#39;content&#39;</span><span class="p">][</span><span class="s">&#39;type&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;exception&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;An exception occoured! (</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span><span class="p">(</span><span class="n">answer</span><span class="o">.</span><span class="n">body</span><span class="p">[</span><span class="s">&#39;content&#39;</span><span class="p">][</span><span class="s">&#39;value&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span> (receive_ping.py)</span> <a href='http://lgiordani.github.io/downloads/code/postage/receive_ping.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">postage</span> <span class="kn">import</span> <span class="n">messaging</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">postage</span> <span class="kn">import</span> <span class="n">microthreads</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">facilities</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Build the fingerprint of this application</span>
</span><span class='line'><span class="n">fingerprint</span> <span class="o">=</span> <span class="n">messaging</span><span class="o">.</span><span class="n">Fingerprint</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;ping_receiver&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PingReceiver</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">MessageProcessor</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># Process an incoming &#39;ping&#39; command</span>
</span><span class='line'>    <span class="nd">@messaging.MessageHandler</span><span class="p">(</span><span class="s">&#39;command&#39;</span><span class="p">,</span> <span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">msg_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Got a ping!&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Process an incoming &#39;timed_ping&#39; command</span>
</span><span class='line'>    <span class="nd">@messaging.MessageHandler</span><span class="p">(</span><span class="s">&#39;command&#39;</span><span class="p">,</span> <span class="s">&#39;timed_ping&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">msg_timed_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Got a timed ping! Time is </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="s">&#39;parameters&#39;</span><span class="p">][</span><span class="s">&#39;time&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Process an incoming &#39;custom_ping&#39; command</span>
</span><span class='line'>    <span class="nd">@messaging.MessageHandler</span><span class="p">(</span><span class="s">&#39;command&#39;</span><span class="p">,</span> <span class="s">&#39;custom_ping&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">msg_custom_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Got a custom ping! The custom value is </span><span class="si">%s</span><span class="s">&quot;</span>\
</span><span class='line'>      <span class="o">%</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="s">&#39;parameters&#39;</span><span class="p">][</span><span class="s">&#39;custom_value&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Process an incoming &#39;ping&#39; RPC command</span>
</span><span class='line'>    <span class="nd">@messaging.RpcHandler</span><span class="p">(</span><span class="s">&#39;command&#39;</span><span class="p">,</span> <span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">msg_rpc_ping</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">reply_func</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Got a ping! Answering...&quot;</span>
</span><span class='line'>        <span class="n">reply_func</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">MessageResult</span><span class="p">(</span><span class="s">&#39;Pong&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Process the full body of an incoming &#39;ping&#39; command</span>
</span><span class='line'>    <span class="nd">@messaging.MessageHandlerFullBody</span><span class="p">(</span><span class="s">&#39;command&#39;</span><span class="p">,</span> <span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">msg_ping_full</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
</span><span class='line'>        <span class="n">fingerprint</span> <span class="o">=</span> <span class="n">body</span><span class="p">[</span><span class="s">&#39;fingerprint&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Got a ping from </span><span class="si">%s</span><span class="s"> running on </span><span class="si">%s</span><span class="s"> with pid </span><span class="si">%s</span><span class="s">&quot;</span>\
</span><span class='line'>      <span class="o">%</span><span class="p">(</span><span class="n">fingerprint</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">],</span> <span class="n">fingerprint</span><span class="p">[</span><span class="s">&#39;host&#39;</span><span class="p">],</span> <span class="n">fingerprint</span><span class="p">[</span><span class="s">&#39;pid&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Process an incoming &#39;ping&#39; command with a class handler</span>
</span><span class='line'>    <span class="nd">@messaging.MessageHandler</span><span class="p">(</span><span class="s">&#39;command&#39;</span><span class="p">,</span> <span class="s">&#39;ping&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">MsgPing</span><span class="p">(</span><span class="n">messaging</span><span class="o">.</span><span class="n">Handler</span><span class="p">):</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;Got a ping - processed by </span><span class="si">%s</span><span class="s"> hosted by </span><span class="si">%s</span><span class="s">&quot;</span>\
</span><span class='line'>      <span class="o">%</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__class__</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">processor</span><span class="o">.</span><span class="n">__class__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Exchange/Queue/Key</span>
</span><span class='line'><span class="n">eqks</span> <span class="o">=</span> <span class="p">[(</span><span class="n">facilities</span><span class="o">.</span><span class="n">PingExchange</span><span class="p">,</span> <span class="p">[(</span><span class="s">&#39;ping_queue&#39;</span><span class="p">,</span> <span class="s">&#39;ping_rk&#39;</span><span class="p">)])]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Instance the receiver</span>
</span><span class='line'><span class="n">receiver</span> <span class="o">=</span> <span class="n">PingReceiver</span><span class="p">(</span><span class="n">fingerprint</span><span class="o">.</span><span class="n">as_dict</span><span class="p">(),</span> <span class="n">eqks</span><span class="p">,</span>
</span><span class='line'>          <span class="bp">None</span><span class="p">,</span> <span class="n">messaging</span><span class="o">.</span><span class="n">global_vhost</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Instance the scheduler and run the receiver</span>
</span><span class='line'><span class="n">scheduler</span> <span class="o">=</span> <span class="n">microthreads</span><span class="o">.</span><span class="n">MicroScheduler</span><span class="p">()</span>
</span><span class='line'><span class="n">scheduler</span><span class="o">.</span><span class="n">add_microthread</span><span class="p">(</span><span class="n">receiver</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">scheduler</span><span class="o">.</span><span class="n">main</span><span class="p">():</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Postage aims to make it simple to write components in Python to fully exploit the power of RabbitMQ. It is highly customizable, and its handler mechanism keeps the code compact.</p>

<p>Even if the API is already in its third implementation, you can see that it is still not perfect so stay tuned for upcoming versions. Feel free to fork the project, to submit issues or pull request, or to contact me for any question.</p>

<p>Oh, did I remember to tell you to never trust RPC calls? =)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[libqgit2: a Qt wrapper for libgit2]]></title>
    <link href="http://lgiordani.github.io/blog/2013/07/18/libqgit2-a-qt-wrapper-for-libgit2/"/>
    <updated>2013-07-18T10:51:00+02:00</updated>
    <id>http://lgiordani.github.io/blog/2013/07/18/libqgit2-a-qt-wrapper-for-libgit2</id>
    <content type="html"><![CDATA[<p><a href="http://libgit2.github.com/">Libgit2</a> is &#8220;a portable, pure C implementation of the Git core methods&#8221; started in 2008 by Shawn O. Pearce. It is successfully used in both commercial an open source projects and wrapped in many languages (among the others Ruby, C#, Python). In 2011 Laszlo Papp from KDE started the libqgit2 project, aiming to port libgit2 features to C++/Qt. Sadly, lately the development slowed down a little and the library could not compile against the latest libgit2.</p>

<p>Being interested in using libgit2 in Qt/KDE projects, I am trying to restart the development.
I managed to update the library to libgit2 0.19.0 (latest version), and you can find the <a href="https://github.com/lgiordani/libqgit2">code on GitHub</a>. Feel free to fork it and work on it, but remember that this is just an unofficial repository.</p>

<p>Official repository is hosted by <a href="https://projects.kde.org/projects/playground/libs/libqgit2/repository/">KDE Projects</a> and I&#8217;m managing to update it too.</p>

<p>At the moment, the library just wraps the main libgit2 objects and functions (git &#8220;plumbing&#8221;).
Feel free to join me if you are interested; I&#8217;m not a Git guru, neither a Qt one, so any help is greatly appreciated.</p>

<p>Stay tuned for updates!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Lord of the Rings: an Erlang epic]]></title>
    <link href="http://lgiordani.github.io/blog/2013/06/20/the-lord-of-the-rings-an-erlang-epic/"/>
    <updated>2013-06-20T17:49:00+02:00</updated>
    <id>http://lgiordani.github.io/blog/2013/06/20/the-lord-of-the-rings-an-erlang-epic</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p>One of the first really challenging problems an Erlang novice must face is the classical process ring, which can be found around the Internet and most notably in &#8220;Erlang Programming&#8221; by Cesarini and Thompson (page 115).</p>

<p>Its formulation may vary, but the core of it requires the programmer to design and implement a closed ring of processes, to make them pass a given number of messages each other and then terminate gracefully.</p>

<p>I try here to give an in-depth analysis of the matter, to point out some of the most interesting issues of this exercise. I strongly suggest the Erlang novice to try and solve the exercise before looking at the solutions proposed here.</p>

<!--more-->


<h2>Linking processes</h2>

<p>The aim of the exercise is to build a chain of processes that exchange messages. This latter specification is important since we are required to connect our processes with the only purpose of sending messages and we know that, in Erlang, a process may send a message to another process simply by knowing its pid.</p>

<p>Actual linking between processes, in Erlang, has the aim of making them exchange <em>exit signals</em>; links are thus a mean to control the way the system collapses (or not) when a process crashes. The processes in the ring will thus be linked to ensure that when one of them exits all other processes will be terminated, but this has nothing to do with the ring itself.</p>

<p>The point is to let a process know how to send a message to the next one, forming a chain. This chain, then, is closed, i.e. the last process sends messages to the first one.</p>

<p>There are two main strategies that can be leveraged to get the ring build and behave in a correct way: the <strong>master process</strong> approach and the <strong>recursive</strong> one. For each of the two, I am going to present and analyze the following steps: a ring of processes with <strong>no message</strong> exchange, a ring with <strong>a single message</strong> travelling through it, a ring with <strong>multiple messages</strong> and a ring that exposes a <strong>functional interface</strong> to send messages.</p>

<h2>Debugging</h2>

<p>Debugging concurrent applications is everything but simple. For this exercise, it is however enough to get simple information about which process is forwarding which message. To allow a simple removal of debug prints a very small macro has been included in the file <code>debug.hrl</code>, activated by the definition of <code>debug</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">ifdef</span><span class="p">(</span><span class="n">debug</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">DEBUG</span><span class="p">(</span><span class="nv">Format</span><span class="p">,</span> <span class="nv">Args</span><span class="p">),</span>
</span><span class='line'>        <span class="nn">io</span><span class="p">:</span><span class="nf">format</span><span class="p">(</span><span class="s">&quot;</span><span class="si">~p</span><span class="s">: &quot;</span> <span class="o">++</span> <span class="nv">Format</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">()]</span> <span class="o">++</span> <span class="nv">Args</span><span class="p">)).</span>
</span><span class='line'><span class="p">-</span><span class="ni">else</span><span class="p">.</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">DEBUG</span><span class="p">(</span><span class="nv">Format</span><span class="p">,</span> <span class="nv">Args</span><span class="p">),</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">endif</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This converts the line</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;A message</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[]).</span>
</span></code></pre></td></tr></table></div></figure>


<p>to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;0.44.0&gt;: A message
</span></code></pre></td></tr></table></div></figure>


<p>where <code>&lt;0.44.0&gt;</code> is the pid of the message calling <code>?DEBUG</code> (only if <code>-define(debug, true).</code> is in the file).</p>

<h2>The “master process” solution</h2>

<p>A good way to face the problem of building the ring is to spawn a <em>master process</em>, which will then spawn all other processes. This solution keeps the creation phase simple since everything happens between the master process and the process that is currently being spawned.</p>

<p>A small caveat: the creation of the ring must be performed <strong>backwards</strong>. When the master process spawns another process the only other process it knows is the process spawned in the previous loop. This means that the master process spawns a process that connects backwards to it, then spawns a process that connects backward to the second one, and so on.</p>

<h4>Building the ring</h4>

<figure class='code'><figcaption><span> (ring_master_no_messages.erl)</span> <a href='http://lgiordani.github.io/downloads/code/erlang-rings/ring_master_no_messages.erl'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes without message passing</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_master_no_messages</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">debug</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">create</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program uses the first process as a</span>
</span><span class='line'><span class="c">%% master that spawns all other processes. It links to each process it spawns,</span>
</span><span class='line'><span class="c">%% but processes are not linked each other.</span>
</span><span class='line'><span class="c">%% Processes send no messages.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process. There is no need to register the process.</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span> <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/1 needs to be defined so that the first process can call</span>
</span><span class='line'><span class="c">%% create/2 passing its pid through self().</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="n">self</span><span class="p">()).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/2 manages the single process creation; in this version the</span>
</span><span class='line'><span class="c">%% master process just spawns each process and links to it. The exit clause</span>
</span><span class='line'><span class="c">%% is when the proceses counter reaches 1 (that is, we completed the ring).</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">);</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Prev</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="p">[</span><span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Prev</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Prev</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% In this version function loop/1 sits down and does nothing.</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the first spawn cannot directly call <code>create/2</code> passing <code>self()</code> since at that moment <code>self()</code> is the pid of the calling process (e.g. the Erlang shell) and not the pid of the first process of the ring, which is what we want. So we have to bypass this by spawning a process which executes <code>create/1</code>, which in turn calls <code>create/2</code> with the pid the process extracted with <code>self()</code>.</p>

<p>This first program spawns a set of processes that sit down and do nothing. Since they are all linked together (through the link with the master process), you can terminate the whole set by sending an exit signal to one of them. You can get the list of pid and names through the shell function <code>i()</code>. Otherwise, you can get and use the pid returned by the function <code>start/1</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">i</span><span class="p">().</span>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nb">exit</span><span class="p">(</span><span class="n">pid</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">boom</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Sending a single message</h4>

<p>Now I am going to develop further the solution by making a single message travel the whole ring.</p>

<p>The code undergoes the following modifications:</p>

<ul>
<li>function <code>start()</code> must accept the message and pass it to <code>create()</code>.</li>
<li>function <code>create()</code> must accept the message</li>
<li>when the ring is ready the master process has to send the message to the second process; then it terminates</li>
<li>each node just forwards the incoming message and terminates</li>
</ul>


<figure class='code'><figcaption><span> (ring_master_single_message.erl)</span> <a href='http://lgiordani.github.io/downloads/code/erlang-rings/ring_master_single_message.erl'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes with a single</span>
</span><span class='line'><span class="c">%%%              message traveling once through the ring.</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_master_single_message</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">debug</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">create</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program uses the first process as a</span>
</span><span class='line'><span class="c">%% master that spawns all other processes. It links to each process it spawns,</span>
</span><span class='line'><span class="c">%% but processes are not linked each other.</span>
</span><span class='line'><span class="c">%% The first process then injects a single message in the ring, sending it to</span>
</span><span class='line'><span class="c">%% the second process.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process. There is no need to register the process.</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span> <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/2 needs to be defined so that the first process can call</span>
</span><span class='line'><span class="c">%% create/3 passing its pid through self().</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="n">self</span><span class="p">(),</span> <span class="nv">Message</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/3 manages the single process creation; in this version the</span>
</span><span class='line'><span class="c">%% master process spawns each process and links to it. Then each process starts</span>
</span><span class='line'><span class="c">%% a loop. When the ring is completed the first process injects the message and</span>
</span><span class='line'><span class="c">%% terminates.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> injects message </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Message</span><span class="p">]),</span>
</span><span class='line'>    <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Message</span><span class="p">;</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Prev</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="p">[</span><span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Prev</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Prev</span><span class="p">,</span> <span class="nv">Message</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Now loop/1 blocks each process making it wait for a message to pass along.</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Msg</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ok</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Beware that a subtle mechanism conceals here: in Erlang, you can always send a message to a pid, even if it the relative process does not exist; in this latter case the message is simply discarded. This feature allows us to make the first process send the message and terminate without having the last process crash by sending a message to it. Remember that you cannot do this with registered processes alias, only with pids.</p>

<h4>Sending multiple messages</h4>

<p>The exercise requests that a message can travel more than once through the whole ring. Adding this possibility is pretty straightforward: it simply requires to add a parameter to <code>start()</code> and <code>create()</code> and to change the loop clauses.</p>

<p>Function <code>loop/1</code> now becomes <code>loop/2</code> and has the following clauses:</p>

<ul>
<li>when the number of remaining travels is 1 the process forwards the message and then terminates.</li>
<li>when the number of remaining travels is more than 1 the process loops again with a decremented value of travels.</li>
</ul>


<figure class='code'><figcaption><span> (ring_master_multiple_messages.erl)</span> <a href='http://lgiordani.github.io/downloads/code/erlang-rings/ring_master_multiple_messages.erl'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes with a single</span>
</span><span class='line'><span class="c">%%%              message traveling multiple times through the ring.</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_master_multiple_messages</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">debug</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">3</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">create</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program uses the first process as a</span>
</span><span class='line'><span class="c">%% master that spawns all other processes. It links to each process it spawns,</span>
</span><span class='line'><span class="c">%% but processes are not linked each other.</span>
</span><span class='line'><span class="c">%% The first process then injects a message in the ring, sending it to the</span>
</span><span class='line'><span class="c">%% second process and when getting the message from the last process, it</span>
</span><span class='line'><span class="c">%% injects it again in the ring a given number of times.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process. There is no need to register the process.</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span> <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/3 needs to be defined so that the first process can call</span>
</span><span class='line'><span class="c">%% create/4 passing its pid through self().</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="n">self</span><span class="p">(),</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/4 manages the single process creation; in this version the</span>
</span><span class='line'><span class="c">%% master process spawns each process and links to it. Then each process starts</span>
</span><span class='line'><span class="c">%% a loop. When the ring is completed the first process injects the message and</span>
</span><span class='line'><span class="c">%% starts looping.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> injects message </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Message</span><span class="p">]),</span>
</span><span class='line'>    <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Message</span><span class="p">,</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Prev</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="p">[</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Prev</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Prev</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p</span><span class="s"> and terminating</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[</span><span class="nv">Msg</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ok</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p</span><span class="s"> (still </span><span class="si">~p</span><span class="s"> time(s))</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[</span><span class="nv">Msg</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>As before, we are here relying on the possibility of sending a message to a non existent process.</p>

<h4>Exposing a functional interface</h4>

<p>An Erlang best practice is to expose a functional interface to the user that hides the underlying message passing. We are going to convert our ring program to expose the following functions:</p>

<ul>
<li><code>start/1</code> - starts a ring with the given number of processes</li>
<li><code>stop/0</code> - terminates all processes in the ring</li>
<li><code>send_message/1</code> - sends a message that travels once through the ring</li>
<li><code>send_message/2</code> - sends a message that travels the given number of times through the ring</li>
</ul>


<p>To expose a functional interface you need to register one or more processes, to get a global access point for your functions, so the first change to the code is that the spawned process is registered. Note that <code>Message</code> and <code>NumberProcesses</code> are no more passed to the <code>create()</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nb">register</span><span class="p">(</span><span class="n">ring_master_functional</span><span class="p">,</span> <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span> <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">])),</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is not enough. We have to be sure that the whole ring is ready before giving control back to the user issuing <code>start()</code>. Until now the message was sent by the master process just after the creation of the last ring process, so there was no need to synchronize the return of the start function with the spawned processes. Now we need it, so just after registering the master process we wait for a ready message coming from the ring. To allow the ring to send the message to the initial caller we have to pass <code>self()</code> to <code>create()</code>. Pay attention that <code>self()</code> passed to the spawned process is the pid of the external process (e.g. the Erlang shell) while <code>self()</code> passed to <code>create()</code> is the pid of the master ring process.</p>

<figure class='code'><figcaption><span> (ring_master_functional.erl)</span> <a href='http://lgiordani.github.io/downloads/code/erlang-rings/ring_master_functional.erl'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes that exposes a</span>
</span><span class='line'><span class="c">%%%              functional interface to send messages.</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_master_functional</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="c">%%-define(debug, true).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">stop</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">send_message</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">send_message</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program uses the first process as a</span>
</span><span class='line'><span class="c">%% master that spawns all other processes. It links to each process it spawns,</span>
</span><span class='line'><span class="c">%% but processes are not linked each other.</span>
</span><span class='line'><span class="c">%% The module exposes a functional interface to send messages in the ring</span>
</span><span class='line'><span class="c">%% and to terminate it.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process. The process is registered to allow the</span>
</span><span class='line'><span class="c">%% functional interface to work with it.</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">register</span><span class="p">(</span><span class="n">ring_master_functional</span><span class="p">,</span> <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span>
</span><span class='line'>                                           <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="n">self</span><span class="p">()])),</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="n">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">ok</span>
</span><span class='line'>    <span class="k">after</span> <span class="mi">5000</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">timeout</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Functional interface: terminate the ring</span>
</span><span class='line'><span class="nf">stop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">ring_master_functional</span> <span class="o">!</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">stop</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Functional interface: send a message that travels through the ring once</span>
</span><span class='line'><span class="nf">send_message</span><span class="p">(</span><span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">send_message</span><span class="p">(</span><span class="nv">Message</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Functional interface: send a message that travels through the ring</span>
</span><span class='line'><span class="c">%% Times times</span>
</span><span class='line'><span class="nf">send_message</span><span class="p">(</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">ring_master_functional</span> <span class="o">!</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span><span class="p">]}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/2 needs to be defined so that the first process can call</span>
</span><span class='line'><span class="c">%% create/3 passing its pid through self(). The Starter process is passed to</span>
</span><span class='line'><span class="c">%% allow the ring to send a ready message.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Starter</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="n">self</span><span class="p">(),</span> <span class="nv">Starter</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/3 manages the single process creation; in this version the</span>
</span><span class='line'><span class="c">%% master process spawns each process and links to it. Then each process starts</span>
</span><span class='line'><span class="c">%% a loop. When the ring is completed the first process injects the message and</span>
</span><span class='line'><span class="c">%% terminates.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Starter</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="nv">Starter</span> <span class="o">!</span> <span class="n">ready</span><span class="p">,</span>
</span><span class='line'>    <span class="n">loop_master</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">);</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Starter</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Prev</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="p">[</span><span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Prev</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Prev</span><span class="p">,</span> <span class="nv">Starter</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function loop_master/1 rules the behaviour of the master process (the first</span>
</span><span class='line'><span class="c">%% of the whole ring). When it receives a stop command it forwards it and</span>
</span><span class='line'><span class="c">%% terminates. When it receives a message command if Times is 0 the message is</span>
</span><span class='line'><span class="c">%% thrown away, otherwise is is injected again in the ring with a decremented</span>
</span><span class='line'><span class="c">%% Times value.</span>
</span><span class='line'><span class="nf">loop_master</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">=</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">stop</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>        <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[_</span><span class="nv">Message</span><span class="p">,</span> <span class="mi">0</span><span class="p">]}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">loop_master</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">);</span>
</span><span class='line'>        <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span><span class="p">]}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p</span><span class="s"> (still </span><span class="si">~p</span><span class="s"> time(s)</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Times</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]},</span>
</span><span class='line'>            <span class="n">loop_master</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function loop/1 rules the behaviour of the standard processes.</span>
</span><span class='line'><span class="c">%% When a process receives a stop command it forwards it and</span>
</span><span class='line'><span class="c">%% terminates. When it receives a message command it just forwards it.</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">=</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">stop</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">=</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[_</span><span class="nv">Message</span><span class="p">,</span> <span class="p">_]}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[_</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The exposed functions are very simple. As you can see they use two different messages: <code>{command, stop}</code> and <code>{command, message, [Message, Times]}</code>. One of the advantages of exposing a functional API is that you are free to format your messages according to the current status of the software and change the format if it does no more suit the application needs.</p>

<p>The <code>loop()</code> function has been splitted in two different functions now: <code>loop/1</code> rules the behaviour of the standard ring process, while <code>loop_master/1</code> rules the behaviour of the master process.</p>

<p>The standard process has to react to a stop command, forwarding it and terminating, and to a message command, simply forwarding it. The master process has to check an incoming message to decide if it shall be injected again in the ring.</p>

<h2>A recursive solution</h2>

<p>The simplest way to make a process know the pid of another process is to let the first spawn the second, and this gives us a hint about another way the process ring can be built. Like many things in Erlang, this can be solved recursively by saying:</p>

<p>In a process do:</p>

<ul>
<li>spawn another process and store its pid, call recursively on the spawned process</li>
<li>if you are the last process just connect to the first</li>
</ul>


<p>This solution has the advantage of being very straightforward for an Erlang programmer since it implements the standard recursion pattern. However, it forces the programmer to deal most of the time with the last node, which is a little counterintuitive.</p>

<p>The following programs are the recursive version of the four presented in the previous section. Once grasped the two main differences, building the ring forwards instead of backwards and dealing with the last node instead of the first, the two solutions present pretty much the same evolution steps.</p>

<p>The recursive ring construction.</p>

<figure class='code'><figcaption><span> (ring_recursion_no_messages.erl)</span> <a href='http://lgiordani.github.io/downloads/code/erlang-rings/ring_recursion_no_messages.erl'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes without message passing</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_recursion_no_messages</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">debug</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program starts the processes in a</span>
</span><span class='line'><span class="c">%% recursive way. Each process spawns the next one and links to it.</span>
</span><span class='line'><span class="c">%% Processes send no messages.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Please remember that io:format() does not always respect processes order</span>
</span><span class='line'><span class="c">%% and that as a general rule printing on the standard output from concurrent</span>
</span><span class='line'><span class="c">%% jobs is not very useful. Here I do this just to show that processes have been</span>
</span><span class='line'><span class="c">%% spawned. Remember to define debug false if you create a ring of more than</span>
</span><span class='line'><span class="c">%% 30-40 processes.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process, registering it under the name</span>
</span><span class='line'><span class="c">%% &#39;ring_recursion_no_messages&#39;.</span>
</span><span class='line'><span class="c">%% Note that spawn() does never fail, but register may; if spawning the</span>
</span><span class='line'><span class="c">%% first process fails an exception is raised and the process calling</span>
</span><span class='line'><span class="c">%% start/1 is terminated.</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">register</span><span class="p">(</span><span class="n">ring_recursion_no_messages</span><span class="p">,</span> <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span>
</span><span class='line'>                                               <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">])).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/1 manages the single process creation; in this version the</span>
</span><span class='line'><span class="c">%% only thing a process shall do is to spawn another process. The exit clause</span>
</span><span class='line'><span class="c">%% is when the proceses counter reaches 1 (that is, the current process is the</span>
</span><span class='line'><span class="c">%% last one): the last process uses &#39;ring_recursion_no_messages&#39; as its next</span>
</span><span class='line'><span class="c">%% process, thus closing the ring.</span>
</span><span class='line'><span class="c">%% Here we use the only parameter(NumberProcesses) as the index for the current</span>
</span><span class='line'><span class="c">%% process, so we end when the parameter is 1. If we want to think of it as the</span>
</span><span class='line'><span class="c">%% number of REMAINING processes the only changes are that the exit clause is</span>
</span><span class='line'><span class="c">%% create(0) instead of create(1), and that the first process is spawned in</span>
</span><span class='line'><span class="c">%% start/1 with [NumberProcesses - 1] as argument. It is only a matter of taste.</span>
</span><span class='line'><span class="c">%% Since all processes in the ring are meant to work together we are linking</span>
</span><span class='line'><span class="c">%% them together to ensure that if one fails all others are terminated.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> (last)</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nb">whereis</span><span class="p">(</span><span class="n">ring_recursion_no_messages</span><span class="p">)]),</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="n">ring_recursion_no_messages</span><span class="p">);</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Next</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span> <span class="p">[</span><span class="nv">NumberProcesses</span> <span class="o">-</span>  <span class="mi">1</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> </span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Next</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">Next</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% In this version function loop/1 sits down and does nothing.</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>The recursive ring with a single message travelling.</p>

<figure class='code'><figcaption><span> (ring_recursion_single_message.erl)</span> <a href='http://lgiordani.github.io/downloads/code/erlang-rings/ring_recursion_single_message.erl'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes with a single</span>
</span><span class='line'><span class="c">%%%              message traveling once through the ring.</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_recursion_single_message</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">debug</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program starts the processes in a</span>
</span><span class='line'><span class="c">%% recursive way. Each process spawns the next one and links to it.</span>
</span><span class='line'><span class="c">%% The last process then injects a single message in the ring, sending it to the</span>
</span><span class='line'><span class="c">%% first process.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process passing the requested message to it</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">register</span><span class="p">(</span><span class="n">ring_recursion_single_message</span><span class="p">,</span> <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span>
</span><span class='line'>                                                  <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">])).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/2 manages the single process creation; in this version each</span>
</span><span class='line'><span class="c">%% process just spawns another process, except the last one, which shall inject</span>
</span><span class='line'><span class="c">%% the message in the ring and terminate.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> (last)</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nb">whereis</span><span class="p">(</span><span class="n">ring_recursion_single_message</span><span class="p">)]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> injects message </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Message</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">ring_recursion_single_message</span> <span class="o">!</span> <span class="nv">Message</span><span class="p">;</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Next</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span> <span class="p">[</span><span class="nv">NumberProcesses</span> <span class="o">-</span>  <span class="mi">1</span><span class="p">,</span> <span class="nv">Message</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> </span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Next</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">Next</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Now loop/1 blocks each process making it wait for a message to pass along.</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Msg</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ok</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The recursive ring with support for multiple message travels.</p>

<figure class='code'><figcaption><span> (ring_recursion_multiple_messages.erl)</span> <a href='http://lgiordani.github.io/downloads/code/erlang-rings/ring_recursion_multiple_messages.erl'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes with a single</span>
</span><span class='line'><span class="c">%%%              message traveling multiple times through the ring.</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_recursion_multiple_messages</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">debug</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">3</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program starts the processes in a</span>
</span><span class='line'><span class="c">%% recursive way. Each process spawns the next one and links to it.</span>
</span><span class='line'><span class="c">%% The last process then injects a message in the ring, sending it to the</span>
</span><span class='line'><span class="c">%% first process and when getting the message from the second to last, it</span>
</span><span class='line'><span class="c">%% injects it again in the ring a given number of times.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process passing it the requested message and the number</span>
</span><span class='line'><span class="c">%% of times the message shall travel through the ring.</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">register</span><span class="p">(</span><span class="n">ring_recursion_multiple_messages</span><span class="p">,</span> <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span>
</span><span class='line'>                          <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">])).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/3 manages the single process creation; in this version each</span>
</span><span class='line'><span class="c">%% process spawns another process and then loops, except the last one, which</span>
</span><span class='line'><span class="c">%% shall inject the message in the ring before looping. Since the last process</span>
</span><span class='line'><span class="c">%% starts the message passing it loops an already decremented number of times.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> (last)</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nb">whereis</span><span class="p">(</span><span class="n">ring_recursion_multiple_messages</span><span class="p">)]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> injects message </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Message</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">ring_recursion_multiple_messages</span> <span class="o">!</span> <span class="nv">Message</span><span class="p">,</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="n">ring_recursion_multiple_messages</span><span class="p">,</span> <span class="nv">NumberMessages</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Next</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span>
</span><span class='line'>                      <span class="p">[</span><span class="nv">NumberProcesses</span> <span class="o">-</span>  <span class="mi">1</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> </span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Next</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">Next</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function loop/2 needs two clauses now. The first one is the exit condition,</span>
</span><span class='line'><span class="c">%% when the forward counter reaches 1: the process forwards the message and</span>
</span><span class='line'><span class="c">%% terminates. The second clause is the standard behaviour: the process forwards</span>
</span><span class='line'><span class="c">%% the incoming message and loops again with a decremented counter.</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p</span><span class="s"> and terminating</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[</span><span class="nv">Msg</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ok</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p</span><span class="s"> (still </span><span class="si">~p</span><span class="s"> time(s))</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[</span><span class="nv">Msg</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The recursive ring exposing the functional API.</p>

<figure class='code'><figcaption><span> (ring_recursion_functional.erl)</span> <a href='http://lgiordani.github.io/downloads/code/erlang-rings/ring_recursion_functional.erl'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes that exposes a</span>
</span><span class='line'><span class="c">%%%              functional interface to send messages.</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_recursion_functional</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">debug</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">stop</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">send_message</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">send_message</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program starts the processes in a</span>
</span><span class='line'><span class="c">%% recursive way. Each process spawns the next one and links to it.</span>
</span><span class='line'><span class="c">%% The module exposes a functional interface to send messages in the ring</span>
</span><span class='line'><span class="c">%% and to terminate it.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process. The process is registered as in the previous</span>
</span><span class='line'><span class="c">%% recursive versions to allow the last process to connect with the first.</span>
</span><span class='line'><span class="c">%% Moreover, exposing a functional interface needs a global entry point, that is</span>
</span><span class='line'><span class="c">%% the name of the first process.</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">register</span><span class="p">(</span><span class="n">ring_recursion_functional</span><span class="p">,</span> <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span>
</span><span class='line'>                                              <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="n">self</span><span class="p">()])),</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="n">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">ok</span>
</span><span class='line'>    <span class="k">after</span> <span class="mi">5000</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">timeout</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Functional interface: terminate the ring</span>
</span><span class='line'><span class="nf">stop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">ring_master_functional</span> <span class="o">!</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">stop</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Functional interface: send a message that travels through the ring once</span>
</span><span class='line'><span class="nf">send_message</span><span class="p">(</span><span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">send_message</span><span class="p">(</span><span class="nv">Message</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Functional interface: send a message that travels through the ring</span>
</span><span class='line'><span class="c">%% Times times</span>
</span><span class='line'><span class="nf">send_message</span><span class="p">(</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">ring_recursion_functional</span> <span class="o">!</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span><span class="p">]}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/2 manages the single process creation; in this version each</span>
</span><span class='line'><span class="c">%% process just spawns another process, except the last one, which connects with</span>
</span><span class='line'><span class="c">%% the first one. The Starter process is passed to allow the ring to send a</span>
</span><span class='line'><span class="c">%% ready message.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Starter</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> (last)</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nb">whereis</span><span class="p">(</span><span class="n">ring_recursion_functional</span><span class="p">)]),</span>
</span><span class='line'>    <span class="nv">Starter</span> <span class="o">!</span> <span class="n">ready</span><span class="p">,</span>
</span><span class='line'>    <span class="n">loop_last</span><span class="p">(</span><span class="n">ring_recursion_functional</span><span class="p">);</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Starter</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Next</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span> <span class="p">[</span><span class="nv">NumberProcesses</span> <span class="o">-</span>  <span class="mi">1</span><span class="p">,</span> <span class="nv">Starter</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> </span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Next</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">Next</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function loop_last/1 rules the behaviour of the last process of the whole</span>
</span><span class='line'><span class="c">%% ring). When it receives a stop command it just terminates since the message</span>
</span><span class='line'><span class="c">%% has already been received by all processes in the ring. When it receives a</span>
</span><span class='line'><span class="c">%% message command if Times is 1 the message is thrown away (it just travelled</span>
</span><span class='line'><span class="c">%% through the ring for the last time), otherwise is is injected again in the</span>
</span><span class='line'><span class="c">%% ring with a decremented Times value.</span>
</span><span class='line'><span class="nf">loop_last</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">stop</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>        <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[_</span><span class="nv">Message</span><span class="p">,</span> <span class="mi">1</span><span class="p">]}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">loop_last</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">);</span>
</span><span class='line'>        <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span><span class="p">]}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p</span><span class="s"> (still </span><span class="si">~p</span><span class="s"> time(s)</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Times</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]},</span>
</span><span class='line'>            <span class="n">loop_last</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function loop/1 rules the behaviour of the standard processes.</span>
</span><span class='line'><span class="c">%% When a process receives a stop command it forwards it and</span>
</span><span class='line'><span class="c">%% terminates. When it receives a message command it just forwards it.</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">=</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">stop</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">=</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[_</span><span class="nv">Message</span><span class="p">,</span> <span class="p">_]}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[_</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusions</h2>

<p>The process ring is an exercise that can be solved in many ways (I just presented the two more straightforward ones) but makes the programmer face problems that may later rise in real-world applications. For this reason, it is an invaluable sandbox where the Erlang programmer can try different approaches to solve both the concurrency and the topology problems.</p>

<p>Keep in touch for other Erlang articles on <a href="http://lgiordani.github.io/blog/categories/erlang/">this page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error handling in Erlang - a primer]]></title>
    <link href="http://lgiordani.github.io/blog/2013/05/30/error-handling-in-erlang-a-primer/"/>
    <updated>2013-05-30T11:41:00+02:00</updated>
    <id>http://lgiordani.github.io/blog/2013/05/30/error-handling-in-erlang-a-primer</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p>This article aims to summarize Erlang error handling both in sequential and in concurrent environments. The targets of this article are novices that, like me, make their first steps into the beautiful world of Erlang. Moreover, I always find that trying to explain things makes me understand them better.</p>

<p>Disclaimer (for Erlang gurus): I&#8217;m a complete Erlang novice so please be indulgent with me while you read my thoughts. Corrections and suggestions are welcome!</p>

<!--more-->


<h2>Introduction</h2>

<p>Recently I started studying Erlang; coming from a pure imperative background (C, C++, and Python) I have to say that Erlang has been a surprise and a joy. I did not find something so innovative since long, even if the pure functional part of the language was not totally new since it is available in Python too.</p>

<p>The concept of runtime <em>system</em>, with a support for concurrency built in the language itself, the pattern matching idea and the recursion as a way to implement loops are all very intriguing, so learning them is fun (pun intended, if you do not get it review Erlang anonymous functions).</p>

<p>One of the innovative concepts that ploughed through my imperative mind was that of <em>defensive programming</em> under its formulation in the Erlang tenet &#8220;Let it crash&#8221;. This was something new, partly because I rarely found advice on system organization while learning the foundations of a programming language and partly because about 80% of the code I write has the task of avoiding programs to crash.</p>

<p>I found <a href="http://mazenharake.wordpress.com/2009/09/14/let-it-crash-the-right-way/">this very interesting post</a> of Mazen Harake on the subject. Basically, he clarifies that the Erlang philosophy is not that of just let errors happen and propagate: the point is that the programmer should deal only with errors that are <em>documented</em>. This means that the code specification includes that error as a possibility. Well, it is not my intention to state something already well explained: go and read Mazen&#8217;s post.</p>

<p>Anyway, before discussing the Erlang way of dealing with code errors, it is necessary to firmly grasp syntax and structures that the language provides.</p>

<h2>Exceptions in Erlang</h2>

<p>The simplest way to make something go wrong when dealing with a computer is to treat it like a sentient being. Joking apart, a good way to crash a program is to execute a division by zero.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">.</span>
</span><span class='line'><span class="o">**</span> <span class="n">exception</span> <span class="nn">error</span><span class="p">:</span> <span class="n">bad</span> <span class="n">argument</span> <span class="n">in</span> <span class="n">an</span> <span class="n">arithmetic</span> <span class="n">expression</span>
</span><span class='line'>     <span class="n">in</span> <span class="n">operator</span>  <span class="n">&#39;/&#39;</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>        <span class="n">called</span> <span class="n">as</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see Erlang does not get mad at your provocation and simply <strong>raises and exception</strong>, i.e. signals that something went wrong, giving some details about why and where it happened. This is not different from what other languages, like Python, do.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span><span class="o">/</span><span class="mi">0</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">ZeroDivisionError</span><span class="p">:</span> <span class="n">integer</span> <span class="n">division</span> <span class="ow">or</span> <span class="n">modulo</span> <span class="n">by</span> <span class="n">zero</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So exceptions are in Erlang, as in other languages, a &#8220;reserved channel&#8221; the language uses to propagate errors. If you code in C, you cannot leverage something like exceptions and must rely on return values. This means that you have to format the results of your functions so that they can host a wrong result too and end up returning an <code>int</code> with the error code while functions results are managed by reference.</p>

<p>Back to Erlang. Exceptions crash you program, i.e. they make your program immediately stop, reporting the error to the system process that executed it (usually the OS GUI or a textual shell). Indeed the Erlang shell crashed when you tried to reach for the infinity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">self</span><span class="p">().</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">32</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="mi">1</span><span class="o">/</span><span class="mi">0</span><span class="p">.</span>
</span><span class='line'><span class="o">**</span> <span class="n">exception</span> <span class="nn">error</span><span class="p">:</span> <span class="n">bad</span> <span class="n">argument</span> <span class="n">in</span> <span class="n">an</span> <span class="n">arithmetic</span> <span class="n">expression</span>
</span><span class='line'>     <span class="n">in</span> <span class="n">operator</span>  <span class="n">&#39;/&#39;</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>        <span class="n">called</span> <span class="n">as</span> <span class="mi">1</span> <span class="o">/</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="n">self</span><span class="p">().</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">35</span><span class="p">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember that in Erlang <code>self()</code> gives you the Erlang PID of the process (not the operating system&#8217;s one). As you can see the Eshell process crashed and was restarted by some magic behind the scenes.</p>

<p>I hear you mumble that, well, world is not perfect, and errors happen. So how do we deal with this? Shall we crash every time something wrong occurs in our code or is there some way to unravel the knot and happily continue running the code?</p>

<p>This seems to be a question that even Erlang creators wanted to answer, and their answer was: you can, but you shouldn&#8217;t always. By now, let us drop the &#8220;you shouldn&#8217;t always&#8221; part and learn the basics; you can stop an exception before it crashes your pretty program. Before diving into stopping exceptions techniques, let me review the types of exception you may encounter.</p>

<h2>Exception types</h2>

<p>There are three types (or classes) of exceptions in Erlang: <em>throw</em>, <em>error</em>, and <em>exit</em>.</p>

<p>The first, throw, identifies an exception that a called function voluntarily raises (throwing it at you); such exceptions shall be documented, i.e. the documentation of the function you are calling shall state that this exception may be raised and specify under what conditions this may happen. &#8220;Shall&#8221; here means that if the programmer does not document the exception all sorts of curses will be casted on his or her code forever. As a Python programmer I strongly advice you to read &#8220;shall&#8221; as &#8220;must&#8221;.</p>

<p>The second exception type, error, signals that something very bad happened in the system, something that was unexpected to the author of the code raising the exception. Even if this type of exception can be raised explicitly, it is usually raised by the Erlang run-time system. If you recall the first example of this post, the division by zero, you can now understand why the shell printed &#8220;exception error&#8221;; that exception has not been raised by an instruction in the code of the Erlang shell, but from the run-time system itself. This type of exception also contains a stack trace, but I will not cover it in this article.</p>

<p>The third and last exception type, exit, means that your code is being told to stop immediately.</p>

<p>As you can see the real difference between the three types is the communication intent, not a special behaviour. So from the pure theoretical point of view an error exception can be replaced by a throw exception without any side effect. Obviously, the communication intent is not negligible: indeed, as explained before, throw exceptions are usually documented while errors are not intended for being formalized.</p>

<p>In addition to a class, exceptions encompass a <em>reason</em>, that is a valid Erlang item (an atom, an integer, a pid, &#8230;). The reason carries the explanation of the exception, i.e. a detailed insight in what really happened.</p>

<h2>Dealing with exceptions</h2>

<p>Now that we got acquainted with Erlang exception types we may step further into exception management structures and learn how to stop exceptions from crashing our programs. The way of managing exceptions raised by a function called in our code should be familiar to Python, C++, java and Ruby developers (and to many others, probably); the basic Erlang syntax is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="k">try</span> <span class="o">&lt;</span><span class="n">expressions</span><span class="o">&gt;</span> <span class="k">of</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">result_pattern_matching</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">catch</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">exception_pattern_matching</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">after</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">after_expressions</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The large part of this structure is well known. Here, <code>&lt;expressions&gt;</code> is a series of Erlang expressions, comma-separated as usual; the <code>&lt;result_pattern_matching&gt;</code> part is a classical Erlang pattern matching structure, just like that you write in a case construct; last, the <code>&lt;after_expressions&gt;</code> is a series of Erlang expressions. The <code>&lt;exception_pattern_matching&gt;</code> part has a slightly new syntax we will cover in a moment.</p>

<p>The structure works like in other languages: the <code>&lt;expressions&gt;</code> code is evaluated and the result is pattern matched against <code>&lt;result_pattern_matching&gt;</code> and the result is returned by the whole <code>try</code> statement. If an exception is raised when evaluating <code>&lt;expressions&gt;</code>, it is pattern matched against the code listed in <code>&lt;exception_pattern_matching&gt;</code> and the relative code is executed. Regardless of what happens in the try/catch part the code in <code>&lt;after_expressions&gt;</code> is executed, and its result is not returned.</p>

<p>The exception matching code has a syntax that is very similar to that of the usual pattern matching, but exceptions are listed in the new form <code>ExceptionType:Reason</code>, where type and reason have been already described in the previous section. When the exception is a run-time error the reason is one of the values listed <a href="http://erlang.org/doc/reference_manual/errors.html#exit_reasons">here</a>.</p>

<p>So the complete form of a try/catch statement in Erlang is the following, where <code>Expressions</code> is always a comma-separated list of Erlang expressions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="k">try</span> <span class="nv">Expression1</span><span class="p">,...,</span><span class="nv">ExpressionN</span> <span class="k">of</span>
</span><span class='line'>  <span class="nv">Pattern1</span> <span class="p">[</span><span class="k">when</span> <span class="nv">Guard1</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="nv">PatternExpressions1</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">Pattern2</span> <span class="p">[</span><span class="k">when</span> <span class="nv">Guard2</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="nv">PatternExpressions2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nv">PatternN</span> <span class="p">[</span><span class="k">when</span> <span class="nv">GuardN</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="nv">PatternExpressionN</span>
</span><span class='line'><span class="k">catch</span>
</span><span class='line'>  <span class="nv">ExceptionType</span><span class="p">:</span><span class="nv">Reason1</span> <span class="p">[</span><span class="k">when</span> <span class="nv">ExceptionGuard1</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="nv">ExceptionExpressions1</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">ExceptionType</span><span class="p">:</span><span class="nv">Reason2</span> <span class="p">[</span><span class="k">when</span> <span class="nv">ExceptionGuard2</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="nv">ExceptionExpressions2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nv">ExceptionType</span><span class="p">:</span><span class="nv">ReasonN</span> <span class="p">[</span><span class="k">when</span> <span class="nv">ExceptionGuardN</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="nv">ExceptionExpressionsN</span>
</span><span class='line'><span class="k">after</span>
</span><span class='line'>  <span class="nv">AfterExpressions</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Exceptions pattern matching allows the use of the do-not-care variable <code>_</code> not only for reasons but for also for types. So the following syntax catches all exceptions of type ExceptionType</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">catch</span>
</span><span class='line'>  <span class="nv">ExceptionType</span><span class="p">:</span> <span class="p">_</span> <span class="o">-&gt;</span> <span class="nv">ExceptionExpressions1</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>while the following catches all exceptions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="k">catch</span>
</span><span class='line'>  <span class="p">_:_</span> <span class="o">-&gt;</span> <span class="nv">ExceptionExpressions1</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I will not cover here the old-style error handling mechanism with <code>catch</code>; the interested reader can find it documented <a href="http://erlang.org/doc/reference_manual/expressions.html#id79206">here</a>.</p>

<h2>Returning values from try/catch statements</h2>

<p>Try/catch statements return the value of the last expression executed, that is one of <code>PatternExpression1</code>,&#8230;,<code>PatternExpressionN</code> if no exception is raised, or one of <code>ExceptionExpressions1</code>,&#8230;,<code>ExceptionExpressionsN</code>. This means that we can assign the value of the whole expression to a variable</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nv">Result</span> <span class="o">=</span> <span class="k">try</span> <span class="nv">Expression</span> <span class="k">of</span> <span class="p">...</span> <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember that <code>AfterExpressions</code> are always executed, but their final value is not returned by the statement.</p>

<p>Since a lot of times you want to return the result of the expression after the <code>try</code> keyword, you can omit the <code>of</code> part</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="k">try</span> <span class="nv">Expressions</span>
</span><span class='line'><span class="k">catch</span>
</span><span class='line'> <span class="p">...</span>
</span><span class='line'><span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Raising exceptions</h2>

<p>Erlang provides three different BIFs to raise exceptions, profitably called like the exception type they raise: <code>throw/1</code>, <code>erlang:error/1</code>, and <code>exit/1</code>. As you see, <code>error/1</code> is not automatically imported by the system and must be called in its full form. This is a hint for us programmers: <code>error/1</code> is there and can be used, but it is not something you should need often; otherwise, you misunderstood what an error exception is in Erlang.</p>

<p>So in most cases, if your code encounters an error condition and you need to raise an exception, you end up using <code>throw/1</code> or <code>exit/1</code>. The argument of these functions is the reason of the exception: remember that you can format the reason you attach to your exception to match your needs, you only need to document it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">my_function</span><span class="p">(</span><span class="nv">Somebadvalue</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">throw</span><span class="p">({</span><span class="n">badvalue</span><span class="p">,</span> <span class="nv">Somebadvalue</span><span class="p">}).</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pay attention, however, that exceptions are a double-edged sword; the fact that they return values through a reserved channel is powerful, but can lead to subtle bugs and to long debug sessions. The advice in Erlang is to spare throw() for some special cases and to try always to communicate the failure through standard function results. This is, however, part of a coding philosophy that cannot be examined in depth here.</p>

<h2>Exceptions and exit signals</h2>

<p>Erlang is a run-time system, not just a language; as such, it has built-in structures and concepts that are usually provided by libraries in other languages. One of these concepts is the dependency between processes, which may be realized through <em>links</em> (and <em>monitors</em>, but I am not going to introduce them in this article). Process linking in Erlang means a very simple thing: when two processes are linked they die together, i.e. when one of the two terminates abnormally the other one is terminated too. A process can link to more than one other process, and the dying behaviour is propagated among all them.</p>

<p>What is the point of this structure? In Erlang, you are encouraged to spawn processes to accomplish tasks, even the simplest ones. Thus, you can easily end up with a multitude of processes working together to perform some action, and if one of them crashes it is likely that others should exit too, being them dependent from it. This is not mandatory; it is all up to you to decide what processes have to be linked, but if they are they must die together.</p>

<p>How is this accomplished? Linked processes are connected by a hidden communication channel, which carries information about their termination with so-called <em>exit signals</em>. Exit signals are invisible to the programmer, and when a process receives one of them it simply terminates, spreading the news under the form of other exit signals.</p>

<h4>Process termination and reasons</h4>

<p>Exit signals are always sent when a process dies, but they carry a reason for its termination, just like exceptions. This reason is very important for the subsequent events concerning processes linked to the dying one.</p>

<p>First of all let us look at process termination. A process in Erlang can terminate normally or abnormally: the former happens when it has no more code to execute or when it raises an exception passing as reason the atom <code>normal</code>; the latter occurs when a raised exception has a reason different from the atom <code>normal</code>.</p>

<p>So an exit signal process contains either the atom <code>normal</code> or another reason, and it travels from the terminating process to each linked process. When it hits one of them, if the reason is not <code>normal</code> the process is terminated and sends its own exit signals to its linked processes with the same reason of the incoming one. The result is that the entire network of linked processes terminates automatically.</p>

<p>The best way to terminate a process with a reason is to execute the BIF <code>exit(Reason)</code>. This BIF has also the form of arity 2 where you pass the pid of a process <code>exit(Pid, Reason)</code>: the addressed process will get an exit signal with the given reason. A caveat: when using <code>exit/1</code> the exit signal will contain the pid of the terminating process, when using <code>exit/2</code> the exit signal will contain the pid of the target process.</p>

<h4>Stopping exit signals</h4>

<p>Having a way to stop an entire group of processes when one of them crashes is a big benefit, but it could be a good thing to be able to stop the propagation somewhere. Obviously, if processes are not linked they do not influence each other when terminating, but this also means that no one notices that a process terminated, which in turn means that no one will be restarting it.</p>

<p>The whole point of linking processes is indeed the control over terminating processes. If a process runs there is a reason and if it crashes the system should investigate why it crashed and possibly restart it.</p>

<p>Erlang gives a process the chance to receive an abnormal exit signal from a process it is linked to, without forcing it to terminate: in Erlang speech this is called <em>trapping exit signals</em> or <em>trapping exits</em>. When a process traps exits the incoming exit signals coming from linked processes are converted by the run-time system into messages that the process can fetch with a <code>receive</code> construct. Thus, a process trapping exits can be notified that a linked process died without being affected by this.</p>

<p>A process can start trapping exits by executing the BIF <code>process_flag(trap_exit, true)</code>. It is a best practice to call it at the beginning of the process and to avoid turning it off during the execution since it makes the system difficult to debug.</p>

<p>Once the BIF has been executed, an exit signal with the reason <code>Reason</code> coming from another process is converted in an incoming message under the form <code>{'EXIT', Pid, Reason}</code>, where Pid is the pid of the terminated process.</p>

<h4>Unstoppable exit signals</h4>

<p>Now we can convert a process so that it does not terminate with its linked processes. This has a downside: if the process contains errors such as infinite loops or if for some reason we need to stop the entire system, the processes that trap exits cannot be stopped. For this reason, Erlang provides the special atom <code>kill</code> as a reason for an exit signal.</p>

<p>An exit signal containing the reason <code>kill</code> cannot be trapped; thus the exit signal is unstoppable. Unconditionally terminating the entire network is however something dangerous, so when a process terminates because of an incoming <code>kill</code> exit signal it will send to its linked processes a <code>killed</code> exit signal, which can be possibly trapped.</p>

<h2>Conclusions</h2>

<p>The aim of the article was to give an overview of error handling in Erlang: not everything has been covered, but a novice should find here almost everything he or she needs to step into this part of the language.</p>

<p>There is obviously much more than this in the Erlang treasure chest. If the whole link and exit signals stuff thrilled you like it did with me, I promise you that OTP behavious (sorry, behaviors) will take your breath away.</p>

<p>Keep in touch for other Erlang articles on <a href="http://lgiordani.github.io/blog/categories/erlang/">this page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrent programming - 6]]></title>
    <link href="http://lgiordani.github.io/blog/2013/04/23/concurrent-programming-6/"/>
    <updated>2013-04-23T08:29:00+02:00</updated>
    <id>http://lgiordani.github.io/blog/2013/04/23/concurrent-programming-6</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p>Issue 5 of this series ended with a small program where two processes exchanged ten numbers through a message queue, thus being a synchronized producer-consumer couple. This time I am going to show and comment the code of a very simple communication simulator written in C. The code leverages IPC queues to allow multiple processes to talk each other while running concurrently.</p>

<!--more-->


<h2>The simulator</h2>

<p>The program simulates a messaging switch, where multiple users (child processes) connect to a central switch (parent process) and send text messages (SMS-like) to other users through it. The switch receives messages and route them if the recipient is reachable (process is running). Moreover, the switch can perform a timing operation on a user, checking how much time the user needs to answer a message, or select it for termination. Last, the switch counts how many times a user sends a message to an unreachable user and when a threshold is reached terminates it. Switch and user decisions are taken extracting pseudo-random numbers and comparing them with thresholds given on the command line. Remember that the simulation wants to demonstrate a concrete use of message queues and does not claim to be a complete communication system between processes.</p>

<h2>10,000 feet overview</h2>

<p>I splitted the simulator in 3 parts, namely two stacked layers of function and the main application code. The first layer implements the message structure, provides functions to interact with it (getters and setters), exports basic functions to manage queues and to send and receive messages. The second layer exports functions that implement the protocol, i.e. the actions users and switch can perform. Last, the main function contains the actual logic of the whole simulation. Due to the instructional purpose of the simulation some of the solution implemented are far from optimal or even correct (e.g. random numbers management); I suggest you to try to evolve the simulation, adding new services or messages between users.</p>

<h2>Debugging nightmares</h2>

<p>Be ready to spend some time debugging your multiprocessing applications! If you ever debugged some code, you know that the most friendly bugs are by far those which are reproducible: you only need to add some debugging output or step through the code with the debugger and the bug is spotted. Multiprocessing and network application are at the very opposite corner: most of the time the bugs in that sort of applications are very difficult to reproduce, when not impossible. The concurrent execution of multiple processes, indeed, makes every execution unique, since the actual execution sequence is random (random means that it is the result of so many factors that the result is unpredictable and thus irreproducible). Network programs suffers from the same problems (concurrent execution), worsened by network lags that add a factor of randomness.</p>

<h2>Code and analysis</h2>

<p>I am not going to include the whole code of the layers directly in the post text as they are a straightforward implementation of what was presented in the previous articles; the code of the main application is, on the contrary, analyzed block by block. The links to the source files are at the end of the article, together with compilation instructions.</p>

<h2>Layer 1</h2>

<h4>Message structure</h4>

<p>The structure of the message is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">sender</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">recipient</span><span class="p">;</span>
</span><span class='line'> <span class="kt">char</span> <span class="n">text</span><span class="p">[</span><span class="mi">160</span><span class="p">];</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">service</span><span class="p">;</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">service_data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">message_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="kt">long</span> <span class="n">mtype</span><span class="p">;</span>
</span><span class='line'> <span class="n">message_t</span> <span class="n">mtext</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">messagebuf_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, <code>sender</code> and <code>recipient</code> are numbers that identify the switch and the users (0 is the switch, then users are numbered increasingly when they connect to the switch); <code>text</code> is the content of a message a user sends to another user, and is 160 characters long to mimic SMS behaviour. Last <code>service</code> is the identifier of some system operation, like a request the switch sends to the users; <code>service_data</code> carries the optional data the service needs to communicate. Actual services are implemented in layer 2 and I am going to describe them later.</p>

<h4>Other functions</h4>

<p>Layer 1 exposes many functions: some are simple set and get functions to deal with the message structure while five simplify access to IPC structures; <code>build_key()</code> makes an IPC key from a given character, <code>create_queue()</code> and <code>remove_queue()</code> manage IPC queues and last <code>send_message()</code> and <code>receive_message()</code> give a simple way to route messages.</p>

<p>A very simple error management code has been introduced here: C language does not allow to use exceptions, so errors have to be managed by functions or returned through the <code>return</code> statement. A solid error management in C is outside the scope of this article, so here you will find the bare minimum.</p>

<p>The error management of <code>receive_message()</code> needs a little explanation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">receive_message</span><span class="p">(</span><span class="kt">int</span> <span class="n">qid</span><span class="p">,</span> <span class="kt">long</span> <span class="n">type</span><span class="p">,</span> <span class="n">messagebuf_t</span> <span class="o">*</span><span class="n">qbuf</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span><span class="p">,</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>  <span class="n">length</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">messagebuf_t</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">((</span><span class="n">result</span> <span class="o">=</span> <span class="n">msgrcv</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">msgbuf</span> <span class="o">*</span><span class="p">)</span><span class="n">qbuf</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">type</span><span class="p">,</span> <span class="n">IPC_NOWAIT</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">ENOMSG</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;msgrcv&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, <code>msgrcv()</code> fails even when there are no messages of the given type, producing a <code>ENOMSG</code> error. This is the reason why that case has been ignored through the <code>if(errno == ENOMSG)</code> construct.</p>

<h2>Layer 2</h2>

<h4>The protocol</h4>

<p>Layer2 implements the actual communication protocol between the switch and the users. Users send text messages to other users, and those messages are routed by the switch. Users and switch can also send service messages; those are messages encompassing information used to manage the system.</p>

<p>Every user, when spawned, initializes a queue, connects to the switch and communicates the queue id. Since the queues can contain old unread messages, it is necessary to empty them before the use. Each user enters a loop where it sleeps a while, receives service messages, sends messages and last receives text messages. At the same time, the switch collects queue ids, routes text messages from the sender to the recipient and sometimes sends a service request to a user.</p>

<p>The services the switch can request from users are to terminate and to test the answering time. Both can be requested on a probability base, but the first is also forced when the user sends too many messages to unreachable recipients.</p>

<p>The answering time test is performed in a simple way: the switch requests the service and records the time of the request. The user answers with a message that contains the time at which it received the request and the switch computes the difference between the two. Pay attention that both the timing service and the random number extraction used to request services on a probability base are not exact; the code works but is good only for a demonstration system.</p>

<p>I defined some useful constants in the header file: <code>MAX_SLEEP</code> is the maximum number of seconds a user waits before performing an action while <code>TYPE_SERVICE</code> and <code>TYPE_TEXT</code> identify the type of message. The defines which name starts with <code>SERVICE_</code> list all the possible services: <code>SERVICE_TERMINATE</code> forces a user to quit; <code>SERVICE_TIME</code> makes it perform a timing operation; <code>SERVICE_CONNECT</code> and <code>SERVICE_DISCONNECT</code> tell the switch a new user has connected or disconnected; <code>SERVICE_QID</code> bears the identifier of the user queue to the switch; <code>SERVICE_UNREACHABLE_DESTINATION</code> communicates a user that the recipient of a message is no more online.</p>

<h4>Queues</h4>

<p>Two functions are dedicated to queues, <code>init_queue()</code> and <code>close_queue()</code>. The first builds an IPC key from a given number (previously converting it to a char) and runs the <code>create_queue()</code> function from layer 1. Because of the char conversion the range of integers it can accept is 0-255, and for simplicity&#8217;s sake there is no check in the whole code that a queue key has not yet been assigned. For this example, I am simply leveraging that different numbers return different keys and, thus, queues.</p>

<p>The second function closes the queue running the <code>remove_queue()</code> function from layer 1. The underlying system calls are not used directly to allow the future introduction of checks on the assigned queues.</p>

<h4>User functions</h4>

<p>Users have five functions that implement their part of the protocol. Two functions communicate to the switch that the user connected or disconnected, namely <code>user_send_connect()</code> and <code>user_send_disconnect()</code>; both carry the <code>sender</code> id and the switch id <code>sw</code>, which however in the main program is always 0. The <code>user_send_qid()</code> function communicates to the switch the queue id of the user; <code>user_send_text_message()</code> sends a string of text to another user and <code>user_send_time()</code> answers the timing service.</p>

<h4>Switch functions</h4>

<p>The switch can execute <code>switch_send_text_message()</code> to deliver a text message sent by a user; <code>switch_send_terminate()</code> to ask a user to terminate; <code>switch_send_time()</code> to ask a user to perform a timing service.</p>

<h4>Code analysis</h4>

<p>Now I will briefly review the whole application code to better explain the different parts of the system. Please remember that this is a demonstration system so many choices have been made for simplicity&#8217;s sake.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/ipc.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/msg.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;wait.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;layer1.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;layer2.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MINCHILDS 1</span>
</span><span class='line'><span class="cp">#define MAXCHILDS 15</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MAXFAILS 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the list of includes, you will find three defines that rule the number of child processes the system can spawn and the maximum number of messages a user can send to unreachable recipients before the switch asks it to terminate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">random_number</span><span class="p">(</span><span class="kt">int</span> <span class="n">max</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">r</span><span class="p">,</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>  <span class="n">r</span> <span class="o">=</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span> <span class="n">random</span><span class="p">();</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">r</span> <span class="o">*</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span> <span class="n">max</span> <span class="o">/</span> <span class="n">RAND_MAX</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">usage</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Telephone switch simulator</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s &lt;number of users&gt; &lt;service probability&gt; &lt;text message probability&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;     &lt;number of users&gt; - Number of users alive in the system (%d - %d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">MINCHILDS</span><span class="p">,</span> <span class="n">MAXCHILDS</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;     &lt;service probability&gt; - The probability that the switch requires a service from the user (0-100)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;     &lt;text message probability&gt; - The probability the a user sends a message to another user (0-100)</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>random_number()</code> function is used to extract a random number between 0 and a maximum <code>max</code>; <code>RAND_MAX</code> is a define of the standard library and represents the maximum number the <code>random()</code> function can return and in the GNU C library it is 2<sup>31</sup> (2147483647); here it is used to calculate a proportion with the maximum value given by the caller. The <code>usage()</code> function helps the user remembering the command line arguments; as you can see, the program receives 3 mandatory input values: the number of users that the switch can spawn; the probability that the switch requests a service to a user when this latter sends a message; the probability that a user sends a text message to another user.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">users_number</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">service_probability</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">text_message_probability</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">status</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">deadproc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* A counter of the already terminated user processes */</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">qid</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sw</span><span class="p">;</span> <span class="cm">/* Qid of the switch */</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">dest</span><span class="p">;</span> <span class="cm">/* Destination of the message */</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">olddest</span><span class="p">;</span> <span class="cm">/* Destination of the previous message */</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">queues</span><span class="p">[</span><span class="n">MAXCHILDS</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span> <span class="cm">/* Queue identifiers - 0 is the qid of the switch */</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">msg_sender</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">msg_recipient</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">msg_text</span><span class="p">[</span><span class="mi">160</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">msg_service</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">msg_service_data</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">t</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">timing</span><span class="p">[</span><span class="n">MAXCHILDS</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">unreachable_destinations</span><span class="p">[</span><span class="n">MAXCHILDS</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">padding</span> <span class="o">=</span> <span class="s">&quot;                                                                      &quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">text</span><span class="p">[</span><span class="mi">160</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">messagebuf_t</span> <span class="n">msg</span><span class="p">,</span> <span class="n">in</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Many of these variables are just helpers that simplify the code; <code>queues</code> holds the queue identifier of each process; <code>timing</code> holds the information about user timing service results; <code>unreachable_destinations</code> contains how many times each user sent a message to an unreachable recipient; <code>dest</code> and <code>olddest</code> are used to avoid a user to send a message to the recipient of the previous one.  The <code>padding</code> variable is a quick and dirty way to create two columns, the left one filled by switch messages and the right one by user ones.</p>

<p>Remember that in C you have to declare variables at the beginning of the program while in C++ you can declare them anywhere. This means that child processes, a copy of the parent, carry in memory some variables such as <code>queues</code> and <code>timings</code> that are used only by the switch. This is both a waste of resources and a dangerous situation, so remember that in general statically allocated variables are not a good choice for concurrent programs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="cm">/* Command line argument parsing */</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">){</span>
</span><span class='line'>    <span class="n">usage</span><span class="p">(</span><span class="n">argv</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">users_number</span> <span class="o">=</span> <span class="n">strtol</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="n">service_probability</span> <span class="o">=</span> <span class="n">strtol</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="n">text_message_probability</span> <span class="o">=</span> <span class="n">strtol</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">((</span><span class="n">users_number</span> <span class="o">&lt;</span> <span class="n">MINCHILDS</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">users_number</span> <span class="o">&gt;</span> <span class="n">MAXCHILDS</span><span class="p">)){</span>
</span><span class='line'>    <span class="n">usage</span><span class="p">(</span><span class="n">argv</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">((</span><span class="n">service_probability</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">service_probability</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">)){</span>
</span><span class='line'>    <span class="n">usage</span><span class="p">(</span><span class="n">argv</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">((</span><span class="n">text_message_probability</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">text_message_probability</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">)){</span>
</span><span class='line'>    <span class="n">usage</span><span class="p">(</span><span class="n">argv</span><span class="p">);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Number of users: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">users_number</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Probability of a service request: %d%%</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">service_probability</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Probability of a text message: %d%%</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">text_message_probability</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Initialize the random number generator */</span>
</span><span class='line'>  <span class="n">srandom</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>All these lines contain initialization code and checks for the values passed on the command line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="cm">/* Switch queue initialization */</span>
</span><span class='line'>  <span class="n">sw</span> <span class="o">=</span> <span class="n">init_queue</span><span class="p">(</span><span class="mi">255</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Read the last messages we have in the queue */</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">receive_message</span><span class="p">(</span><span class="n">sw</span><span class="p">,</span> <span class="n">TYPE_TEXT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">)){</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d -- S -- Receiving old text messages</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Read the last messages we have in the queue */</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">receive_message</span><span class="p">(</span><span class="n">sw</span><span class="p">,</span> <span class="n">TYPE_SERVICE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">)){</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d -- S -- Receiving old service messge</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* All queues are &quot;uninitialized&quot; (set equal to switch queue) */</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">users_number</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">queues</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">sw</span><span class="p">;</span>
</span><span class='line'>    <span class="n">unreachable_destinations</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The switch initializes its queue; this has to be done before spawning users since the <code>sw</code> variable will be copied in each child process and used to communicate with the switch. The queue is initialized with the number 255 just to be sure that no child process initializes the same queue. As explained, IPC queues provide no mechanism to ensure uniqueness of the instanced queues, so we have to establish our own system; in this simple example we spawn a maximum of 15 users, so we could also use <code>16</code> or <code>MAXCHILDS+1</code> to initialize the switch queue. Since queues are shared structures and nothing prevents the system to assign to a process a previously used queue we must ensure that the queue is empty, so the switch reads and discards all text and service messages found in its queue. Last, the <code>queues</code> and <code>unreachable_destinations</code> arrays are initialized.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="cm">/* Create users */</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">users_number</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">srandom</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1000</span><span class="o">*</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Initialize queue  */</span>
</span><span class='line'>      <span class="n">qid</span> <span class="o">=</span> <span class="n">init_queue</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Read the last messages we have in the queue */</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">receive_message</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="n">TYPE_TEXT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">)){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s%d -- U %02d -- Receiving old text messages</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Read the last messages we have in the queue */</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">receive_message</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="n">TYPE_SERVICE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">)){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s%d -- U %02d -- Receiving old service messge</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Let the switch know we are alive */</span>
</span><span class='line'>      <span class="n">user_send_connect</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">sw</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Let the switch know how to reach us */</span>
</span><span class='line'>      <span class="n">user_send_qid</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">qid</span><span class="p">,</span> <span class="n">sw</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code spawns the users and from here the code splits in two, and the code of the user processes is inside the if construct. As you can see, the user acts like the switch at the very beginning, initializing its own queue and flushing the possible messages it contains. After this, the user sends the switch a message to communicate that it is alive and sends its qid to allow the user to communicate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="cm">/* Enter the main loop */</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>    <span class="n">sleep</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="n">MAX_SLEEP</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* Check if the switch requested a service */</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">receive_message</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="n">TYPE_SERVICE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">)){</span>
</span><span class='line'>    <span class="n">msg_service</span> <span class="o">=</span> <span class="n">get_service</span><span class="p">(</span><span class="o">&amp;</span><span class="n">in</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="n">msg_service</span><span class="p">){</span>
</span><span class='line'>  
</span><span class='line'>    <span class="k">case</span> <span class="n">SERVICE_TERMINATE</span>:
</span><span class='line'>      <span class="cm">/* Send an acknowledgement to the switch */</span>
</span><span class='line'>      <span class="n">user_send_disconnect</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">getpid</span><span class="p">(),</span> <span class="n">sw</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Read the last messages we have in the queue */</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">receive_message</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="n">TYPE_TEXT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">)){</span>
</span><span class='line'>        <span class="n">msg_sender</span> <span class="o">=</span> <span class="n">get_sender</span><span class="p">(</span><span class="o">&amp;</span><span class="n">in</span><span class="p">);</span>
</span><span class='line'>        <span class="n">get_text</span><span class="p">(</span><span class="o">&amp;</span><span class="n">in</span><span class="p">,</span> <span class="n">msg_text</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s%d -- U %02d -- Message received</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s                      Sender: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="p">,</span> <span class="n">msg_sender</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s                      Text: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="p">,</span> <span class="n">msg_text</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Remove the queue */</span>
</span><span class='line'>      <span class="n">close_queue</span><span class="p">(</span><span class="n">qid</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s%d -- U %02d -- Termination</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">SERVICE_TIME</span>:
</span><span class='line'>      <span class="n">user_send_time</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">sw</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s%d -- U %02d -- Timing</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The user loops infinitely and at each loop sleeps a random number of seconds. After that, it checks its message queue for service messages (<code>receive_message()</code> with the parameter <code>TYPE_SERVICE</code>); if the requested service is <code>SERVICE_TERMINATE</code>, an acknowledgement is sent to the switch (<code>user_send_disconnect()</code>) so that the user is marked as offline and no more messages are sent with it as recipient. The user then reads all remaining text messages in its queue and closes the queue. Last with <code>exit()</code>the user process terminates. If the requested service is <code>SERVICE_TIME</code>, the user simply sends the current time back to the switch through <code>user_send_time()</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="cm">/* Send a message */</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">random_number</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">text_message_probability</span><span class="p">){</span>
</span><span class='line'>    <span class="n">dest</span> <span class="o">=</span> <span class="n">random_number</span><span class="p">(</span><span class="n">users_number</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Do not send a message to the switch, to yourself and to the previous recipient */</span>
</span><span class='line'>    <span class="k">while</span><span class="p">((</span><span class="n">dest</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">dest</span> <span class="o">==</span> <span class="n">i</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">dest</span> <span class="o">==</span> <span class="n">olddest</span><span class="p">)){</span>
</span><span class='line'>      <span class="n">dest</span> <span class="o">=</span> <span class="n">random_number</span><span class="p">(</span><span class="n">users_number</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">olddest</span> <span class="o">=</span> <span class="n">dest</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s%d -- U %02d -- Message to user %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">i</span><span class="p">,</span> <span class="n">dest</span><span class="p">);</span>
</span><span class='line'>      <span class="n">sprintf</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="s">&quot;A message from me (%d) to you (%d)&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">dest</span><span class="p">);</span>
</span><span class='line'>    <span class="n">user_send_text_message</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">dest</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">sw</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Check the incoming box for simple messages */</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">receive_message</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="n">TYPE_TEXT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">)){</span>
</span><span class='line'>    <span class="n">msg_sender</span> <span class="o">=</span> <span class="n">get_sender</span><span class="p">(</span><span class="o">&amp;</span><span class="n">in</span><span class="p">);</span>
</span><span class='line'>    <span class="n">get_text</span><span class="p">(</span><span class="o">&amp;</span><span class="n">in</span><span class="p">,</span> <span class="n">msg_text</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s%d -- U %02d -- Message received</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s                      Sender: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="p">,</span> <span class="n">msg_sender</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s                      Text: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">padding</span><span class="p">,</span> <span class="n">msg_text</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The user extracts a random number and tests it against the probability given on the command line; if the test gives a positive result the user extracts a random user, avoiding the switch (<code>dest == 0</code>), itself (<code>dest == i</code>) and the recipient of the previous message it sent (<code>dest == olddest</code>). The new recipient is saved in <code>olddest</code>, and the message is sent through <code>user_send_text_message()</code>. This part ends the user code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="cm">/* Switch (parent process) */</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>    <span class="cm">/* Check if some user is answering to service messages */</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">receive_message</span><span class="p">(</span><span class="n">sw</span><span class="p">,</span> <span class="n">TYPE_SERVICE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">)){</span>
</span><span class='line'>      <span class="n">msg_service</span> <span class="o">=</span> <span class="n">get_service</span><span class="p">(</span><span class="o">&amp;</span><span class="n">in</span><span class="p">);</span>
</span><span class='line'>      <span class="n">msg_sender</span> <span class="o">=</span> <span class="n">get_sender</span><span class="p">(</span><span class="o">&amp;</span><span class="n">in</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">switch</span><span class="p">(</span><span class="n">msg_service</span><span class="p">){</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">SERVICE_CONNECT</span>:
</span><span class='line'>        <span class="cm">/* A new user has connected */</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d -- S -- Service: connection</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;                   User: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">msg_sender</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="n">SERVICE_DISCONNECT</span>:
</span><span class='line'>        <span class="cm">/* The user is terminating */</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d -- S -- Service: disconnection</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;                   User: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">msg_sender</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">deadproc</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="n">SERVICE_QID</span>:
</span><span class='line'>      <span class="cm">/* The user is sending us its queue id */</span>
</span><span class='line'>      <span class="n">msg_service_data</span> <span class="o">=</span> <span class="n">get_service_data</span><span class="p">(</span><span class="o">&amp;</span><span class="n">in</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d -- S -- Service: queue</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;                   User: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">msg_sender</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;                   Qid: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">msg_service_data</span><span class="p">);</span>
</span><span class='line'>      <span class="n">queues</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">]</span> <span class="o">=</span> <span class="n">msg_service_data</span><span class="p">;</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">case</span> <span class="n">SERVICE_TIME</span>:
</span><span class='line'>      <span class="n">msg_service_data</span> <span class="o">=</span> <span class="n">get_service_data</span><span class="p">(</span><span class="o">&amp;</span><span class="n">in</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Timing informations */</span>
</span><span class='line'>        <span class="n">timing</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">msg_service_data</span> <span class="o">-</span> <span class="n">timing</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d -- S -- Service: timing</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;                   User: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">msg_sender</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;                   Timing: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">timing</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* The user is no more blocked by a timing operation */</span>
</span><span class='line'>        <span class="n">timing</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The switch code has a structure similar to that of the user code. It loops infinitely with a <code>while(1)</code> statement, and inside this it checks for incoming messages and acts accordingly. The first thing it does is to check for service messages. If the service is <code>SERVICE_CONNECT</code> a user is communicating that it is alive, and the switch simply print out a log of this event; when a user disconnects it sends a <code>SERVICE_DISCONNECT</code> message and the switch increases the number of dead processes to monitor the number of active user processes; if the service is a <code>SERVICE_QID</code> a user is sending the switch its queue identifier and this is stored in the <code>queues</code> array; last, the <code>SERVICE_TIME</code> messages mean that a user is answering a timing request; its answer is compared with the recorded send time and the result is printed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="cm">/* Check if some user has connected */</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">receive_message</span><span class="p">(</span><span class="n">sw</span><span class="p">,</span> <span class="n">TYPE_TEXT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">)){</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">msg_recipient</span> <span class="o">=</span> <span class="n">get_recipient</span><span class="p">(</span><span class="o">&amp;</span><span class="n">in</span><span class="p">);</span>
</span><span class='line'>      <span class="n">msg_sender</span> <span class="o">=</span> <span class="n">get_sender</span><span class="p">(</span><span class="o">&amp;</span><span class="n">in</span><span class="p">);</span>
</span><span class='line'>      <span class="n">get_text</span><span class="p">(</span><span class="o">&amp;</span><span class="n">in</span><span class="p">,</span> <span class="n">msg_text</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* If the destination is connected */</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">queues</span><span class="p">[</span><span class="n">msg_recipient</span><span class="p">]</span> <span class="o">!=</span> <span class="n">sw</span><span class="p">){</span>
</span><span class='line'>      <span class="cm">/* Send the message (forward it) */</span>
</span><span class='line'>      <span class="n">switch_send_text_message</span><span class="p">(</span><span class="n">msg_sender</span><span class="p">,</span> <span class="n">msg_text</span><span class="p">,</span> <span class="n">queues</span><span class="p">[</span><span class="n">msg_recipient</span><span class="p">]);</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d -- S -- Routing message</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;                   Sender: %d -- Destination: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">msg_sender</span><span class="p">,</span> <span class="n">msg_recipient</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;                   Text: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">msg_text</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="n">unreachable_destinations</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">unreachable_destinations</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">MAXFAILS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d -- S -- Unreachable destination</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;                   Sender: %d -- Destination: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">msg_sender</span><span class="p">,</span> <span class="n">msg_recipient</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;                   Text: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">msg_text</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;                   Threshold: %d/%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">unreachable_destinations</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">],</span> <span class="n">MAXFAILS</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">unreachable_destinations</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">]</span> <span class="o">==</span> <span class="n">MAXFAILS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d -- S -- User %d reached max unreachable destinations</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">msg_sender</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">switch_send_terminate</span><span class="p">(</span><span class="n">queues</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>          <span class="cm">/* Remove its queue from the list */</span>
</span><span class='line'>          <span class="n">queues</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">]</span> <span class="o">=</span> <span class="n">sw</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, the switch checks the queue for incoming text messages users send to other users. If the recipient is connected (reachable) the message is routed through <code>switch_send_text_message()</code>; otherwise the counter of failed dispatches <code>unreachable_destinations</code> is incremented for that user; when the maximum number of failures <code>MAXFAILS</code> is reached the switch sends that user a termination request.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="cm">/* Randomly request a service to the sender of the last message */</span>
</span><span class='line'>  <span class="k">if</span><span class="p">((</span><span class="n">random_number</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>  <span class="o">&lt;</span> <span class="n">service_probability</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">queues</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">]</span> <span class="o">!=</span> <span class="n">sw</span><span class="p">)){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">random_number</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">40</span><span class="p">){</span>
</span><span class='line'>      <span class="cm">/* The user must terminate */</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d -- S -- User %d chosen for termination</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">msg_sender</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">switch_send_terminate</span><span class="p">(</span><span class="n">queues</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>      <span class="cm">/* Remove its queue from the list */</span>
</span><span class='line'>      <span class="n">queues</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">]</span> <span class="o">=</span> <span class="n">sw</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="cm">/* Check if we are already timing that user */</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">timing</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">][</span><span class="mi">0</span><span class="p">]){</span>
</span><span class='line'>        <span class="n">timing</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">timing</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d -- S -- User %d chosen for timing...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">timing</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">msg_sender</span><span class="p">);</span>
</span><span class='line'>        <span class="n">switch_send_time</span><span class="p">(</span><span class="n">queues</span><span class="p">[</span><span class="n">msg_sender</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each user that sends a message through the switch can be selected as the destination of a service request. Here, the switch tests a random number against the probability given on the command line, ensuring that the users is not already unreachable. The probability of a termination service is hardcoded (40%), the other case being the timing service; when this latter is requested, the switch sends a message to the user recording the dispatch time so that it can be later compared with the user answer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">deadproc</span> <span class="o">==</span> <span class="n">users_number</span><span class="p">){</span>
</span><span class='line'>    <span class="cm">/* All childs have been terminated, just wait for the last to complete its jobs */</span>
</span><span class='line'>    <span class="n">waitpid</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">status</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* Remove the switch queue */</span>
</span><span class='line'>  <span class="n">remove_queue</span><span class="p">(</span><span class="n">sw</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;No more active users. Switch turns off.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/* Terminate the program */</span>
</span><span class='line'>  <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When there are no incoming messages the switch checks if the number of dead processes is equal to the number of users; when this happens the switch waits for each child process (to avoid zombie processes), removes its queue and terminates.</p>

<h2>Files and compilation</h2>

<p>The 5 files of this small program can be downloaded here:</p>

<ul>
<li><a href="http://lgiordani.github.io/downloads/code/ipc_demo/layer1.h">layer1.h</a></li>
<li><a href="http://lgiordani.github.io/downloads/code/ipc_demo/layer1.c">layer1.c</a></li>
<li><a href="http://lgiordani.github.io/downloads/code/ipc_demo/layer2.h">layer2.h</a></li>
<li><a href="http://lgiordani.github.io/downloads/code/ipc_demo/layer2.c">layer2.c</a></li>
<li><a href="http://lgiordani.github.io/downloads/code/ipc_demo/main.c">main.c</a></li>
</ul>


<p>and can be compiled with the following command line</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc -o ipc_demo main.c layer1.c layer2.c
</span></code></pre></td></tr></table></div></figure>


<p>A typical execution can be obtained running the program with the following parameters</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./ipc_demo 8 30 80
</span></code></pre></td></tr></table></div></figure>


<p>Remember that the output lines of the processes are mixed and generally not in order; indeed, you can find the answer of a user printed before the switch request. Timestamps can help you find the right order, but the resolution of the <code>time()</code> function is a second, and in such a time span many messages can be sent.</p>

<h2>Conclusions</h2>

<p>This article ends by now this little series on concurrent programming in C and IPC structures. As you can see C is not the best language to implement concurrent programming concepts, due to its very low level nature. However, since many OSs are written in C (and/or C++) knowledge of the way this language can provide concurrent execution is useful.</p>

<p>There is much left to say about concurrent programming structures: atomicity, mutual exclusions, threads, monitors are just some of the most important. I will post new articles on such topics in the future, perhaps showing their implementation in other languages.</p>

<h2>Past articles</h2>

<p><a href="http://lgiordani.github.io/blog/2013/01/31/concurrent-programming-1">Concurrent Programming 1</a></p>

<p><a href="http://lgiordani.github.io/blog/2013/02/04/concurrent-programming-2">Concurrent Programming 2</a></p>

<p><a href="http://lgiordani.github.io/blog/2013/02/06/concurrent-programming-3">Concurrent Programming 3</a></p>

<p><a href="http://lgiordani.github.io/blog/2013/02/13/concurrent-programming-4">Concurrent Programming 4</a></p>

<p><a href="http://lgiordani.github.io/blog/2013/02/28/concurrent-programming-5">Concurrent Programming 5</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Generators - From Iterators to Cooperative Multitasking - 3]]></title>
    <link href="http://lgiordani.github.io/blog/2013/03/29/python-generators-from-iterators-to-cooperative-multitasking-3/"/>
    <updated>2013-03-29T13:25:00+01:00</updated>
    <id>http://lgiordani.github.io/blog/2013/03/29/python-generators-from-iterators-to-cooperative-multitasking-3</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>In this third issue we move on uncovering how generators can be the foundation of a cooperative multitasking system and show some code that implements it. Before we face this topic we will talk shortly about another interesting use of generators, namely generator expressions chains.</p>

<!--more-->


<h2>Chaining generator expressions</h2>

<p>At PyCon 2008 David M. Beazley, author of “Python Essential Reference”, made a very interesting speech about the use of generators in system administration, in other words where usually more or less complex bash scripts are involved and in particular where long pipe sequences are used.</p>

<p>David starts from the consideration that generators, producing one element at a time, are chainable, that is a generator expression can encompass another generator expression and so on. This way he shows how to write in a very compact and reusable way components that can act as “filters” on a data set, thus following the Unix philosophy of building tools that “do one thing and do it well”, chaining them afterwards to get the needed behaviour.</p>

<p>The slides of this presentation are freely downloadable, so I suggest the interested reader to take a look at it at the following address: <a href="http://www.dabeaz.com/generators-uk/">Generator Tricks for Systems Programmers</a>.</p>

<h2>Microthread: cooperative multitasking</h2>

<p><em>Disclaimer: the concepts and code presented here have been heavily influenced by the Kamaelia project. You can find it <a href="http://www.kamaelia.org">here</a>.</em></p>

<p>Let us move forward to see how (Python) generators allow us to easily build applications based on the concept of cooperative multitasking. I assume the reader is familiar with the concepts of preemption and thread-based multitasking and is aware of the pro and cons of such solutions.</p>

<p><strong>Cooperative multitasking</strong> allows an application to hold the control of the CPU for an arbitrary time lapse, waiting for it to voluntarily release the resource to the scheduler. This is a major break with the modern approach to multitasking, where the scheduler is in charge of stopping and resuming applications without any previous agreement with them.</p>

<p>Since application can now stop on their own initiative every issue related to shared data protection, atomicity and synchronization is greatly simplified if not removed. Applications need however a mechanism to stop running, save their internal state and later resume from the same point.</p>

<p>Generators, indeed, through the <code>yield</code> statement implement this very behaviour, thus they may be used to create a system based on cooperative multitasking, where processes are now called <strong>microthreads</strong> to highlight that they are a lightweight form of thread.</p>

<h4>Microthreads</h4>

<p>Let’s look at a simple implementation of such a system. First of all we need a <code>MicroThread</code> object, i.e. an object that can run simultaneously with other similar objects, but in a cooperative way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">MicroThread</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>          <span class="k">yield</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>An instance of this object exposes a <code>main()</code> method that, when called, returns a generator. This latter, at each call of its <code>next()</code> method simply returns <code>1</code>, freezing at the same time its execution just after the <code>yield</code> statement, still inside the infinite while loop.</p>

<p>The object can be directly tested</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; <span class="nv">mt</span> <span class="o">=</span> MicroThread<span class="o">()</span>
</span><span class='line'>&gt;&gt;&gt; <span class="nv">g</span> <span class="o">=</span> mt.main<span class="o">()</span>
</span><span class='line'>&gt;&gt;&gt; g
</span><span class='line'>&lt;generator object main at 0xb74331e4&gt;
</span><span class='line'>&gt;&gt;&gt; g.next<span class="o">()</span>
</span><span class='line'>1
</span></code></pre></td></tr></table></div></figure>


<p>To make the object more easily inheritable and extendable we can refactor it a little</p>

<figure class='code'><figcaption><span> (mthread.py)</span> <a href='http://lgiordani.github.io/downloads/code/python-generators/mthread.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">MicroThread</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">step</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">create</span><span class="p">()</span>
</span><span class='line'>        <span class="k">yield</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
</span><span class='line'>            <span class="k">yield</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Such changes let us inherit the class and extend it simply by overriding the <code>create()</code> and <code>step()</code> methods; the first is called as soon as <code>main()</code> is called, acting as a delayed initializer, while the second is executed at each call of <code>next()</code>, just before freezing the code with <code>yield</code>. Pay attention that since <code>create()</code> is called inside the generator function, you have to call <code>next()</code> once to run it after the genrator has been created. So the standard workflow with this object is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Instance the object</span>
</span><span class='line'><span class="n">mt</span> <span class="o">=</span> <span class="n">MicroThread</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create the generator</span>
</span><span class='line'><span class="n">g</span> <span class="o">=</span> <span class="n">mt</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Initialize it</span>
</span><span class='line'><span class="n">g</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Loop over it</span>
</span><span class='line'><span class="n">g</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'><span class="n">g</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since <code>main()</code> is a generator function it must act as any generator and signal its exhaustion rising a <code>StopIteration</code> exception. The overridden <code>step()</code> method, thus, may raise this exception at any point (even multiple ones) to terminate the microthread.</p>

<h4>Scheduler</h4>

<p>Now we need a scheduler, i.e. the system component that manages running tasks. While in a true multitasking system the scheduler is a big and complex component, in a cooperative environment it can be rather simple: its job is to execute each task and wait till they give control back. In between a task and the following the scheduler can execute other functions, but its basic workflow is very straightforward. Obviously the scheduler shall handle the <code>StopIteration</code> exception possibly raised by a task, removing it from the list of running microthreads.</p>

<p>The core of the scheduler will be something like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">thread</span> <span class="ow">in</span> <span class="n">active_microthreads</span><span class="p">:</span>
</span><span class='line'>  <span class="k">try</span><span class="p">:</span>
</span><span class='line'>      <span class="n">thread</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'>      <span class="n">scheduled_microthreads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">thread</span><span class="p">)</span>
</span><span class='line'>  <span class="k">except</span> <span class="ne">StopIteration</span><span class="p">:</span>
</span><span class='line'>      <span class="k">pass</span>
</span><span class='line'>  
</span><span class='line'><span class="n">active_microthreads</span> <span class="o">=</span> <span class="n">scheduled_microthreads</span>
</span><span class='line'><span class="n">scheduled_microthreads</span> <span class="o">=</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This snippet encompasses the behaviour described above. We have two lists, <code>active_microthreads</code> with all the tasks that shall be executed in the current loop and <code>scheduled_microthreads</code> with all the tasks that are goig to be executed in the next loop. At each loop of the scheduler all microthreads in <code>active_microthreads</code> are executed, that is they are granted one execution of their <code>next()</code> function. After this the thread is scheduled again, i.e. it is appended to the <code>scheduled_microthreads</code> list. If the thread raises the <code>StopIteration</code> exception during its execution it is simply not scheduled again. When the <code>active_microthreads</code> list is exhausted the loop ends and the scheduled threads list is transferred in the <code>active_threads</code> one; after this the loop starts again.</p>

<p>So the first implementation of the scheduler is the following:</p>

<figure class='code'><figcaption><span> (scheduler.py)</span> <a href='http://lgiordani.github.io/downloads/code/python-generators/scheduler.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Scheduler</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">active_microthreads</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">scheduled_microthreads</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_microthread</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mthread</span><span class="p">):</span>
</span><span class='line'>        <span class="n">g</span> <span class="o">=</span> <span class="n">mthread</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span><span class='line'>        <span class="n">g</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">active_microthreads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">thread</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">active_microthreads</span><span class="p">:</span>
</span><span class='line'>                <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">thread</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">scheduled_microthreads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">thread</span><span class="p">)</span>
</span><span class='line'>                <span class="k">except</span> <span class="ne">StopIteration</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">active_microthreads</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">scheduled_microthreads</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">scheduled_microthreads</span> <span class="o">=</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>__init__()</code> method initializes the two internal lists we talked about above. The <code>add_microthread()</code> method allows us to add a microthread to the scheduler; the method calls <code>main()</code> on each microthread we add to obtain its generator, then calls <code>next()</code> once on this latter to initialize it and finally adds it to the list of scheduled tasks.</p>

<p>The scheduler logic is then implemented in the <code>run()</code> method, which executes the above core code in an infinite while loop.</p>

<p>We can test the microthreads and the scheduler with this simple code</p>

<figure class='code'><figcaption><span> (test_scheduler.py)</span> <a href='http://lgiordani.github.io/downloads/code/python-generators/test_scheduler.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">mthread</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">scheduler</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestMicroThread</span><span class="p">(</span><span class="n">mthread</span><span class="o">.</span><span class="n">MicroThread</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">num</span> <span class="o">=</span> <span class="n">number</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">step</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Number:&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">num</span>
</span><span class='line'>        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">mt1</span> <span class="o">=</span> <span class="n">TestMicroThread</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">mt2</span> <span class="o">=</span> <span class="n">TestMicroThread</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">mt3</span> <span class="o">=</span> <span class="n">TestMicroThread</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">ms</span> <span class="o">=</span> <span class="n">scheduler</span><span class="o">.</span><span class="n">Scheduler</span><span class="p">()</span>
</span><span class='line'><span class="n">ms</span><span class="o">.</span><span class="n">add_microthread</span><span class="p">(</span><span class="n">mt1</span><span class="p">)</span>
</span><span class='line'><span class="n">ms</span><span class="o">.</span><span class="n">add_microthread</span><span class="p">(</span><span class="n">mt2</span><span class="p">)</span>
</span><span class='line'><span class="n">ms</span><span class="o">.</span><span class="n">add_microthread</span><span class="p">(</span><span class="n">mt3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">ms</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the <code>TestMicroThread</code> is a microthread but the <code>step()</code> method was reimplemented to print a number and wait 1 second. Three microthreads are instanced and added to the scheduler and the <code>run()</code> method of the scheduler is executed. Not surprisingly the result is the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python test_scheduler.py
</span><span class='line'>Number: 1
</span><span class='line'>Number: 2
</span><span class='line'>Number: 3
</span><span class='line'>Number: 1
</span><span class='line'>Number: 2
</span><span class='line'>Number: 3
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The three microthreads are executed in a round-robin fashion, as expected from a cooperative multitasking system.</p>

<p>Note: while all microthreads showed in this article just execute <code>yield 1</code> to freeze the code, <code>yield</code> can return any object, just like the <code>return</code> statement does, and this could be exploited to enhance the communication between microthreads and scheduler.</p>

<h4>Microschedulers</h4>

<p>The scheduler could however be more flexible, specifically it could be converted to a microthread itself. The scheduler, when executed, will return a generator, and each call of its <code>next()</code> method will run one of its microthreads. After this the scheduler will freeze and give control back.</p>

<figure class='code'><figcaption><span> (mscheduler.py)</span> <a href='http://lgiordani.github.io/downloads/code/python-generators/mscheduler.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">MicroScheduler</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">active_microthreads</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">scheduled_microthreads</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_microthread</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mthread</span><span class="p">):</span>
</span><span class='line'>        <span class="n">g</span> <span class="o">=</span> <span class="n">mthread</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span><span class='line'>        <span class="n">g</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">active_microthreads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">yield</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">active_microthreads</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">yield</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">thread</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">active_microthreads</span><span class="p">:</span>
</span><span class='line'>                <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">thread</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">scheduled_microthreads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">thread</span><span class="p">)</span>
</span><span class='line'>                <span class="k">except</span> <span class="ne">StopIteration</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">pass</span>
</span><span class='line'>                <span class="k">yield</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">active_microthreads</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">scheduled_microthreads</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">scheduled_microthreads</span> <span class="o">=</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is sufficient to rename <code>run()</code> to <code>main()</code>, to match our arbitrary microthread interface, and add some <code>yield</code> statements. The first <code>yield</code> at the beginning of <code>main()</code> terminates the creation part: this scheduler has no <code>create()</code> method, but if present it should be called here. The second <code>yield</code> is called if the scheduler contains no microthreads, since it has nothing to do. The third <code>yield</code> is called after each loop of the microthread running part.</p>

<p>These little changes allow the scheduler to be run into another scheduler, thus enabling us to create a hierarchy to easily build complex systems. At the same time the scheduler can be used as usual simply calling its <code>next()</code> method in a for loop.</p>

<figure class='code'><figcaption><span> (test_mscheduler.py)</span> <a href='http://lgiordani.github.io/downloads/code/python-generators/test_mscheduler.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">mthread</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">mscheduler</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestMicroThread</span><span class="p">(</span><span class="n">mthread</span><span class="o">.</span><span class="n">MicroThread</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">num</span> <span class="o">=</span> <span class="n">number</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">step</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Number:&quot;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">num</span>
</span><span class='line'>        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">mt1</span> <span class="o">=</span> <span class="n">TestMicroThread</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">mt2</span> <span class="o">=</span> <span class="n">TestMicroThread</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">mt3</span> <span class="o">=</span> <span class="n">TestMicroThread</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">ms</span> <span class="o">=</span> <span class="n">mscheduler</span><span class="o">.</span><span class="n">MicroScheduler</span><span class="p">()</span>
</span><span class='line'><span class="n">ms</span><span class="o">.</span><span class="n">add_microthread</span><span class="p">(</span><span class="n">mt1</span><span class="p">)</span>
</span><span class='line'><span class="n">ms</span><span class="o">.</span><span class="n">add_microthread</span><span class="p">(</span><span class="n">mt2</span><span class="p">)</span>
</span><span class='line'><span class="n">ms</span><span class="o">.</span><span class="n">add_microthread</span><span class="p">(</span><span class="n">mt3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">ms</span><span class="o">.</span><span class="n">main</span><span class="p">():</span>
</span><span class='line'>    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example is obviously very simple. However it shows how simple it is to build components of a cooperative system and let them live together in an execution space. Executing the scheduler in a different way, for example inside another generator, new microthreads can also be added live. This allows to instance system components on the fly to manage specific needs, such as incoming service requests.</p>

<h2>Conclusions</h2>

<p>Obviously this sort of multitasking cannot provide an interactive execution like that used on our desktop OS or on a Web server, where human users must receive an immediate feedback of their actions. But for systems where task must simply be simultaneously executed without timing needs cooperative multitasking is a valuable solution, due to its simplicity.</p>

<p>Another interesting scenario is that of a real multitasking system (ruled by threaded code or by the OS itself) where each task is made of small cooperating components. This way putting multiple functionalities inside a single component becomes a breeze; the code of each functionality could also be splitted in several plugins and loaded on demand.</p>

<p>A package that implements cooperative multitasking with generator based microthreads is <a href="http://www.kamaelia.org">Kamaelia</a>, and this article has been heavily inspired by it. Other solutions you can find interesting are <a href="http://pypi.python.org/pypi/greenlet">greenlet</a>, presently the most used microthread Python library that runs on the standard unmodified Python interpreter and <a href="http://www.stackless.com/">Stackless Python</a>, a fork of Python that natively implements microthreads.</p>

<h2>Updates</h2>

<p>2014-02-17: <a href="https://twitter.com/entropiae">Riccardo</a> spotted an error in the example code after <code>mthread.py</code> and submitted the correct version. Thanks!</p>

<h2>Past articles</h2>

<ul>
<li><a href="http://lgiordani.github.io/blog/2013/03/25/python-generators-from-iterators-to-cooperative-multitasking">Python Generators - From Iterators to Cooperative Multitasking</a></li>
<li><a href="http://lgiordani.github.io/blog/2013/03/26/python-generators-from-iterators-to-cooperative-multitasking-2">Python Generators - From Iterators to Cooperative Multitasking 2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Generators - From Iterators to Cooperative Multitasking - 2]]></title>
    <link href="http://lgiordani.github.io/blog/2013/03/26/python-generators-from-iterators-to-cooperative-multitasking-2/"/>
    <updated>2013-03-26T14:05:00+01:00</updated>
    <id>http://lgiordani.github.io/blog/2013/03/26/python-generators-from-iterators-to-cooperative-multitasking-2</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>After the recap of the iteration process in Python, in this post we will introduce the concept of generator, which aims to solve some problems that arise from the use of iterators.</p>

<!--more-->


<h2>Generators</h2>

<p>The for construct is generally simple to use and such a loop can be found in almost all programming languages. Its implementation, however, can be problematic in some cases. Let’s look at an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sequence</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">num</span><span class="p">:</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">sequence</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">i</span>
</span></code></pre></td></tr></table></div></figure>


<p>At  first sight <code>sequence()</code> seems to be a good function without big defects (for the sake of simplicity error checking has been intentionally omitted - it does not work with negative numbers for example - and the code is intentionally non-pythonic).</p>

<p>The problem concealed in such code is that the function does not execute return until the whole list has been built and until the function returns the loop does not start. Thus when the loop begins the function already processed the whole data set.</p>

<p>While you are building normal sequences of numbers this can be considered irrelevant, even for rather long ones. The problem gets worse when the data set becomes very big or when the creation of an element is very demanding process; in the first case the function might fill the memory, whereas in the second one the whole execution can last a very long time. Both conditions happen even before the loop produces the first element.</p>

<p>The solution can be found in the generation concept: generating, in this context, means producing only one element of the sequence at each function call. This way each call will take the minimum amount of memory and CPU time needed to create the element and the loop will start immediately.</p>

<p>To allow the implementation of such a solution without using global variables generators have been introduced in Python. A <strong>generator</strong> is a special type of iterator, its peculiarity being the way it is built. Aside from this, generators behave the same exact way as iterators.</p>

<p>A generator is built from every function that contains the <strong>yield</strong> statement; <code>yield</code>’s behaviour follows that of the <code>return</code> statement, i.e. it terminates the function returning a value to the caller. But whereas return permanently terminates the function, giving up local variables to the garbage collector, <code>yield</code> freezes the function’s code, allowing a later call to resume execution immediately after <code>yield</code>, with all local variables initialized as they were during the previous execution.</p>

<p>Pay attention to the fact that the first call of a function that contains an <code>yield</code> statement returns a generator immediately, without executing a single line of the function’s code. Since a generator is an iterator it automatically exposes a next() method that, when called, will actually continue the execution of the frozen function.</p>

<p>A simple example of generator is the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">dec</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">num</span>
</span><span class='line'>  <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; <span class="nv">g</span> <span class="o">=</span> dec<span class="o">(</span>8<span class="o">)</span>
</span><span class='line'>&gt;&gt;&gt; g
</span><span class='line'>&lt;generator object dec at 0xb6abbf2c&gt;
</span></code></pre></td></tr></table></div></figure>


<p>When executed, the <code>dec()</code> function returns a <strong>generator object</strong> and no lines of code have been executed (i.e. <code>x</code> has not yet been initialized).</p>

<p>As soon as <code>next()</code> is called for the first time <code>x</code> will be initialized with the value passed to the function (8 in the example above) and the infinite loop will start. Inside it the local variable <code>x</code> will be decremented and returned to the caller by <code>yield</code>. This latter will also freeze again the code, holding the internal state, in this case the value of the variable <code>x</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; g.next<span class="o">()</span>
</span><span class='line'>7
</span><span class='line'>&gt;&gt;&gt; g.next<span class="o">()</span>
</span><span class='line'>6
</span><span class='line'>&gt;&gt;&gt; g.next<span class="o">()</span>
</span><span class='line'>5
</span><span class='line'>&gt;&gt;&gt; g.next<span class="o">()</span>
</span><span class='line'>4
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the generator <code>g</code> remembers its previous state and acts accordingly.</p>

<p>Since generators are iterators they are allowed to raise the <code>StopIteration</code> exception to signal their exhaustion. In the previous example the <code>dec()</code> function never raises it, thus providing an infinite generator (or infinite iterator).</p>

<p>Another caveat: as for return a function is not limited to one statement, but can contain more than one; obviously the peculiarity of yield makes this scenario rather complex, opening at the same time remarkable possibilities such as that of easily build state machines.</p>

<p>What happens if we call the function again, maybe with a different value of the parameter? We simply obtain a new generator object that is completely independent from the first one, although it behaves the same way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; <span class="nv">f</span> <span class="o">=</span> dec<span class="o">(</span>12<span class="o">)</span>
</span><span class='line'>&gt;&gt;&gt; f
</span><span class='line'>&lt;generator object dec at 0xb72e1cac&gt;
</span><span class='line'>&gt;&gt;&gt; f.next<span class="o">()</span>
</span><span class='line'>11
</span><span class='line'>&gt;&gt;&gt; g.next<span class="o">()</span>
</span><span class='line'>3
</span><span class='line'>&gt;&gt;&gt; f.next<span class="o">()</span>
</span><span class='line'>10
</span><span class='line'>&gt;&gt;&gt; g.next<span class="o">()</span>
</span><span class='line'>2
</span></code></pre></td></tr></table></div></figure>


<p>Let’s recap the whole concept. A function containing the <code>yield</code> statement is called generator function and when executed returns a generator object; this is nothing more than a simple iterator, which automatically implements the freeze and resume of the function’s code.</p>

<p>Pay attention to the fact that a generator is an iterator (it exposes <code>next()</code> and <code>__iter__()</code> methods and may raise <code>StopIteration</code>) but the opposite is not always true. A generator is an iterator built by a generator function, i.e. through the use of the <code>yield</code> statement; as explained there are other ways to build iterators.</p>

<p>Back to the <code>sequence()</code> function showed above we can now write it as a generator function and use it to build arbitrarily long sequences and, at the limit, infinite.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sequence</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">num</span><span class="p">:</span>
</span><span class='line'>          <span class="k">raise</span> <span class="ne">StopIteration</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">i</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt;&gt; <span class="nv">s</span> <span class="o">=</span> sequence<span class="o">(</span>3<span class="o">)</span>
</span><span class='line'>&gt;&gt;&gt; s.next<span class="o">()</span>
</span><span class='line'>0
</span><span class='line'>&gt;&gt;&gt; s.next<span class="o">()</span>
</span><span class='line'>1
</span><span class='line'>&gt;&gt;&gt; s.next<span class="o">()</span>
</span><span class='line'>2
</span><span class='line'>&gt;&gt;&gt; s.next<span class="o">()</span>
</span><span class='line'>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class='line'>  File <span class="s2">&quot;&lt;stdin&gt;&quot;</span>, line 1, in &lt;module&gt;
</span><span class='line'>  File <span class="s2">&quot;&lt;stdin&gt;&quot;</span>, line 5, in sequence
</span><span class='line'>StopIteration
</span><span class='line'>&gt;&gt;&gt;
</span><span class='line'>&gt;&gt;&gt; <span class="k">for </span>i in sequence<span class="o">(</span>3<span class="o">)</span>:
</span><span class='line'>...  print i
</span><span class='line'>...
</span><span class='line'>0
</span><span class='line'>1
</span><span class='line'>2
</span></code></pre></td></tr></table></div></figure>


<h2>Generators and iterators</h2>

<p>A question might arise: if generators are iterators why should we use the <code>yield</code>-based method to create them? After all, generator functions are simple to write but not so simple to manage, due to the radically different behaviour from that of standard functions. Wouldn’t it be enough to create an iterable object that at each call of the <code>next()</code> method creates the correct element of the sequence?</p>

<p>The answer is certainly affirmative: everything you can do with generators can be done with standard iterators. There are two caveats, however.</p>

<p>First consideration is about performances: instancing an object and calling its methods is slower than calling a function. Every time you hear talking about performance problems always think about Web services, administration or scientific tools and in general about big amounts of data. Obviously a script that manages a dozen or so files is not noticeably affected by such problems.</p>

<p>Second consideration is about code complexity, since writing a function is simpler than writing an object. Take into account, however, that an iterable object can be enriched by custom methods that make it more flexible than a generator; for instance a <code>reset()</code> method that can restore the object to its initial state.</p>

<h2>Generator expressions</h2>

<p>The two observations above identify the problems that generators can solve in a simpler way than iterators do; one of those problems concerns the processing of long arrays of data.</p>

<p>Every Python programmer uses and hopefully appreciates the elegance of list comprehension. The following code instances with a single line 100 objects of the <code>MyObject</code> class and puts them in a list</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">object_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">MyObject</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>where the classic code would be</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">object_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
</span><span class='line'>  <span class="n">object_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">MyObject</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>Surely it is not a lot of code, but it is less easy to understand immediately and less elegant; less pythonic, in a word. List comprehension, however, being nothing more than an alternative syntax to express the above for loop, suffers from the same problems, particularly from performance issues we talked about earlier. Bitter enemies of list comprehensions are long lists and objects which creation is expensive.</p>

<p>Could we take advantage of generators in this case? Yes, with <strong>generator expressions</strong>. The syntax of such expressions is identical to that of list comprehension, except for the use of round brackets instead of square ones. While list comprehension returns a list, however, a generator expression return a generator, as the name implies. The previous code could thus be written this way</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">object_generator</span> <span class="o">=</span> <span class="p">(</span><span class="n">MyObject</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <code>object_generator</code> is a generator like one of those returned by a generator function. This latter form of the code would be</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">object_generator_function</span><span class="p">():</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
</span><span class='line'>      <span class="k">yield</span> <span class="n">MyObject</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">object_generator</span> <span class="o">=</span> <span class="n">object_generator_function</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is, as happens for list comprehension and for loops, less elegant than its equivalent shortcut syntax. Obviously, returning a generator has all the advantages we described above: after the generator expression has been executed no element has yet been created. That will happen when the generator is consumed by a for loop or a similar construct.</p>

<p>As for list comprehension, generator expressions can encompass a condition in the form</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">generator</span> <span class="o">=</span> <span class="p">(</span><span class="n">expression</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span> <span class="k">if</span> <span class="n">condition</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>and can also be directly used as arguments for single-argument functions, using function call brackets to mark the expression.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">afunction</span><span class="p">(</span><span class="n">expression</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is however no real performance improvement using such a syntax, since the generator is exhausted before passing it to the function, but the syntax is very elegant and compact.</p>

<p>A typical example of this use is that of the so-called <strong>dictionary comprehension</strong>; from two lists of the same length, one of keys and one of values, we can obtain a dictionary with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">z</span> <span class="k">for</span> <span class="n">z</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">keys</span><span class="p">,</span> <span class="n">values</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>since <code>dict()</code> accepts an iterable of <code>(key, value)</code> tuples, which is what the generator with <code>zip()</code> returns.</p>

<h2>Conclusions</h2>

<p>Generators are a very powerful tool, not only because they simplify the creation of iterators, but also for the advantage of delaying the creation of the objects in a list and for the capability of generator functions to interrupt and resume the execution. As we will see in the third post this last feature is the foundation stone of an easy approach to cooperative multitasking.</p>

<h2>Past articles</h2>

<ul>
<li><a href="http://lgiordani.github.io/blog/2013/03/25/python-generators-from-iterators-to-cooperative-multitasking">Python Generators - From Iterators to Cooperative Multitasking</a></li>
</ul>


<h2>Next articles</h2>

<ul>
<li><a href="http://lgiordani.github.io/blog/2013/03/29/python-generators-from-iterators-to-cooperative-multitasking-3">Python Generators - From Iterators to Cooperative Multitasking 3</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python generators - from iterators to cooperative multitasking]]></title>
    <link href="http://lgiordani.github.io/blog/2013/03/25/python-generators-from-iterators-to-cooperative-multitasking/"/>
    <updated>2013-03-25T10:41:00+01:00</updated>
    <id>http://lgiordani.github.io/blog/2013/03/25/python-generators-from-iterators-to-cooperative-multitasking</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Python is a language that in 11 years of life has been through a very remarkable development and the introduction of several new features, sometimes borrowed from other languages, sometimes arisen from the needs of developers and heavily discussed before being officially implemented. One of these improvements concerns generators, a concept which can be found in the computer science environment since the 70s; it has been implemented in Python from version 2.2 (2001) and became popular from version 2.3 (2003).</p>

<!--more-->


<p>Generators are a generalization of functions that allow to deal in a more complete and rich way with iterations, repeated executions and in general with everything concerns the program flow. In the last years a concept which was considered obsolete started to spread again, namely that of cooperative multitasking. This concept has been shadowed for some years by the advent of multiprocessing and multithreading but, as happened to interpreted languages and virtual machines, as time passes and contexts change good ideas rise again and prove to be anything but dead.</p>

<p>In the Python world, in particular, numerous solutions have appeared which endorse the use of microthreads: these are parallel execution flows without implicit scheduling as opposed to what happens with traditional processes and threads. The big advantage of such objects is the ease of implementation and management of the multiprogramming code, since all synchronization and data protection problems simply do not exist. On the other hand, their use requires a voluntary scheduling, in other words a system that explicitly acquires and releases system resources.</p>

<p>To start talking about cooperative multitasking in Python, thus, it is imperative to understand generators. This first post reviews the concept of iteration and its implementation.</p>

<h2>Iterations</h2>

<p><strong>Iteration</strong> in Python, like in other languages, is a process ruled by the <strong>for</strong> statement and allows to repeatedly execute a block of code, assigning to a variable a value extracted at each execution from a given ordered set. The simplest case of iteration is the processing of a list of values</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]:</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">i</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Python, however, iteration is more than simple loop over the elements of an array. The for statement implements a well-defined and nontrivial protocol, which allows to build very complex objects.</p>

<p>To understand the structure of iteration in Python we have to clarify what is the difference between iterable and iterator objects.</p>

<h4>Iterators</h4>

<p>In Python jargon an iterator is an object with the following properties:</p>

<ul>
<li>it contains a <strong>set of data</strong></li>
<li>it exposes the <code>next()</code> method, which returns one of the contained elements at each call. Each element is returned only one time. This method goes through the whole set of data the iterator incorporates. In Python 3 this method has been renamed <code>__next__()</code>.</li>
<li>after the <code>next()</code> method returns the last element any successive call of this method raises the <code>StopIteration</code> exception. This signals that the iterator is exhausted.</li>
<li>it exposes the <code>__iter__()</code> method that returns the iterator itself.</li>
</ul>


<h4>Iterables</h4>

<p>The definition of iterable, on the other hand, is more generic: an iterable is a container of data that exposes either the <code>__getitem__()</code> or the <code>__iter__()</code> methods (or both):</p>

<ul>
<li><code>__getitem__(i)</code> shall return the value at the given position <code>i</code> or raise the <code>IndexError</code> exception if there is no data at that position.</li>
<li><code>__iter__()</code> shall return an iterator on the data contained in the iterable</li>
</ul>


<p>As you can see the <code>__getitem__()</code> method considers the data as an ordered set, which is not always the case; for this reason an iterable may define the two different methods, or both.</p>

<p>From the previous definitions you see that an iterator is also automatically an iterable, since it exposes the <code>__iter__()</code> method that returns an iterator (itself).</p>

<h4>Loop protocol</h4>

<p>Back to the loop syntax from above we can clarify the matter saying that in Python <strong>the for statement expects an iterable as argument</strong>. This means that we can give any object the capability of being used in a for loop, simply exposing one of the two previously mentioned methods, <code>__getitem__()</code> or <code>__iter__()</code>.</p>

<p>Let’s look at an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">AnIterator</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>          <span class="k">raise</span> <span class="ne">StopIteration</span>
</span><span class='line'>      <span class="n">tmp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">tmp</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">def</span> <span class="nf">__iter__</span><span class="p">():</span>
</span><span class='line'>      <span class="k">return</span> <span class="bp">self</span>
</span></code></pre></td></tr></table></div></figure>


<p>This object is an iterator since it exposes <code>__iter__()</code>. Its <code>next()</code> method returns the decreasing sequence of integer numbers starting from a given number. Testing it we obtain</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&gt;&gt;&gt; <span class="nv">iterator</span> <span class="o">=</span> AnIterator<span class="o">(</span>3<span class="o">)</span>
</span><span class='line'>&gt;&gt;&gt; print iterator.next<span class="o">()</span>
</span><span class='line'>3
</span><span class='line'>&gt;&gt;&gt; print iterator.next<span class="o">()</span>
</span><span class='line'>2
</span><span class='line'>&gt;&gt;&gt; print iterator.next<span class="o">()</span>
</span><span class='line'>1
</span><span class='line'>&gt;&gt;&gt; print iterator.next<span class="o">()</span>
</span><span class='line'>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class='line'>  File <span class="s2">&quot;&lt;stdin&gt;&quot;</span>, line 1, in &lt;module&gt;
</span><span class='line'>  File <span class="s2">&quot;&lt;stdin&gt;&quot;</span>, line 7, in next
</span><span class='line'>StopIteration
</span><span class='line'>&gt;&gt;&gt;
</span><span class='line'>&gt;&gt;&gt; <span class="nv">iterator</span> <span class="o">=</span> AnIterator<span class="o">(</span>3<span class="o">)</span>
</span><span class='line'>&gt;&gt;&gt; <span class="k">for </span>i in iterator:
</span><span class='line'>...     print i
</span><span class='line'>...
</span><span class='line'>3
</span><span class='line'>2
</span><span class='line'>1
</span></code></pre></td></tr></table></div></figure>


<p>This execution shows that the iterator can be used in a for loop. Pay attention to the fact that I had to instance twice the class, since the first three calls of next() exhausted the first instance.</p>

<p>Let’s dive a little more inside what happens when the for loop runs. The Python code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iterable</span><span class="p">:</span>
</span><span class='line'>  <span class="n">some_code</span>
</span></code></pre></td></tr></table></div></figure>


<p>is equivalent to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">_iter</span> <span class="o">=</span> <span class="n">iterable</span><span class="o">.</span><span class="n">__iter__</span><span class="p">()</span>
</span><span class='line'><span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>  <span class="k">try</span><span class="p">:</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="n">_iter</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'>  <span class="k">except</span> <span class="ne">StopIteration</span><span class="p">:</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>  <span class="n">some_code</span>
</span></code></pre></td></tr></table></div></figure>


<p>The for construct receives here an <strong>iterable</strong> object and calls its <code>__iter__()</code> method, obtaining an <strong>iterator</strong> object; then it calls the <code>next()</code> method of this latter until the <code>StopIteration</code> exception is raised. The actual code is a little different, here simplified for clarity’s sake; if you want to learn more about it check the following addresses</p>

<ul>
<li><a href="http://docs.python.org/2/glossary.html">Python Glossary</a></li>
<li><a href="http://docs.python.org/2/library/functions.html#iter">Built-in iter()</a></li>
<li><a href="http://docs.python.org/2/library/stdtypes.html#typeiter">Iterators and sequences</a></li>
</ul>


<h2>Conclusion</h2>

<p>This first post tried to summarize the loop protocol implemented by the for statement, which is in Python very different from many classic languages. Next post will explore the concept of generator and its Python implementation.</p>

<h2>Next articles</h2>

<ul>
<li><a href="http://lgiordani.github.io/blog/2013/03/26/python-generators-from-iterators-to-cooperative-multitasking-2">Python Generators - From Iterators to Cooperative Multitasking 2</a></li>
<li><a href="http://lgiordani.github.io/blog/2013/03/29/python-generators-from-iterators-to-cooperative-multitasking-3">Python Generators - From Iterators to Cooperative Multitasking 3</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Versioning - An underrated discipline]]></title>
    <link href="http://lgiordani.github.io/blog/2013/03/20/versioning-an-underrated-discipline/"/>
    <updated>2013-03-20T10:02:00+01:00</updated>
    <id>http://lgiordani.github.io/blog/2013/03/20/versioning-an-underrated-discipline</id>
    <content type="html"><![CDATA[<h2>Overture</h2>

<p>Everyone uses a computer has to deal in their everyday life with software version numbers, and even who deals with computers just as bare user shall sooner or later introduce the word <em>version</em> in their speech. Alas, this made it one of those concepts so pervading that it is now taken for granted, and this is so widespread that even professionals often forget or do not even know the complexity of the matter behind. This article is an attempt to shine a light on this topic.</p>

<!--more-->


<p>This post started as a collection of some thoughts that aimed to summarize the experience collected by me in 10 years of software development. As usual, short sentences proved to be too short and became long sentences, then paragraphs, and the short list was already a long article. However, despite the length my analysis does not claim to be either complete or exact.</p>

<p>It simply represents an attempt to introduce the reader to the complexity of a matter which is always relevant in the software world.</p>

<h2>A known concept?</h2>

<p>Borrowing an example from an everyday context, speaking about versioning is like speaking about engine size of cars. Everyone roughly knows what engine size is and can give it both a relative value, comparing different sizes, and an absolute one. Many people, however, do not know the unit of measurement of engine size and almost no one among the common people (including me) knows the internal problems of an engine that arise when the size grows or decreases. While we can be satisfied by having a shallow knowledge of this topic, so that we can buy a car, identify it and drive it, the engineer who designs it or the mechanic who repairs it cannot stop at that level, but has to dive more into the subject.</p>

<p>Back to the software environment we can observe that everyone uses a computer even only for standard office work can roughly deal with different versions of the most common programs. Windows 7 is more recent that Windows XP; Photoshop CS2 is very old since the last version is CS6, and so on. As we will discover a rather complex world disguises behind those simple labels.</p>

<h2>A formal definition of versioning</h2>

<p>Giving a <strong>version number</strong> (or, shortly, a <strong>version</strong>) intuitively means identifying the status of an object that may be modified in the course of time. In this sense, despite version numbers are widespread used in the software world, any object can be provided with one of them. A project of any nature, for example, or consumer goods can have an (explicit or implicit) version number.</p>

<p>A very nice example of this latter is that of game consoles, and it allows us to start unfolding some intricacies of the versioning matter. Sony Playstation is a game console which has seen four versions, simply named Playstation, Playstation 2, Playstation 3 and Playstation 4. When Microsoft entered the gaming industry with its Xbox console, Sony Playstation was on the market with its second version. About four years later, Sony was planning to release the third version of Playstation, and Microsoft answered with Xbox 360, which is probably going be followed by Xbox 720. The Xbox versioning system, even if based on an unusual sequence of numbers, does not prevent the consumer from understanding what is the most recent model of the console.</p>

<p>So now we can state more formally that <strong>giving a version number means labelling the status of an object at a given moment in time according to a previously established set of rules</strong>. This set of rules allows to find the correct version number and is called versioning system, versioning scheme or, more simply, versioning.</p>

<h2>The purpose of versioning</h2>

<p>This latter formal definition leaves the question about the purpose of versioning open, i.e. the real benefit of applying that labelling. The reasons behind the necessity of univocally identifying the status of a given object are many and involve different aspects. Here, pure technical or scientific motivations mix with lesser formal decisions such as marketing ones.</p>

<p>Back to the game consoles example from above: Xbox version numbers have been conceived to transmit a marketing message, more than a technical one. The second version of Xbox, indeed, was designed to hinder the Playstation 3 sales. Thus, simply calling it Xbox 2 might have given the impression of an object older and less performing than the competitor. Xbox 360, then, may have multiple meanings from this point of view. The number 3 definitely refers to the version of the competitor’s console, but 360 also remembers the 360 degrees in a circle, suggesting that the console can do anything. As a consequence, the temporary name of the third version of Xbox is Xbox 720, continuing the sequence. The official name could be different, however, since it is not the first time Microsoft changes the versioning system of a product to match other products or different marketing strategies.</p>

<h4>Adopting a versioning system</h4>

<p>Let’s review some of the possible reasons for adopting a versioning system for your products.</p>

<h5>Find out what has been used or distributed at a specific point in the past</h5>

<p>This is the classic need of whom uses machines or software to produce other objects (either concrete objects or lesser material things like data, drawings, texts). It is always possible to find defects in the machine used to make the products as it is possible and desirable to upgrade it. At that point, it is very useful, when not mandatory, <em>to know what objects has been produced with the previous version</em> of the machine or the software and when, where and to whom they have been distributed or sold.</p>

<p>Significant in this scope is the example of food, where entire lots are (physically) labelled in order to make it possible to go back to the origin, as an instance when sanitation problems arise. That way it is possible to withdraw the product from the market, reaching at the same time all customers who bought it. Similarly, when a software bug is discovered which opens a vulnerability in a system it is mandatory to find everyone uses the bugged version of the software to alert them and invite them to upgrade the installation.</p>

<h5>Know the list of changes made in a period of time</h5>

<p>In the software scope, from the programmer’s point of view it is always useful <em>to know what changes have been made between two versions</em> to find out in an easy way what version introduced a bug or made a given functionality available. From the user’s point of view, it is useful to know the features introduced with a new version, either to know the new possibilities of the software or to evaluate the purchase.</p>

<h5>Make easily recognisable different versions of the same model</h5>

<p>When purchasing an object such as a car, the same model can be sold in different versions; each of them differs in some (more or less important) details: engine, fuel supply, color, etc. The producer, from its point of view, must be able <em>to tell each model apart</em> to sell them or to service them.</p>

<h2>What does a version number represent?</h2>

<p>With version number, we mean <strong>a code which is usually made of digits, letters and symbols</strong>, and which altogether identifies one and only one status of the labelled object. As in every code schema, however, it is necessary to state what the number or its parts represent. Especially important are the comparison rules between version numbers.</p>

<h4>An example of versioning</h4>

<p>To help our understanding of the matter let us make an example of the simplest versioning scheme, that is that made by a single integer number (a group of digits). The first version of the software (from now on we will look especially at this scope) will be labelled version <code>1</code>. The versioning system states then that the next version will be version <code>2</code>, then version <code>3</code> and so on.</p>

<p>Such a scheme seems to work, but gives little information. For example, it is not possible to know the extent of changes made between the two versions. Both after the fixing of minor bugs and a complete rewrite of the graphical interface of the software the version number increases by one. Neither it is possible to have information about the compatibility between different versions and taking for granted that no version breaks compatibility is a dangerous assumption.</p>

<p>So our simple versioning schema has some communication shortcomings. Such flaws, however, could be easily balanced by a good documentation that details the peculiarities of each version. This solution is definitely not elegant and immediate but would transmit all the necessary information.</p>

<h4>Limits of the system</h4>

<p>There is a serious structural flaw in our simple schema. Think about a software that has two versions, <code>1</code> and <code>2</code>, labelled according to the schema. For various reasons, many users are still using version <code>1</code> while version <code>2</code> has been available for a long time, for instance because the migration to the new version is hard or expensive.</p>

<p>In such a scenario, which could last for a long time, the developers find a serious bug in a piece of code which was not changed between the two versions. That bug is a dangerous issue for the software and affects both versions. The developers work on it and eventually fix it so now a new release of the software must be produced. For version <code>2</code> the bug fix results, according to the versioning system, in a new version called version <code>3</code>. But what about version <code>1</code>? How will the new version be called? It cannot be called version <code>2</code> since that label has already been assigned to another status of the code.</p>

<h4>Evolving the system</h4>

<p>As you can easily see, the problem has no solution if we keep using the given versioning system. Likewise, it is obvious that only when two or more versions of the same software are actively maintained such a problem arises; a software is actively maintained when new features are added to it, and its bugs are still fixed.</p>

<p>So a change is required. The first thing that comes to mind is to add to the version number another component that shows “minor” modifications. Pay attention to the fact that the “minor” adjective used here <em>refers to the software maintenance and distribution process  and not to an actual measure of the amount or quality of the new code</em>. Indeed there is usually some correlation between the amount of code and the extent of the change, but it is not so straightforward as it could seem at first sight.</p>

<p>A very broadly accepted and used method to add a new component to a version number is to add digits separating them from other components with a single dot.</p>

<p>Our simple versioning system thus enriches. The first version of the software will be <code>1.0</code>. A change that does not introduce an incompatibility will increase the rightmost number, producing versions <code>1.1</code>, <code>1.2</code>, and so on. A change that introduces an incompatibility will increase the leftmost number, producing versions <code>2.0</code>, <code>3.0</code>, and so on. This completely solves the previously described problem. After the bug fix the majority of our software users will run versions <code>1.1</code> and <code>2.1</code>, and only those users who did not yet upgrade the system will be running versions <code>1.0</code> and <code>2.0</code>.</p>

<h2>About numbering</h2>

<p>A short digression about numbering. Generally we start counting from 1, and if you ask someone to tell you the first ten numbers, he or she will likely answer with the sequence 1,2,3,&#8230;,10. If you think carefully about it, however, the decimal system considers 0 the first number (0 units and 0 tens) and 10 the first of the sequence of numbers with 1 ten and units ranging from 0 to 9.</p>

<p>Obviously this system is valid as long as we use numbers as ordinals, that is <em>as labels</em> (the first number is labelled <code>0</code>, the second is labelled <code>1</code>, and so on). From a cardinal point of view, i.e. speaking about the <em>size of a set</em>, starting from 1 is a must since the minimal concrete set is made by one object. I think it is good spending some time thinking about the subject since it is a very interesting matter in the programming scope too.</p>

<p>As an example, consider the difference between Fortran, COBOL and MATLAB (just to name some of the most famous ones) on one side, and C and derived languages on the other. The first set of languages index array elements starting from 1 while the second one index from 0 (while this is a well-known C feature, should be said that LISP first introduced it).</p>

<p>Unfortunately, there is an ambiguity in the common language since we name positions in a list starting from 1, thus mixing the cardinal and ordinal system. This is deep-rooted in the language: for instance in english the word &#8220;the third&#8221; comes from three, &#8220;the fourth&#8221; comes from four and so on (&#8220;the first” comes from &#8220;the foremost&#8221; and “the second” comes from the Latin secundus). If on the contrary we index elements starting from 0, now &#8220;the third&#8221; is the number two, the fourth is the number three, etc. This ambiguity comes from the rather late introduction of the number zero in western culture, officially around 1200. Just to show you that this point is less complex than it appears think about the hours you read on your digital clock; as you can see, they start from 0:00, not from 1:01. Indeed &#8220;the first hour&#8221; is hour number 0.</p>

<p>This ambiguity is very manifest in the versioning environment, where it is taken for granted that the first version of a software is numbered <code>1.0</code>. According to the common numbering system the first version should be numbered <code>1.1</code> while according to the formal system the first version should be numbered <code>0.0</code>. The problem that arises with version <code>0.0</code> is purely communicative since versions starting with 0 are usually considered not stable.</p>

<p>I think that the correct way of numbering versions is that starting from <code>0.0</code>, but I also consider <code>1.0</code> acceptable as the first stable version. This latter is a harmless decision and can spare many disagreements with marketing people.</p>

<h2>Incompatibility and versioning</h2>

<p>Previously I talked about changes that introduce an incompatibility, but I did not formally defined this concept. <strong>Incompatibility</strong>, in the computer world, is the complete or partial impossibility of using a given version of a software (or hardware) in place of another. When evolving a software sometime it is necessary to change parts in a way that makes difficult or even impossible to replace the old version with the new one without changing some other element of the context or environment.</p>

<p>Let’s make a simple example taken from the everyday life of a common computer user. I write a document using Microsoft Word 2007 and save it in the native format, namely docx. Then I send the file to another person, who can only access Word 2003 and he or she cannot open it. Why? Simply because the changes introduced in Office 2007 to the file format are incompatible, that is they change the file format to such an extent that a previous version of the software cannot even show a part of the content.</p>

<p>As you can imagine, the fields where incompatibility problems can arise are many. Speaking in general <em>every part of a software (or hardware) that get in contact with the outside world can be affected by incompatibility issues</em>. That parts are altogether known as interfaces. According to the field of application you can have network interfaces, programming interfaces, hardware interfaces, etc.</p>

<p>An example borrowed from the hardware world is the following. If you design a new version of a hard drive, replacing the head with a totally new component that does not suffer from crashes, this is not incompatible with the previous version of the disk. Indeed hard disk heads do not get in contact with other external components, so the change is called transparent, that is <em>invisible to an external observer</em>. The new version of the hard drive can replace an old version without requiring changes to the hosting computer. On the contrary, if you replace the old IDE connector of the drive with a brand new SATA one you change a component that exchanges information with the outside world, namely the main and most important hard disk interface. That can represent a compatibility issue since to use the new hard disk model you probably have to replace the old IDE-only motherboard of your computer.</p>

<p>The versioning system of choice, thus, has to deal even with possible incompatibilities of our software’s interfaces, besides the maintenance aspects previously described.</p>

<p>Not every change made to interfaces produces an incompatibility. A <strong>backward compatible interface</strong> is able to act both as the new version and the old one (or ones), either automatically or manually driven. The aforementioned Office 2007 is backward compatible with Office 2003 since it can automatically read the old file format and can manually be driven to save a file in that format.</p>

<p>Pay attention that <em>users take for granted that your software is backward compatible with its previous versions</em>, so any incompatibility must be avoided if possible. When not, clearly state it in the documentation.</p>

<h2>Internal and external version numbers</h2>

<p>As stated before, a version number is intimately bound to the way a software is maintained and distributed. A development team might however produce a substantial number of intermediate versions between two official releases, so it is important to tell apart external version numbers that bear a communication towards the user, from internal ones that transmit a communication towards the development team. Clearly each external version number will be coupled with one or more internal ones, but the opposite is not true.</p>

<p>So external version numbers address the user; thus they should above all permit to identify the extent of changes made to the software while using a schema as simple as possible. External version numbers can also be simple text labels as happened when the successor of Windows 2000 was named Windows XP. As for internal version numbers, on the other hand, requirements change, so the versioning schema changes accordingly and might become very complex.</p>

<p>Not realizing this difference between version numbers might introduce confusion and errors, and completely avoiding that users get in contact with internal version numbers could be a better choice.</p>

<p>Let’s dive a little more into the reasons a development group has to adopt a versioning system and into the different possibilities it faces.</p>

<p>First of all it is useful to state again that the need that drives the decision of labelling the produced software is that of being able to find quickly information about the production context. Such data change according to the development process, but I can list some common elements: author and date, hardware requirements, changes from the last version, potential compatibility issues or unresolved bugs.</p>

<p>The version number shall not necessarily contain such information directly. It can however encompass some of them, those data that the development team considers useful to be visible.</p>

<p>I think it is very wrong to give version number components a meaning of importance as it happens to external ones. Internal version numbers must represent a measurable quantity or precise steps of a procedure. Examples of measurable quantities are dates, a progressive number, the compatibility of some interfaces, the number of commits from the last version while examples of procedure steps are labels such as alpha, beta, test, if these labels have a clear meaning in the software development cycle.</p>

<p>For instance, an internal versioning schema could be the following</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;date: YYYYMMDD_hhmmss&gt;-&lt;commits&gt;</span></code></pre></td></tr></table></div></figure>


<p>This way the version 20130803_092500-134 immediately tells the developer some important information, that is the date of creation, which makes it easily comparable to other versions, and the number of commits included from the last version, that can be used as a rough measure of the amount of work carried out.</p>

<p>Another example, taken from a software library versioning schema, is the following</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;api&gt;.&lt;abi&gt;.&lt;code&gt;</span></code></pre></td></tr></table></div></figure>


<p>where the three numbers assume a very clear compatibility meaning. The part called <code>code</code> is a progressive number that shows changes that do not affect any interface. This encompasses changes like optimizations and changes in internal algorithms.</p>

<p>The central number (<code>abi</code>) signals a change in the binary interface (ABI, Application Binary Interface) that is it shows that changes happened that makes it necessary to recompile software that uses this library, without having to modify it. A typical example is given by the format change of a data type such as a structure. Function prototypes are the same as before, but an already compiled code would pass an incompatible data type.</p>

<p>The third and leftmost number (<code>api</code>) is linked to incompatibilities in the programming interface (API, Application Programming Interface). A classic example of API in a library is the set of all function prototypes. Changing the prototype of a function creates a big incompatibility issue, and this requires to adapt and recompile the softwares that use the library.</p>

<p>According to this schema a library moving from version <code>5.6.1</code> to version <code>5.6.2</code> may be installed without any further check while the subsequent release <code>6.0.0</code> is going to require a deep review of the release notes before installing it, perhaps requiring also the update of other software that uses it.</p>

<p>The two examples are very different since the two schemes try to solve different needs. Indeed, your mileage may vary according to your needs or the environment where you work. In my development team, for instance, a reduced version of the second example is used, which  consists of just the API and CODE numbers since the ABI break cases are so rare that can be handled as API breaks.</p>

<h4>The dangerous major/minor system</h4>

<p>An example of what I consider a dangerously ambiguous system is that proposed by Microsoft to .NET developers (http://msdn.microsoft.com/en-us/library/system.version.aspx). The schema is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;major&gt;.&lt;minor&gt;.&lt;build&gt;.&lt;revision&gt;</span></code></pre></td></tr></table></div></figure>


<p>where major is explicitly described with these words <em>“A higher version number might indicate a major rewrite of a product where backward compatibility cannot be assumed”</em> while minor <em>“indicates significant enhancement with the intention of backward compatibility. This higher minor version number might indicate a point release of a product or a fully backward-compatible new version of a product”</em>.</p>

<p>What I consider dangerous in this description are the words <em>might</em>, <em>major rewrite</em>, <em>assumed</em>, <em>significant enhancement</em>, <em>intention</em>.</p>

<p>These words, indeed, express indefinite and unsteady concepts. A team that uses this schema without a previous specification is going to end up asking whether a given version with a new major number is incompatible or not, or if the changes made to some code are “major” or only “significant”.</p>

<p>The team that wants to use the .NET versioning system must first of all write a document where the meaning of such words and cases are clearly described, how to deal with incompatibilities, etc. Alas, the .NET system reflects one of the most widespread concepts about versioning, namely that versions have to do with the user&#8217;s feeling about the changes, thus the major/minor nomenclature. User&#8217;s perception of the changes in the software must be encompassed by an external number that should use a simpler schema.</p>

<p>This can never be stated enough: <strong>internal version numbers must come from measurable quantities.</strong></p>

<h2>Versioning is a discipline</h2>

<p>Versioning is not a set of fixed rules, but a <strong>methodology</strong>. When a development group follows a new methodology it both adopts and adapts it. Adopting means shifting the work procedures to follow those proposed by the methodology while adapting means changing the methodology to fit the environment where it is supposed to be used.</p>

<p>Versioning is a <strong>discipline</strong>, a way of thinking, where rules are the product of general concepts modelled after the scope and the environment where they are used. So the versioning scheme of a product can vary in the course of time since product or user requirements change.</p>

<p>Software is one of the environment where design is faster, always changing, pronged and distributed among several developers, so many things need to be versioned, not just the final product. This latter, indeed, could have a lifecycle of several years, but in the meantime bug fixes could be released, experimental code produced, tools and documentation enhanced. All those things can be, and many times they have to be versioned. <strong>Always pay attention that the method for dealing with an object is imposed by the object itself, so the versioning scheme is imposed by the versioned object.</strong> Your documentation probably needs a different schema from a software tool.</p>

<p>So the following guidelines must be shaped on the specific needs of the development group, and these are forced by the product, the size of the team, the market and several other surrounding conditions of which each team manager should take account.</p>

<ol>
<li><p><strong>Versioning rules and procedures should take account not only of current needs but also of future ones</strong>, to avoid as much as possible to be forced to change them. As usual in design it is recommended to consider the matter from several points of view and to explore different “what if?” scenarios. Doing this a team can both create a system that will last a long time and identify those cases where the system will fail. This way it is already known under which conditions the system will not satisfy the needs; those conditions, if forecasted, can be thus confronted with a clear change path in mind.</p></li>
<li><p><strong>Versioning rules must be clearly explained</strong> and written in an easily accessible document (e.g. on an intranet in HTML format). Rules must be short. Use cases and frequently asked questions should be attached.</p></li>
<li><p><strong>Versioning rules must be quickly changed if they are no more suitable</strong> for the use cases with which the team has to deal. One of the Extreme Programming sayings, “embrace change”, must be the spirit of any rule system which aims to be useful. That spirit integrates the first point given above since everyone can come across an unexpected condition and be in need of modifying the previous design choices.</p></li>
<li><p><strong>The change of versioning rules should be fully backward compatible if possible</strong>. Every time the system evolves, it should thus become a superset of the previous rules. This way the technical shock originated by the change can be easily absorbed. Obviously, as already stated, there are many conditions in which backward compatibility is not possible. In such cases, the two systems should possibly be marked so that a version number is unequivocally connected to one of them (using a prefix, for example). The date when the new systems takes over the old one must be recorded.</p></li>
</ol>


<h2>Finale</h2>

<p>As you can see there is much to say about this subject, and this article only scratches the surface of the matter. However, I hope it helped you to have a big picture of the different aspects that hide behind those apparently simple labels or numbers called versions. Stay tuned for future articles on this topic through the <a href="http://lgiordani.github.io/blog/categories/versioning/">versioning</a> tag.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrent programming - 5]]></title>
    <link href="http://lgiordani.github.io/blog/2013/02/28/concurrent-programming-5/"/>
    <updated>2013-02-28T17:49:00+01:00</updated>
    <id>http://lgiordani.github.io/blog/2013/02/28/concurrent-programming-5</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p>In the past articles we introduced the concept of concurrent programming and studied a first solution to the problem of intercommunication: semaphores. As explained, the use of semaphores allows us to manage access to shared resources, and this is a first and very simple form of synchronization. In this issue, we will go one step further introducing a richer tool for concurrent programming: <em>message queues</em>.</p>

<!-- more -->


<h2>Limits of semaphores</h2>

<p>Ruling access to a resource through semaphores is a good form of synchronization, even if it is very limited. Indeed it prevents two or more processes simultaneously modifying shared data but does not allow them to exchange information.</p>

<p>Moreover, the basic use of semaphores does not guarantee the absence of dangerous situations. As an example remember that, in a multitasking environment, we do not know in advance which process will be executed and when. This means that a resource could be inaccessible for a process since it is always blocked by other processes.</p>

<p>Thus, while being a good tool in the multitasking programmer&#8217;s bag, semaphores are not the final solution to his or her problems. So we now introduce a new tool which plays a big role in multitasking and distributed systems called <strong>message queues</strong>.</p>

<h2>Message queues theory</h2>

<p>Since message queues are one of the most important structures in computer science, let us dive into them at a slow pace. So first of all, what is a <strong>message</strong> in this context? Simply stated, a message is some <strong>data</strong> with a given <strong>format</strong>, which is a complex form to say everything. Indeed in the context of communication between processes, or computers, a message is a stream of bits which must be formatted according to a previously agreed format, where format means a set of rules the stream of bit must obey.</p>

<p>For example, we could simply state that a message is a raw extended <a href="http://en.wikipedia.org/wiki/ASCII">ASCII</a> string: this means that the stream must contain a multiple of 8 bits (since each extended ASCII character is represented by 8 bits). Our format is very simple, in this case, but it is enough to state that a message made of 377 bit is invalid. We can also make a message encompass entire files, and there is in general no limit to the size.</p>

<p>Now we have a definition of message. What is a <strong>queue</strong>? A queue is a list structure, where a given number of <em>homogeneous</em> objects can be stored. An object can be inserted in the list (<strong>push</strong>ed) and extracted from it (<strong>pop</strong>ped). Usually a queue in the messaging environment is a FIFO (First In First Out) one, meaning that the first object pushed is the first object popped. There is a plenty of mathematical and computer science theory about queues, buffers, FIFO, LIFO and other list types, and we will not review such topics here. Just a notice, to open further research by the reader: the stack, one of the most important concepts in programming, is also a memory buffer, or a queue, where the computer stores function calls and local variables.</p>

<p>So message queues are buffers where arbitrary (but homogeneous) objects called messages can be stored for a later retrieval.</p>

<p>Every process can create one or more queues and every process can send a message to one of them. The only prerequisite is that the unique identifier of the queue must be known. Since we are now working with processes spawned by a fork operation, each process can know the identifier of a queue if the queue has been created before executing <code>fork()</code>.</p>

<p>The knowledge of a queue identifier makes it is also possible to read messages from it. Messages can be accessed sequentially, reading the messages in chronological order (from the oldest, the first, to the most recent, the last arrived), but selectively, that is considering only the messages of a certain type: this last feature give us a sort of control on the priority of the messages we read.</p>

<p>Queues, therefore, can be used to implement several communication scenarios, from the simplest ones where all processes send messages to and read messages from the same queue, to more complex solutions such as a full mail system between processes.</p>

<p>Irrespective of the communication framework we set for our processes, synchronization can now be performed through a richer tool. Processes needing synchronization can exchange messages to establish the correct timings schedule when performing actions. Messages, thus, do not replace semaphores, but, as already seen, cover functionalities that they cannot provide.</p>

<p>Before we can switch to implement message queues in C language, it is necessary to speak about another problem related to messages: the need of a <em>communication protocol</em>.</p>

<h2>Creating a protocol</h2>

<p>A <strong>protocol</strong> is a set of rules which control the interaction of elements in a set. Every time you must regulate the exchange of information between two or more actors in a scenario you need a protocol, even when dealing with humans and not computers.</p>

<p>In <a href="http://lgiordani.github.io/blog/2013/02/13/concurrent-programming-4">the past article</a> we implemented a very simple protocol when instructing processes to access a resource according to the status of a semaphore. This latter is also modified as part of the protocol itself.</p>

<p>As already stated in a past article, there is no difference between interprocess communication on the same machine or in a distributed environment (multiple machines): indeed, every network protocol (TCP/IP, DNS, SMTP, just to cite some of the most famous) is built on a message exchange architecture.</p>

<p>This is a simple example of a protocol based on message exchange: two processes, A and B, are executing concurrently and processing different data. Once they end the processing they have to merge their results. Here, synchronization problems arise: what process actually does the merging? If the process in charge of the merging operation is the process A, for example, the merging protocol can be described by these time charts, one for each process</p>

<h4>PROCESS B</h4>

<ol>
<li>Work with your data</li>
<li>When you finish send a message to A</li>
<li>When A answers, begin sending it your results</li>
</ol>


<h4>PROCESS A</h4>

<ol>
<li>Work with your data</li>
<li>Wait for a message from B</li>
<li>Answer the message</li>
<li>Receive data and merge them with yours</li>
</ol>


<p>Choosing the merger process is in this case totally arbitrary. This, however, can be a very important part of a protocol.</p>

<p>This protocol is extensible ina simple way to the case of n processes: every process but A works with its own data and then send a message to A. When A answers, the other process sends its results: the only process modified in this generalization is A since it has to receive messages from multiple processes instead of just one.</p>

<h2>System V Message Queues</h2>

<p>Now it is the time to speak about implementing these concepts in a Linux operating system environment. As already said we have a set of primitives that allow us to manage the structures related to message queues, and they are very similar to those dedicated to semaphore management, already described in <a href="http://lgiordani.github.io/blog/2013/02/13/concurrent-programming-4">the past article</a>.</p>

<p>The structure used to describe a message is <code>msgbuf</code> and is declared in <code>linux/msg.h</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* message buffer for msgsnd and msgrcv calls */</span>
</span><span class='line'><span class="k">struct</span> <span class="n">msgbuf</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">long</span> <span class="n">mtype</span><span class="p">;</span>         <span class="cm">/* type of message */</span>
</span><span class='line'>   <span class="kt">char</span> <span class="n">mtext</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>      <span class="cm">/* message text */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The field <code>mtype</code> represents the type of the message and is a strictly positive number: the correspondence between numbers and message types has to be set in advance and is part of the protocol definition.</p>

<p>The second field represents the content of the message. With the standard definition, no real message can be held inside it because the space is too little (just one byte). This is just a placeholder since the real structure used to describe messages can be redefined in order to contain complex data. An example of redefinition is the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">message</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">long</span> <span class="n">mtype</span><span class="p">;</span>         <span class="cm">/* message type */</span>
</span><span class='line'>   <span class="kt">long</span> <span class="n">sender</span><span class="p">;</span>        <span class="cm">/* sender id */</span>
</span><span class='line'>   <span class="kt">long</span> <span class="n">receiver</span><span class="p">;</span>        <span class="cm">/* receiver id */</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">info</span> <span class="n">data</span><span class="p">;</span>   <span class="cm">/* message content */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see this is not a redefinition in the sense of object inheritance, being C a pure procedural language. The redefined structure must obey two simple rules: the first field must be a <code>long mtype</code> and the maximum size dimension shall be 8192 bytes.</p>

<p>This last limit is hard coded in the Linux kernel, i.e. there is a C <code>#define</code> directive in <code>linux/msg.h</code> which states</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define MSGMAX  8192   </span><span class="cm">/* &lt;= INT_MAX */</span><span class="cp">   </span><span class="cm">/* max size of message (bytes) */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure>


<p>In the same file, there are other interesting limits such as <code>MSGMNB</code>, the maximum total size of a queue, which in Linux is set by default to 16384. That means that a queue containing 2 messages is already full.</p>

<p>A short notice about kernel parameters such as <code>MSGMAX</code>, <code>MSGMNB</code> and others: kernel parameters can obviously be changed by modifying the source code and recompiling the kernel, that is generating a custom Linux kernel. Varying some parameters, however, can be dangerous for the portability of your programs. Indeed, if you increase the maximum size of a message to, say, 16384 bytes, in order to host big messages, your application will crash on a kernel without that modification, where the maximum size is still 8192. Kernel parameters can also be changed at runtime through the <code>/proc</code> filesystem and the sysctl interface: these topics are very rich and important and thus deserve a larger space. For the time being, I let the reader research about them.</p>

<h4>Create a queue</h4>

<p>To create a new queue a process should call the <code>msgget()</code> function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">msgget</span><span class="p">(</span><span class="n">key_t</span> <span class="n">key</span><span class="p">,</span> <span class="kt">int</span> <span class="n">msgflg</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>which receives as arguments an IPC key (see <a href="http://lgiordani.github.io/blog/2013/02/13/concurrent-programming-4">issue 4</a>) and some flags, which by now can be set to <code>IPC_CREAT | 0660</code> (create the queue if it does not exist
and grant access to the owner and group users). The returned integer is called queue identifier and is unique in the system.</p>

<h4>Send messages</h4>

<p>To send a message to a queue we call the <code>msgsnd()</code> primitive</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">msgsnd</span><span class="p">(</span><span class="kt">int</span> <span class="n">msqid</span><span class="p">,</span> <span class="k">struct</span> <span class="n">msgbuf</span> <span class="o">*</span><span class="n">msgp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">msgsz</span><span class="p">,</span> <span class="kt">int</span> <span class="n">msgflg</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <code>msqid</code> is the identifier of the queue, <code>msgp</code> is a pointer to the message we have to send, <code>msgz</code> the size of the message in bytes (excluding the length of the <code>mtype</code> field, which is 4 bytes) and <code>msgflg</code> a flag related to the waiting policy.</p>

<p>Here, <code>msgp</code> is a pointer to a <code>struct msgbuf</code>. However, since that structure has been redefined, our actual call will contain a pointer to a variable of the redefined type.</p>

<p>The length of the message in bytes can be easily be found as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">length</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">message</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <code>struct message</code> is our redefinition of <code>struct msgbuf</code>.</p>

<p>Waiting policies are similar to those introduced for semaphores. This time the policy is used when the queue is full. If <code>msgflg</code> is set to <code>IPC_NOWAIT</code>, the sender process will not wait for some available space and will exit with an error code.</p>

<h4>Read messages</h4>

<p>To read messages contained in a queue we use the <code>msgrcv()</code> system call</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">msgrcv</span><span class="p">(</span><span class="kt">int</span> <span class="n">msqid</span><span class="p">,</span> <span class="k">struct</span> <span class="n">msgbuf</span> <span class="o">*</span><span class="n">msgp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">msgsz</span><span class="p">,</span> <span class="kt">long</span> <span class="n">mtype</span><span class="p">,</span> <span class="kt">int</span> <span class="n">msgflg</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>where the <code>msgp</code> pointer identifies the variable where we will copy the message read from the queue and mtype identifies the subset of messages we want to consider. As before, <code>msgp</code> should be a pointer to a variable of our redefined type and both <code>msgz</code> and <code>msgflg</code> have the same meaning of their counterparts in <code>msgsnd()</code>.</p>

<h4>Delete a queue</h4>

<p>Last, a queue can be removed calling the <code>msgctl()</code> primitive</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">msgctl</span><span class="p">(</span><span class="kt">int</span> <span class="n">msqid</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cmd</span><span class="p">,</span> <span class="k">struct</span> <span class="n">msqid_ds</span> <span class="o">*</span><span class="n">buf</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>where the command <code>cmd</code> to remove the queue is <code>IPC_RMID</code>. Other two commands, <code>IPC_STAT</code> and <code>IPC_SET</code>, are available through <code>msgctl()</code>, but they are not interesting now.</p>

<h2>Putting it all together</h2>

<p>Let&#8217;s test all these concepts with a simple program which creates a message queue, sends a message to it, reads the message and cancels the queue. After the message has been read, a comparison between the original values and the ones in the message is performed to check that the system is working.</p>

<figure class='code'><figcaption><span>queues1  (queues1.c)</span> <a href='http://lgiordani.github.io/downloads/code/queues1.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/ipc.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/msg.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Redefines the struct msgbuf */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">mymsgbuf</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">mtype</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">int_num</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">float_num</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">message_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">qid</span><span class="p">;</span>
</span><span class='line'>  <span class="n">key_t</span> <span class="n">msgkey</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">message_t</span> <span class="n">sent</span><span class="p">;</span>
</span><span class='line'>  <span class="n">message_t</span> <span class="n">received</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Initialize the seed of the pseudo-random number generator */</span>
</span><span class='line'>  <span class="n">srand</span> <span class="p">(</span><span class="n">time</span> <span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Length of the message */</span>
</span><span class='line'>  <span class="n">length</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">message_t</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">msgkey</span> <span class="o">=</span> <span class="n">ftok</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Create the queue*/</span>
</span><span class='line'>  <span class="n">qid</span> <span class="o">=</span> <span class="n">msgget</span><span class="p">(</span><span class="n">msgkey</span><span class="p">,</span> <span class="n">IPC_CREAT</span> <span class="o">|</span> <span class="mo">0660</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;QID = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">qid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Build a message */</span>
</span><span class='line'>  <span class="n">sent</span><span class="p">.</span><span class="n">mtype</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sent</span><span class="p">.</span><span class="n">int_num</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
</span><span class='line'>  <span class="n">sent</span><span class="p">.</span><span class="n">float_num</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)(</span><span class="n">rand</span><span class="p">())</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sent</span><span class="p">.</span><span class="n">ch</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span><span class="o">%</span><span class="mi">26</span> <span class="o">+</span> <span class="mi">97</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Send the message */</span>
</span><span class='line'>  <span class="n">msgsnd</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sent</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;MESSAGE SENT</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Receive the message */</span>
</span><span class='line'>  <span class="n">msgrcv</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">received</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">sent</span><span class="p">.</span><span class="n">mtype</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;MESSAGE RECEIVED</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Control that received and sent messages are equal */</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Interger number = %d (sent %d) -- &quot;</span><span class="p">,</span> <span class="n">received</span><span class="p">.</span><span class="n">int_num</span><span class="p">,</span> <span class="n">sent</span><span class="p">.</span><span class="n">int_num</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">received</span><span class="p">.</span><span class="n">int_num</span> <span class="o">==</span> <span class="n">sent</span><span class="p">.</span><span class="n">int_num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot; OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;ERROR</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Float number = %f (sent %f) -- &quot;</span><span class="p">,</span> <span class="n">received</span><span class="p">.</span><span class="n">float_num</span><span class="p">,</span> <span class="n">sent</span><span class="p">.</span><span class="n">float_num</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">received</span><span class="p">.</span><span class="n">float_num</span> <span class="o">==</span> <span class="n">sent</span><span class="p">.</span><span class="n">float_num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot; OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;ERROR</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Char = &#39;%c&#39; (sent &#39;%c&#39;) -- &quot;</span><span class="p">,</span> <span class="n">received</span><span class="p">.</span><span class="n">ch</span><span class="p">,</span> <span class="n">sent</span><span class="p">.</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">received</span><span class="p">.</span><span class="n">ch</span> <span class="o">==</span> <span class="n">sent</span><span class="p">.</span><span class="n">ch</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot; OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;ERROR</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Destroy the queue */</span>
</span><span class='line'>  <span class="n">msgctl</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="n">IPC_RMID</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can create two processes and let them communicate through a message queue. Remembering forking concepts explained in the <a href="http://lgiordani.github.io/blog/2013/02/04/concurrent-programming-2">issue 2</a> you can recall that the child process, when created, receives a copy of the memory of its parent. This means that creating the queue before the fork operation results in both the parent and the child knowing the right queue identifier and thus capable of access it.</p>

<p>The following code creates a queue, then forks the execution. The child generates a random number, prints it on the standard output and sends them to the parent, which in turn prints it on the screen.</p>

<figure class='code'><figcaption><span>queues2  (queues2.c)</span> <a href='http://lgiordani.github.io/downloads/code/queues2.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/ipc.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/msg.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Redefines the message structure */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">mymsgbuf</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">mtype</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">message_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">qid</span><span class="p">;</span>
</span><span class='line'>  <span class="n">key_t</span> <span class="n">msgkey</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">message_t</span> <span class="n">buf</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">length</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">message_t</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">msgkey</span> <span class="o">=</span> <span class="n">ftok</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">qid</span> <span class="o">=</span> <span class="n">msgget</span><span class="p">(</span><span class="n">msgkey</span><span class="p">,</span> <span class="n">IPC_CREAT</span> <span class="o">|</span> <span class="mo">0660</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">())){</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;CHILD - Queue ID = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">qid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">srand</span> <span class="p">(</span><span class="n">time</span> <span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">sleep</span> <span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>      <span class="n">buf</span><span class="p">.</span><span class="n">mtype</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="n">buf</span><span class="p">.</span><span class="n">num</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">100</span><span class="p">;</span>
</span><span class='line'>      <span class="n">msgsnd</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;CHILD - Sent message number %d: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">buf</span><span class="p">.</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;PARENT - Queue ID = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">qid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">sleep</span> <span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>    <span class="n">msgrcv</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;PARENT - Received message number %d: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">buf</span><span class="p">.</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;PARENT - Waiting for the child to terminate...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">waitpid</span> <span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;PARENT - Child ended</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">msgctl</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="n">IPC_RMID</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compiling and running the program you can check the correct working of the shared message queue.</p>

<h2>Conclusions</h2>

<p>In this article, we introduced a new IPC structure called message queue and the related concepts of message and protocol. These concepts are very important and are going to be the foundation stone of a project we will realize step by step in the future articles: a simple telephone switch simulator.</p>

<h2>Past articles</h2>

<p><a href="http://lgiordani.github.io/blog/2013/01/31/concurrent-programming-1">Concurrent Programming 1</a></p>

<p><a href="http://lgiordani.github.io/blog/2013/02/04/concurrent-programming-2">Concurrent Programming 2</a></p>

<p><a href="http://lgiordani.github.io/blog/2013/02/06/concurrent-programming-3">Concurrent Programming 3</a></p>

<p><a href="http://lgiordani.github.io/blog/2013/02/13/concurrent-programming-4">Concurrent Programming 4</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrent programming - 4]]></title>
    <link href="http://lgiordani.github.io/blog/2013/02/13/concurrent-programming-4/"/>
    <updated>2013-02-13T10:50:00+01:00</updated>
    <id>http://lgiordani.github.io/blog/2013/02/13/concurrent-programming-4</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p>In the past issue, of this series of articles about concurrent programming we started to concern ourselves with the problems of synchronization between processes. In this installment, we will investigate further the subject introducing some structures and functions collectively known as <em>Unix System V IPC</em>.</p>

<!--more-->


<h2>IPC: InterProcess Communication</h2>

<p>Communication between processes, either running on the same machine or over a network, is one of the most interesting topics in computer science and, despite its age, new solutions to this problem keep arising. With the widespread availability of Internet access, the subject is now a little shifted towards pure network communication, which represents just a part of the techniques known as <strong>IPC</strong>: InterProcess Communication.</p>

<p>This abbreviation encompasses several different scopes in the field of multiprocessing, the most important ones being <strong>synchronization</strong>, <strong>shared data management</strong> and <strong>messaging</strong>. In this article, we will focus on local IPC, i.e. communication between processes running on the same machine. The underlying concepts and techniques, however, can be easily applied to a network environment too, but they require a layer to manage network communication, which is out of the scope of this series.</p>

<h2>More on synchronization</h2>

<p>As briefly shown in the last article synchronization problems are not only among the most complex issues to solve in computer science, but can also lead to severe malfunctions of our software.</p>

<p>Let&#8217;s reconsider and formalize the example given in the last post. Say we create two different processes working on the same data. If the two processes just read the same data from memory (or disk) no problems can arise: data are static, and accessing does not change them. So the execution of the two processes is called <strong>consistent</strong>, which highlights that repeated executions or executions spanning a long time will always result in the same system behaviour.</p>

<p>If now one of the processes wants to modify data different situations can come up, depending on the actual timing of the operations. Say we have two processes <code>A</code> and <code>B</code> and an element <code>d</code>; process <code>A</code> increases element <code>d</code> by 1 while process <code>B</code> prints the element value on the screen. In a sort of metalanguage, we could express this situation with the following syntax</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A { d-&gt;d+1 } & B { d-&gt;output }</span></code></pre></td></tr></table></div></figure>


<p>where <code>&amp;</code> stands for a concurrent execution; in other words the two processes are not synchronized. One of the possible resulting executions is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(-) d = 5
</span><span class='line'>(A) d = 6
</span><span class='line'>(B) output = 6</span></code></pre></td></tr></table></div></figure>


<p>while the other is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(-) d = 5
</span><span class='line'>(B) output = 5
</span><span class='line'>(A) d = 6</span></code></pre></td></tr></table></div></figure>


<p>As you can see, different timings can lead to different results; let&#8217;s pretend that element <code>d</code> is the amount of money in your bank account, and you will suddenly realize the importance of the matter. Such a reliance of data on timing or system conditions is known as <strong>data inconsistency</strong>.</p>

<p>As we already described, waiting is a trivial form of synchronization that can solve this problem. However it is as simple as inefficient as it blocks the execution of one process while the other is operating and this happens even if the blocked process is no more operating on shared data. The block is indeed based on the simple assumption that one process could lead to data inconsistency.</p>

<p>It is thus necessary to increase the <strong>granularity</strong> of this block. Granularity is the scope of an action: the higher is the granularity the narrowest is the scope. So we have to restrict the scope of the block, which by now covers the whole process.</p>

<h2>System V keys</h2>

<p>A part of the IPC structures introduced by Unix System V is explicitly dedicated to resource identification, the capability of labelling arbitrary objects and limiting access management to them. This is done through the use of the so-called <em>SysV IPC Keys</em>: a <strong>key</strong>, in this context, is a number used to identify univocally an IPC structure. An IPC key can be generated by <code>ftok()</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">key_t</span> <span class="nf">ftok</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">,</span> <span class="kt">int</span> <span class="n">proj_id</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <code>pathname</code> is an existing file name with the full path and <code>proj_id</code> is a number without any restriction. It is guaranteed that the returned key is the same for subsequent calls with the same parameters, but it is not guaranteed that different parameters result in different keys: in other words <em>keys are not guaranteed to be unique</em>. Since IPC functions require a key created with <code>ftok()</code> the best solution is to write a small library that keeps track of assigned keys and avoids duplicates.</p>

<h2>Semaphores - part 1</h2>

<p>The idea of traffic light can be profitably borrowed to control access to resources. A <strong>semaphore</strong>, in the IPC world, is a structure capable of containing a positive or null integer and which manages a queue of processes waiting for a particular condition of the semaphore itself.</p>

<p>Despite their simplicity, the power of semaphores is big, thus their correct use is not trivial. We will therefore start writing code without error control, just to focus on the real subject. Please remember that in real world applications, error control code can vary from 40% up to 80% of the total amount, so bear in mind that code without error control is good only for the purpose of understanding concepts.</p>

<p>The first possible use of a semaphore is that of access controller: the value of the semaphore represents the number of processes that can concurrently access the resource. Every time a process access the resource it decrements the value of the semaphore and every time a process releases the resource it increments the value. If the resource is exclusive (that is only one process can access the resource at a time), the maximum value of the semaphore will be 1.</p>

<p>A second use of the semaphore is that of resource counter. The value in this case is the number of resources available to processes, e.g. memory cells, network connections, and so on. As you can easily understand, using a resource is equivalent to locking its access.</p>

<p>Let&#8217;s consider a practical case where both the uses of semaphores will be useful.</p>

<p>We build a buffer of length L where n processes W1,&#8230;, Wn can write to, but from which just one process R can read. Say also that just one process can access the buffer at a given time T. As you can easily understand W processes can write at any time except when the buffer is full while the process R can read at any time except when the buffer is empty.</p>

<p>This buffer could be easily managed in a standard single task environment by declaring 2 flags, the first to signal overflow and the second to signal underflow. We are in a multitasking environment now, so flags declared before the fork operation are not shared between processes (each process has its own copy of the flags, and they are not linked). So we have to use a shared structure, and this is where IPC semaphores take the field.</p>

<p>We can declare three semaphores: the first one will manage access to the buffer while the second and third will keep track of how many elements are in the buffer (later it will become clear why two semaphores are not sufficient).</p>

<p>Given that access to the buffer is exclusive the first semaphore will be a binary one (which value thus will be 0 or 1) while the second and the third will have values linked to the length of the buffer.</p>

<p>In C language the SysV primitive to create a semaphore is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">semget</span><span class="p">(</span><span class="n">key_t</span> <span class="n">key</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nsems</span><span class="p">,</span> <span class="kt">int</span> <span class="n">semflg</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <code>key</code> is an IPC key created with <code>ftok()</code>, <code>nsems</code> is the number of semaphores we want to create and <code>semflg</code> a set of flags controlling access to the semaphores. Access to IPC structures is ruled by a 12 bit system which is almost identical to the Unix file system access control, but we will not dive into it. As you can also notice <code>semget()</code> manages sets of semaphores, which helps us to keep the code compact.</p>

<p>Let&#8217;s review the full code to create a semaphore</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/ipc.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/sem.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">key_t</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">semid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">key</span> <span class="o">=</span> <span class="n">ftok</span><span class="p">(</span><span class="s">&quot;/etc/fstab&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* create a semaphore set with only 1 semaphore: */</span>
</span><span class='line'>  <span class="n">semid</span> <span class="o">=</span> <span class="n">semget</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mo">0666</span> <span class="o">|</span> <span class="n">IPC_CREAT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do not compile and execute it by now. As you can see from the <code>#include</code> statements, IPC structures are provided by the operating system itself and not by the standard C library. The key is created by passing to <code>ftok()</code> a file that certainly exists in the system and the PID of the current process. To know more about permission flags check the manual page for <code>semget()</code>.</p>

<p>Let&#8217;s go on learning to manage and remove semaphores; the primitive used to interact with a semaphore is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">semctl</span><span class="p">(</span><span class="kt">int</span> <span class="n">semid</span><span class="p">,</span> <span class="kt">int</span> <span class="n">semnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cmd</span><span class="p">,</span> <span class="p">...)</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <code>semid</code> is the semaphore set identifier returned from <code>semget()</code>, <code>semnum</code> the index of the semaphore inside the set and <code>cmd</code> the command you want to run. The value <code>semnum</code> is optional for some commands. Some commands need also an additional argument which type is <code>union semun</code>, defined as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">union</span> <span class="n">semun</span> <span class="p">{</span>
</span><span class='line'> <span class="kt">int</span> <span class="n">val</span><span class="p">;</span>                  <span class="cm">/* value for SETVAL */</span>
</span><span class='line'> <span class="k">struct</span> <span class="n">semid_ds</span> <span class="o">*</span><span class="n">buf</span><span class="p">;</span>     <span class="cm">/* buffer for IPC_STAT, IPC_SET */</span>
</span><span class='line'> <span class="kt">unsigned</span> <span class="kt">short</span> <span class="o">*</span><span class="n">array</span><span class="p">;</span>    <span class="cm">/* array for GETALL, SETALL */</span>
</span><span class='line'>                           <span class="cm">/* Linux specific part: */</span>
</span><span class='line'> <span class="k">struct</span> <span class="n">seminfo</span> <span class="o">*</span><span class="n">__buf</span><span class="p">;</span>    <span class="cm">/* buffer for IPC_INFO */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>To set the value of a semaphore the command is <code>SETVAL</code> and the value is specified through a <code>union semun</code> variable. To set the value of the first semaphore to 1 we modify the program this way</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/ipc.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/sem.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">key_t</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">semid</span><span class="p">;</span>
</span><span class='line'>  <span class="k">union</span> <span class="n">semun</span> <span class="n">arg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">key</span> <span class="o">=</span> <span class="n">ftok</span><span class="p">(</span><span class="s">&quot;/etc/fstab&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* create a semaphore set with only 1 semaphore: */</span>
</span><span class='line'>  <span class="n">semid</span> <span class="o">=</span> <span class="n">semget</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mo">0666</span> <span class="o">|</span> <span class="n">IPC_CREAT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">arg</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">semctl</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SETVAL</span><span class="p">,</span> <span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Last we have to cancel the semaphore releasing the structures needed for its management; this is done by the command <code>IPC_RMID</code>, which removes the semaphore and notifies all processes queued to access it that it has been removed. Let this notification aside for the moment and change the code to remove the semaphore</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/ipc.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/sem.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">key_t</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">semid</span><span class="p">;</span>
</span><span class='line'>  <span class="k">union</span> <span class="n">semun</span> <span class="n">arg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">key</span> <span class="o">=</span> <span class="n">ftok</span><span class="p">(</span><span class="s">&quot;/etc/fstab&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* create a semaphore set with only 1 semaphore: */</span>
</span><span class='line'>  <span class="n">semid</span> <span class="o">=</span> <span class="n">semget</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mo">0666</span> <span class="o">|</span> <span class="n">IPC_CREAT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">arg</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">semctl</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SETVAL</span><span class="p">,</span> <span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* deallocate semaphore */</span>
</span><span class='line'>  <span class="n">semctl</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">IPC_RMID</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can compile and run it. As you can imagine the program seems to do nothing: it just silently creates a semaphore, sets its value and removes it.</p>

<h2>Semaphores - part 2</h2>

<p>Time to use effectively the semaphore: the function that allows to performs operations on a semaphore is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">semop</span><span class="p">(</span><span class="kt">int</span> <span class="n">semid</span><span class="p">,</span> <span class="k">struct</span> <span class="n">sembuf</span> <span class="o">*</span><span class="n">sops</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="n">nsops</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <code>semid</code> is the set identifier, <code>sops</code> an array of operations and <code>nsops</code> the length of this latter. Each operation is declared through a <code>struct sembuf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">sembuf</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">ushort</span>  <span class="n">sem_num</span><span class="p">;</span>        <span class="cm">/* semaphore index in array */</span>
</span><span class='line'>             <span class="kt">short</span>   <span class="n">sem_op</span><span class="p">;</span>         <span class="cm">/* semaphore operation */</span>
</span><span class='line'>             <span class="kt">short</span>   <span class="n">sem_flg</span><span class="p">;</span>        <span class="cm">/* operation flags */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the time being we will always set <code>sem_flg</code> to 0. Operations are always integers and obey the following rules</p>

<ol>
<li><p><code>sem_op</code> &lt; 0 This signals that you want to decrease the semaphore value, or in other words lock one of the resources controlled by it. If the value of the semaphore can be decremented without becoming negative it will be and the process running <code>semop()</code> continues. Otherwise, the calling process falls in a sleep status until the semaphore has that number of resources available.</p></li>
<li><p><code>sem_op</code> = 0 This signals that you are waiting for the semaphore to reach value zero; that is the condition where no resources are available. The calling process falls in a sleep status until that moment.</p></li>
<li><p><code>sem_op</code> > 0 This signals that you want increase the semaphore value, or in other words release the given number of resources.</p></li>
</ol>


<p>Now we can write some code to implement the buffer example previously given. We are going to create 5 processes called W (writers) and a process called R (reader). Each W process tries to lock the resource (the buffer) through a semaphore, and if the buffer is not full, adds an element and releases the lock. The R process tries to lock the buffer, removes an element if available (buffer not empty) and releases the lock.</p>

<p>Since we did not yet talk about shared memory we have to simulate read and write operation, i.e. pretend the operation has been performed. This is necessary since each process has its own memory space and cannot access that of another process. So each process has its own copy of the buffer, and the copies are not linked each other. Later in this series we will talk about techniques that allow sharing memory regions between processes.</p>

<p>As already stated, we need 3 semaphores: the first acts as access controller and its maximum value is 1 while the other two manage overflow and underflow conditions. A single semaphore could not handle both conditions, since <code>semop()</code> acts one-way only.</p>

<p>Let&#8217;s clarify this latter statement before looking at the code. Say we have a single semaphore to manage over- and underflow conditions, with a value equal to the number of empty spaces in the buffer. Each time a W process fills the buffer it can decrease the semaphore value by one unit until the value reaches 0, which represents the condition of full buffer. This way however the empty buffer condition cannot be managed since the R process can increment the value of the semaphore without any limit. Semaphores, indeed, just control the lower boundary and not the upper one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/ipc.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/sem.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="cm">/* IPC structures */</span>
</span><span class='line'>  <span class="n">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>  <span class="n">key_t</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">semid</span><span class="p">;</span>
</span><span class='line'>  <span class="k">union</span> <span class="n">semun</span> <span class="n">arg</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sembuf</span> <span class="n">lock_res</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sembuf</span> <span class="n">rel_res</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sembuf</span> <span class="n">push</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">IPC_NOWAIT</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">IPC_NOWAIT</span><span class="p">};</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sembuf</span> <span class="n">pop</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">IPC_NOWAIT</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">IPC_NOWAIT</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">num_proc</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">num_write_actions</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">num_read_actions</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">){</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Usage: %s &lt;size&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">len</span> <span class="o">=</span> <span class="n">strtol</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">key</span> <span class="o">=</span> <span class="n">ftok</span><span class="p">(</span><span class="s">&quot;/etc/fstab&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Create a set with 3 semaphores */</span>
</span><span class='line'>  <span class="n">semid</span> <span class="o">=</span> <span class="n">semget</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mo">0666</span> <span class="o">|</span> <span class="n">IPC_CREAT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Initialize semaphore #0 to 1 - Resource controller */</span>
</span><span class='line'>  <span class="n">arg</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">semctl</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SETVAL</span><span class="p">,</span> <span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Initialize semaphore #1 to buf_length - Overflow controller */</span>
</span><span class='line'>  <span class="cm">/* Sem value represents free space in buffer */</span>
</span><span class='line'>  <span class="n">arg</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>  <span class="n">semctl</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">SETVAL</span><span class="p">,</span> <span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Initialize semaphore #2 to buf_length - Underflow controller */</span>
</span><span class='line'>  <span class="cm">/* Sem value represents the number of elements in buffer */</span>
</span><span class='line'>  <span class="n">arg</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">semctl</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">SETVAL</span><span class="p">,</span> <span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Fork */</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_proc</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pid</span><span class="p">){</span>
</span><span class='line'>      <span class="cm">/* Child process code*/</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">num_write_actions</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>  <span class="n">sleep</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">6</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Try to lock the buffer - sem #0 */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">semop</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lock_res</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>    <span class="n">perror</span><span class="p">(</span><span class="s">&quot;semop:lock_res (write)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Lock a free cell - sem #1 */</span>
</span><span class='line'>  <span class="cm">/* Push an element - sem #2 */</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">semop</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">push</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;---&gt; Child process %d: Element written</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;---&gt; Child process %d: BUFFER FULL</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Release the buffer */</span>
</span><span class='line'>  <span class="n">semop</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rel_res</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_read_actions</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">sleep</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Try to lock the buffer - sem #0 */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">semop</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lock_res</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;semop:lock_res (read)&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Unlock a free cell - sem #1 */</span>
</span><span class='line'>    <span class="cm">/* Pop an element - sem #2 */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">semop</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pop</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;&lt;--- Parent process %d: Element read</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;&lt;--- Parent process %d: BUFFER EMPTY</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Release the buffer */</span>
</span><span class='line'>    <span class="n">semop</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rel_res</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Destroy semaphores */</span>
</span><span class='line'>  <span class="n">semctl</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">IPC_RMID</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let us review the most interesting parts of the code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="k">struct</span> <span class="n">sembuf</span> <span class="n">lock_res</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sembuf</span> <span class="n">rel_res</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sembuf</span> <span class="n">push</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">IPC_NOWAIT</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">IPC_NOWAIT</span><span class="p">};</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sembuf</span> <span class="n">pop</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">IPC_NOWAIT</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">IPC_NOWAIT</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>These four lines of code declare the actions we will use later on the semaphore set. The first two are single actions while the second two are double ones. The first action, <code>lock_res</code>, is used to lock the buffer: as you can see the semaphore number 0 is decremented by 1 and in case of busy resource the strategy is waiting (the last 0 in the action). The second action releases the buffer and is the mirror image of the first one.</p>

<p>The third and fourth actions are specular too; each of them is an array of two actions, the first on the semaphore number 1 and the second on the semaphore number 2; while the first one is incremented the second is decremented and vice versa. The policy is changed from the first two actions: <code>IPC_NOWAIT</code> forces the process to continue execution, in contrast with the previous case, when the process was put on hold.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="cm">/* Initialize semaphore #0 to 1 - Resource controller */</span>
</span><span class='line'>  <span class="n">arg</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">semctl</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SETVAL</span><span class="p">,</span> <span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Initialize semaphore #1 to buf_length - Overflow controller */</span>
</span><span class='line'>  <span class="cm">/* Sem value represents free space in buffer */</span>
</span><span class='line'>  <span class="n">arg</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>  <span class="n">semctl</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">SETVAL</span><span class="p">,</span> <span class="n">arg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Initialize semaphore #2 to buf_length - Underflow controller */</span>
</span><span class='line'>  <span class="cm">/* Sem value represents the number of elements in buffer */</span>
</span><span class='line'>  <span class="n">arg</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">semctl</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">SETVAL</span><span class="p">,</span> <span class="n">arg</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, semaphores must be initialized: as already stated the first one is set to 1, being a binary access controller, the second to the length of the buffer as overflow controller and the third to 0 as underflow controller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Try to lock the buffer - sem #0 */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">semop</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lock_res</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>  <span class="n">perror</span><span class="p">(</span><span class="s">&quot;semop:lock_res (write)&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Lock a free cell - sem #1 */</span>
</span><span class='line'><span class="cm">/* Push an element - sem #2 */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">semop</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">push</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;---&gt; Child process %d: Element written</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;---&gt; Child process %d: BUFFER FULL</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Release the buffer */</span>
</span><span class='line'><span class="n">semop</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rel_res</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Child process code (a writer) tries first of all to lock the buffer using <code>lock_res</code>; once the control over the resource has been acquired it performs the <code>push</code> action and writes on the standard output a meaningful message. Otherwise, it signals that the buffer is full. The last action it performs is to release the resource through <code>rel_res</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Try to lock the buffer - sem #0 */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">semop</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lock_res</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>  <span class="n">perror</span><span class="p">(</span><span class="s">&quot;semop:lock_res (read)&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Unlock a free cell - sem #1 */</span>
</span><span class='line'><span class="cm">/* Pop an element - sem #2 */</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">semop</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pop</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;&lt;--- Parent process %d: Element read</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;&lt;--- Parent process %d: BUFFER EMPTY</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Release the buffer */</span>
</span><span class='line'><span class="n">semop</span><span class="p">(</span><span class="n">semid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rel_res</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can immediately notice parent process (reader) mimics the behaviour of the child. It lock the buffer, reads some data with the <code>pop</code> action and release the resource.</p>

<p>Try to change the parameters such as the buffer length (on the command line) or the number of cycles performed by parent and child processes to see what happens.</p>

<h2>Conclusions</h2>

<p>In the next article, we will introduce and deal with atomicity, which is a very important concept in concurrent programming and database systems. We will also introduce a new IPC structure, which has a broad use in distributed systems: message queues.</p>

<h2>Past articles</h2>

<p><a href="http://lgiordani.github.io/blog/2013/01/31/concurrent-programming-1">Concurrent Programming 1</a></p>

<p><a href="http://lgiordani.github.io/blog/2013/02/04/concurrent-programming-2">Concurrent Programming 2</a></p>

<p><a href="http://lgiordani.github.io/blog/2013/02/06/concurrent-programming-3">Concurrent Programming 3</a></p>

<h2>Next articles</h2>

<p><a href="http://lgiordani.github.io/blog/2013/02/28/concurrent-programming-5">Concurrent Programming 5</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrent programming - 3]]></title>
    <link href="http://lgiordani.github.io/blog/2013/02/06/concurrent-programming-3/"/>
    <updated>2013-02-06T12:25:00+01:00</updated>
    <id>http://lgiordani.github.io/blog/2013/02/06/concurrent-programming-3</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p>In the first article, we stepped into the world of multitasking, going over its meaning and the reasons behind its existence. In the second article, we met the fundamental fork operation and wrote our first multitasking code. In this article, we will go ahead and introduce ourselves in the topic of synchronization: the problem we face now indeed is to release the full power of multitasking, that is to share the work between processes.</p>

<p>In the first part of the article, I want to make a step back to the basics of multitasking to clarify the single/multiple CPU theme. Then we will start talking about shared data between processes, first looking at the problems arising and then writing some code.</p>

<!--more-->


<h2>Simultaneous execution</h2>

<p>We should never forget that the main reason behind multitasking on a single CPU is to give the impression of simultaneous execution, not to speed up execution.</p>

<p>Let&#8217;s clarify this statement. A single CPU can execute only one operation at a time, so running two processes means to run the first one for a little time, then switch to execute the second one and so on. As already stated, this interlacing operation is what we call multitasking, and it is clear that such a technique slows down the interlaced processes: since each of the two processes runs for half the time (the other half being spent by the other process), the result is a process that runs half the speed.</p>

<p>If you add to this that a switch operation does not come for free, because some time is spent by the operating system replacing the current process with the other one, you suddenly realize that multitasking is a double-edged sword: on one side, it gives us the chance to run multiple programs at the same time, on the other side, it slows down the execution of the whole system.</p>

<p>This issue can only be solved by using multiple CPUs or multiple cores (the two are not exactly the same), either on the same physical machine or on different ones.</p>

<p>So, if you are writing an algorithm to process an image in foreground, that is for a user that is waiting in front of the screen, you could split it profitably in many parts, each of which will process a tile of the whole image. This way the user could have a glance at the whole result while it is being computed. The same technique counts if, for example, you are computing statistics about a set of data: since some computations last longer than others you could split them among different processes so that the user can immediately obtain the faster ones.</p>

<p>If, on the contrary, you are writing code that runs in background without the user being there waiting for the results, you should never split it in different processes if you are working on a single CPU. That way you are just tangling up the code and wasting the CPU cycles to switch between processes without any real benefit.</p>

<h2>Working together</h2>

<p>Being our processes running at the very same time on different CPUs or just interlacing on a single one, a completely new set of problems arises if the two have to work on the same data.</p>

<p>Just imagine this very common scenario: two processes share a common storage area in memory where partial results of their computations can be temporarily saved. So each process writes data on the storage area, then runs computing other data and last loads previously saved data to finalize its work. What happens if, in the meantime, the second process wrote some of its temporary data  on the same area? The first process has no way to figure out that the loaded data is not correct, and this can lead to catastrophic results. The worst thing about such a bug, as quite always in the multitasking environment, is that such a problem can arise or not, depending on input, times, status of the running machine and so on. This class of problems is usually known as race condition and is one of the most subtle and dangerous bug forms since it is difficult to spot, to reproduce and sometimes to test automatically.</p>

<p>A little search about the Therac-25 accident (1987) can clearly exemplify the extent of the problem that such a bug can cause.</p>

<h2>Basic synchronization</h2>

<p>The simplest form of synchronization is waiting; that is, a process sits down until another process finishes running, then runs its own code. The system call that allows a process to wait for another to end is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pid_t</span> <span class="n">waitpid</span> <span class="p">(</span><span class="n">pid_t</span> <span class="n">PID</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">STATUS_PTR</span><span class="p">,</span> <span class="kt">int</span> <span class="n">OPTIONS</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>where <code>PID</code> is the PID of the process we are waiting for, <code>STATUS_PTR</code> a pointer to an integer which will contain the status of the child process (<code>NULL</code> if the information is not needed) and <code>OPTIONS</code> a set of options we have not to care about for now.</p>

<p>This is an example of a program in which the parent creates a child process and waits until it ends up</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-child-</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;+parent+ Waiting for the child to terminate...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">waitpid</span> <span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;+parent+ ...ended</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s save the code as <code>fork_demo3.c</code>, compile it and execute. The output I get from this program is the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./fork_demo3
</span><span class='line'>+parent+ Waiting <span class="k">for </span>the child to terminate...
</span><span class='line'>-child-
</span><span class='line'>-child-
</span><span class='line'>-child-
</span><span class='line'>-child-
</span><span class='line'>-child-
</span><span class='line'>-child-
</span><span class='line'>-child-
</span><span class='line'>-child-
</span><span class='line'>+parent+ ...ended
</span></code></pre></td></tr></table></div></figure>


<p>Looking at it you can realize a very important thing about <code>waitpid()</code>: it is a so-called <strong>blocking system call</strong>; that is something that keeps running until a certain condition is met. In this case, <code>waitpid()</code> keeps doing nothing until the child ends. So waiting is a blocking synchronization technique.</p>

<h2>Relationships</h2>

<p>Speaking about parents and children there are two more type of processes we can find in the system: <strong>orphans</strong> and <strong>zombies</strong>. A process is orphaned when the parent terminates while it is still running, according to the real meaning of the word orphan; in such a case the orphan process is adopted by <code>init</code>, the first process in the system, thus becoming one of its children.</p>

<p>Zombie processes, on the contrary, are already terminated, but they have not been waited by the parent. In other words, they are not running, but the operating system still holds their data to allow the parent to collect the exit status.</p>

<p>A simple demonstration of the zombie status can be done with the following code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-child-</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">14</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;+parent+</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save it as <code>zombie_demo.c</code>, compile and run. Just after the child has printed its string open another terminal and run <code>ps xa</code>. The last lines of your output will be something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> 4399 pts/1    S+     0:00 ./zombie_demo
</span><span class='line'> 4400 pts/1    Z+     0:00 <span class="o">[</span>zombie_demo<span class="o">]</span> &lt;defunct&gt;
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the first process listed is the parent, while the second, the child, is marked as defunct and its status is zombie (Z).</p>

<h2>Conclusion</h2>

<p>Multitasking is a fundamental technique, which must be however used with care; as any other technology, it cannot solve every problem, neither its introduction comes completely for free.</p>

<p>Synchronization between processes is something which must be carefully considered and implemented since errors in this field can lead to devious bugs.</p>

<p>Last you met two new types of processes, orphans and zombies, and learned why they can be found in the system.</p>

<p>In the next article, we will study some classical synchronization problems and introduce the basic InterProcess Communication (IPC) structures and techniques Unix systems make available to programmers.</p>

<h2>Past articles</h2>

<p><a href="http://lgiordani.github.io/blog/2013/01/31/concurrent-programming-1">Concurrent Programming 1</a></p>

<p><a href="http://lgiordani.github.io/blog/2013/02/04/concurrent-programming-2">Concurrent Programming 2</a></p>

<h2>Next articles</h2>

<p><a href="http://lgiordani.github.io/blog/2013/02/13/concurrent-programming-4">Concurrent Programming 4</a></p>

<p><a href="http://lgiordani.github.io/blog/2013/02/28/concurrent-programming-5">Concurrent Programming 5</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrent programming - 2]]></title>
    <link href="http://lgiordani.github.io/blog/2013/02/04/concurrent-programming-2/"/>
    <updated>2013-02-04T10:35:00+01:00</updated>
    <id>http://lgiordani.github.io/blog/2013/02/04/concurrent-programming-2</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p>In the past article I introduced the concept of process and how important it is for our operating system: in this new issue of the Concurrent Programming series we will go on and begin to write multitasking code; we will start from one of the basic concepts of the whole picture, the forking operation. Afterwards, we will start to introduce the problem of process synchronization and communication, which we will deeply face in a later instalment.</p>

<!--more-->


<h2>The C standard library</h2>

<p>The C standard library, nicknamed libc, is a collection of functions for the C language which has been standardized by ANSI and later by ISO. An implementation of it can be found in any major compiler or operating system, especially Unix-like ones.</p>

<p>In the GNU ecosystem, which Linux distributions are grounded on, the library is implemented by glibc (GNU libc). The library reached version 2.17 in December 2012 and is free software released under LGPL, a less restrictive version of the GPL which most notably allows the use of the library by non-GPL software, even proprietary one.</p>

<p>You can find and navigate glibc sources <a href="http://sourceware.org/git/?p=glibc.git;a=summary">here</a></p>

<h2>C language and PIDs</h2>

<p>Processes, like every resource in a computer, are managed by the kernel. This is a part of the operating system that runs continuously in background, exposing functions to other programs that allow them to obtain, manage and release resources such as memory, disk space and CPU time. One of the things the kernel exposes to the hosted programs is the process management, which stands for structures that represent the current status of processes in the system. Using the libc the programmer can easily access those structures in a read-only way.</p>

<p>Let us start with the simple concept of PID, the Process IDentifier we described in the past issue of this series. In the libc, the <code>pid_t</code> type is defined as an integer capable of containing a pid. To show this we will now take a little tour of the glibc source code: we will cover the whole path this time only, just to highlight both the chances given us by the source code and the complexity of a project like glibc.</p>

<p>We can find the initial definition of <code>pid_t</code> here</p>

<figure class='code'><figcaption><span>posix/sys/types.h</span><a href='http://sourceware.org/git/?p=glibc.git;a=blob;f=posix/sys/types.h;h=33c2176d0f0b38f1a81bf8c76d38f08d2ab38675;hb=HEAD'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef __pid_t_defined</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">__pid_t</span> <span class="n">pid_t</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define __pid_t_defined</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the definition of the type is protected by multiple header inclusion, as usual in the C world. The underlying <code>__pid_t</code> type is then defined here</p>

<figure class='code'><figcaption><span>bits/types.h</span><a href='http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/types.h;h=dc7b784f965749c44257bf030508d6642c07dec7;hb=HEAD'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define __STD_TYPE typedef</span>
</span><span class='line'><span class="cp">#define __S32_TYPE int</span>
</span><span class='line'><span class="n">__STD_TYPE</span> <span class="n">__PID_T_TYPE</span> <span class="n">__pid_t</span><span class="p">;</span> <span class="cm">/* Type of process identifications.  */</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that even the typedef keyword is defined by a macro (remember that the C preprocessor is a little more than a text macro replacement tool); this definition in particular avoids compiler warning when using the <code>long long</code> type which is not supported by all versions of the C standard. <code>S32</code> stands for “signed 32 bits” as you can read in the code documentation.</p>

<p>The last macro <code>__PID_T_TYPE</code> can be found here</p>

<figure class='code'><figcaption><span>bits/typesizes.h</span><a href='http://sourceware.org/git/?p=glibc.git;a=blob;f=bits/typesizes.h;h=8268b90276700a382db37331be1d8ef5a516403d;hb=HEAD'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define __PID_T_TYPE            __S32_TYPE</span>
</span></code></pre></td></tr></table></div></figure>


<p>The heavy use of defines and compiler features made by glibc code allows the library to be compiled on very different architectures.</p>

<h2>Telling the PID</h2>

<p>Let us now discover the function which give us the knowledge of the pid of the process containing our program</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pid_t</span> <span class="nf">getpid</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>which is defined with <code>pid_t</code> in <code>unistd.h</code> and <code>sys/types.h</code>. The libc simply uses the system call called <code>getpid</code> and its real implementation can be found in the kernel source</p>

<figure class='code'><figcaption><span>kernel/timer.c</span><a href='http://git.kernel.org/?p=linux/kernel/git/torvalds/linux.git;a=blob;f=kernel/timer.c;h=367d008584823a6fe01ed013cda8c3693fcfd761;hb=HEAD'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">SYSCALL_DEFINE0</span><span class="p">(</span><span class="n">getpid</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">task_tgid_vnr</span><span class="p">(</span><span class="n">current</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now write a program whose aim is to print on the standard output its own pid. With an editor of your choice write the following code</p>

<figure class='code'><figcaption><span>print_pid.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pid</span> <span class="o">=</span> <span class="n">getpid</span><span class="p">();</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;The pid assigned to the process is %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save the program as print_pid.c and compile it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gcc -o print_pid print_pid.c
</span></code></pre></td></tr></table></div></figure>


<p>If this operation returns errors make sure you installed gcc and libc headers; refer to your distribution knowledge base to solve this task.</p>

<p>The compiler will build an executable named <code>print_pid</code> (since the current directory is probably not in the system path you can run it with <code>./print_pid</code>). Executing the program we will have no great surprises: it prints out a positive number and if you executes it more than once this number will likely increase progressively; this is not mandatory, however, because another process could be created between two executions of <code>print_pid</code>. Try for example to execute <code>print_pid</code>, then <code>ps</code> and then <code>print_pid</code> again.</p>

<h2>Forking</h2>

<p>Now it is time to meet one of the most important concepts in the field of operating systems, that is the concept of forking.</p>

<p>Forking in general means that one thing splits in two and each part acts like an independent being. At the very moment of the split the two entities are the same, exactly the same, except for the fact that they live in two different spaces. This computer science concept can be retrieved in nature when a simple organism generates a clone of itself. After the cloning the two organisms are the exact copy, but they can be told apart since they are two things (the right one and the left one for example). Back to the operating system world we find the very same problem when a process forks; after the fork operation we have two processes with two different PIDs, but the two contain the same program at the same execution point.</p>

<p>So, when a program (running as process A) creates another process (B) the two are identical, that is they have the same code, the memory full of the same data (not the same memory, since the memory regions are different) and the same processor status. From this point on the two can continue in two different ways, just like our cloning organisms, for example depending on the user&#8217;s input or some other data. The process A is called the <strong>parent</strong> process while B is the <strong>child</strong> process; now you can begin to understand better the name <em>parent of all the processes</em> given to init. The function which creates a new process is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pid_t</span> <span class="n">fork</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The number returned is a pid, but it deserves a particular attention. We said that the first process duplicates itself splitting in a parent and a child, which will then execute interlacing themselves with the other running processes, doing different works; but immediately after the duplication which process will be executed, the parent or the child?</p>

<p>Well, the answer is as simple as unuseful: one of the two. The decision about which process has to be executed is taken by a part of the operating system called scheduler, and it pays no attention if a process is the parent or the child, following an algorithm based on other parameters.</p>

<p>If we are writing processes that implement a service (such as serving network connections) we need nothing more: the two processes are the same and they behave the same way, so by cloning the process we just incremented the number of service providers. This is usually done by Web servers such as Apache, which spawns a copy of itself to serve incoming connections.</p>

<h2>Parent and child</h2>

<p>Sometimes, anyway, it is fundamental to know what process is in execution: after the fork both processes are at the same execution point (that is just after the <code>fork()</code> call) so how can them tell if they are the parent or the child one?</p>

<p>In order to clarify this question let us look at the following algorithm:</p>

<ol>
<li>fork</li>
<li>if you are the child then execute &#8230;</li>
<li>if you are the parent then execute &#8230;</li>
</ol>


<p>which could represent in a sort of metalanguage the code of our program. The question can be expressed this way: “You have been cloned. Who are you, the original one or the clone?”</p>

<p>The answer is once again very simple: the <code>fork()</code> function returns 0 to the child process and the child&#8217;s PID to the parent. So it is enough to test if the returned PID is zero and we will know what process is executing the current code. Putting it in C language we obtain</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">code</span> <span class="n">of</span> <span class="n">the</span> <span class="n">child</span> <span class="n">process</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">code</span> <span class="n">of</span> <span class="n">the</span> <span class="n">parent</span> <span class="n">process</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s time to write the first real example of multitasking code: you can save it in a <code>fork_demo.c</code> file and compile it as we did before.</p>

<p>The program will fork itself, and both the parent and the child will write something on the screen; the final output will be the interlaced output of the two (if all goes right).</p>

<figure class='code'><figcaption><span>fork_demo.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-child-</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;+parent+</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lines number 01-03 contain the includes for the necessary libraries (standard I/O, multitasking).</p>

<p>The main function returns an integer (as always in GNU), which normally is zero if the program reached the end without errors or an error code if something goes wrong; let us state this time all will run without errors (we can later add some error control code, when the basic concepts will be clear).</p>

<p>Then we define the data type containing a pid (line 06) and an integer working as counter for loops (line 07). At line 09 we call <code>fork()</code> and it will return zero to the program executed in the child process and the pid of the child process to the parent; the test is at line 11. Now the code at lines 12-15 will be executed in the child process while the rest (lines 18-22) will be executed in the parent. Note that we omitted the <code>else</code> statement since the child code ends with a <code>return</code>; thus there is no way for the child to execute the code of the parent.</p>

<p>The two parts simply write 8 times on the standard output the string <code>-child-</code> or <code>+parent+</code>, depending on which process executes it, and then end returning 0. Executing the program will perhaps let you unsatisfied: the result is likely not to be a real mix between the two strings, and this due to the speed of execution of such a short loop. The scheduler runs the parent or the child for a quantum of time which is enough for the process to end the loop; thus probably your output will be a list of <code>+parent+</code> strings followed by a list of <code>-child-</code> ones, or the contrary.</p>

<p>To highlight the interlacing effect we can insert a random delay before each <code>printf()</code> call: we can do this with <code>sleep()</code> and <code>rand()</code> functions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">sleep</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>this make the program sleep for a random number of seconds between 0 and 3. Now the child code looks like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>  <span class="n">sleep</span> <span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-child-</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the same for the parent&#8217;s code. Save it as <code>fork_demo2.c</code>, compile and execute. It is slower now, and we notice a difference in the output string order, and more differences between an execution and the previous one. For example my output is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./fork_demo2
</span><span class='line'>-child-
</span><span class='line'>+parent+
</span><span class='line'>+parent+
</span><span class='line'>-child-
</span><span class='line'>-child-
</span><span class='line'>+parent+
</span><span class='line'>+parent+
</span><span class='line'>-child-
</span><span class='line'>-child-
</span><span class='line'>+parent+
</span><span class='line'>+parent+
</span><span class='line'>-child-
</span><span class='line'>-child-
</span><span class='line'>-child-
</span><span class='line'>+parent+
</span><span class='line'>+parent+
</span></code></pre></td></tr></table></div></figure>


<p>As always when dealing with multitasking code, your output is probably different from mine and will also be different between consecutive executions. Try also to change the parameters of the program, such as the sleep time or the number of loops.</p>

<h2>Why forking</h2>

<p>Thinking carefully about the parent and child example a question arises: why should I write code that forks, with all the intricacies it entails, when I could simply write two different programs and run them, letting the operating system to deal with their simultaneous execution?</p>

<p>This is a very interesting question, and the answer is very simple, though the underlying concept is rather complex. When you run a program the shell or the GUI follows a pattern called <strong>fork-and-exec</strong>: first it forks, then the child process executes the desired program. The reason of this behaviour is that the <code>exec</code> family of system calls replace the running program with a new program but do not change the PID. So the tasks are divided between system calls: <code>fork</code> creates a new process while <code>exec</code> loads the given program into the newly created process.</p>

<h2>DOS and Windows</h2>

<p>Operating systems of the DOS and Windows family do not provide a <code>fork</code> mechanism but a <code>spawn</code> family of system calls, which directly implement the fork-and-exec technique; this is a good example of the different implementation OSs make of common computer science concepts: while both implement multitasking and let many processes run concurrently, the way this target is reached can vary significantly.</p>

<h2>Conclusion</h2>

<p>Starting from the knowledge of processes you stepped into the fundamental Unix concept of forking, learning to tell apart parent and child processes and running your first multitasking-based program. You also started to understand how complex can some operating system issues be, and that real world OSs can provide very different solutions to them.</p>

<p>In the next article we will start to look after processes synchronization and data sharing between processes.</p>

<h2>Past articles</h2>

<p><a href="http://lgiordani.github.io/blog/2013/01/31/concurrent-programming-1">Concurrent Programming 1</a></p>

<h2>Next articles</h2>

<p><a href="http://lgiordani.github.io/blog/2013/02/06/concurrent-programming-3">Concurrent Programming 3</a></p>

<p><a href="http://lgiordani.github.io/blog/2013/02/28/concurrent-programming-5">Concurrent Programming 5</a></p>

<p><a href="http://lgiordani.github.io/blog/2013/02/13/concurrent-programming-4">Concurrent Programming 4</a></p>
]]></content>
  </entry>
  
</feed>
