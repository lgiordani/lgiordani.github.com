<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Digital Cat</title><link href="http://lgiordani.com/" rel="alternate"></link><link href="http://lgiordani.com/categories/django/atom.xml" rel="self"></link><id>http://lgiordani.com/</id><updated>2014-02-14T16:13:41+01:00</updated><entry><title>"Digging up Django class-based views - 3"</title><link href="http://lgiordani.com/blog/2014/02/14/digging-up-django-class-based-views-3/" rel="alternate"></link><updated>2014-02-14T16:13:41+01:00</updated><author><name>Leonardo Giordani</name></author><id>tag:lgiordani.com,2014-02-14:blog/2014/02/14/digging-up-django-class-based-views-3/</id><summary type="html">&lt;p&gt;&lt;em&gt;This post refers to Django 1.5. Please be warned that some of the matters discussed here, some solutions or the given code can be outdated by more recent Django versions&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the first two issues of this short series we wandered around the basic concepts of class-based views in Django, and started understanding and using two of the basic generic views Django makes available to you: &lt;code&gt;ListView&lt;/code&gt; and &lt;code&gt;DetailView&lt;/code&gt;. Both are views that read some data from the database and show them on a rendered template.&lt;/p&gt;
&lt;p&gt;This third issue wants to introduce the reader to the class-based version of Django forms. This post is not meant to be a full introduction to the Django form library; rather, I want to show how class-based generic views implement the CUD part of the CRUD operations (Create, Read, Update, Delete), the Read one being implemented by "standard" generic views.&lt;/p&gt;
&lt;h2&gt;A very basic example&lt;/h2&gt;
&lt;p&gt;To start working with CBFs (class-based forms) let's say we are working with a &lt;code&gt;StickyNote&lt;/code&gt; class which represents a simple text note with a date:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StickyNote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One of the first things we usually want to do is to build a form that allows the user to create a new entry in the database, in this case a new sticky note. The functional version of such a form would be the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;note_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StickyNoteForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;new_note&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;new_note&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;note_add.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^note_add/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;note_add&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is not too complex to grasp. Note that I left aside some imports; the &lt;code&gt;StickNoteForm&lt;/code&gt; class is built using a &lt;a href="https://docs.djangoproject.com/en/1.5/topics/forms/modelforms/"&gt;model form&lt;/a&gt;. Since you &lt;a href="https://docs.djangoproject.com/en/1.5/topics/forms/"&gt;already know&lt;/a&gt; how functional form views work, let's compare it with the same view expressed with a class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NoteAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CreateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StickyNote&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is no surprise that most of the code went away, thanks to inheritance. As happened in the first two posts with standard views, the class mechanism provides us with a bunch of code that lives somewhere in the class hierarchy and works behind the scenes. Our mission is now to uncover that code to figure out how exactly CBFs work and how we can change them to perform what we need.&lt;/p&gt;
&lt;p&gt;To make the post easier to follow, please always remember that "class-based form" is a short name for "class-based form view". That is, CBFs are views, so their job is to process incoming HTTP requests and return a HTTP response. Form views do this in a slightly different way than the standard ones, mostly due to the different nature of POST requests compared with GET ones. Let us take a look at this concept before moving on.&lt;/p&gt;
&lt;h2&gt;HTTP requests: GET and POST&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Please note that this is a broad subject and that the present section wants only to be a very quick review of the main concepts that are related to Django CBFs&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;HTTP requests come in different forms, depending on the &lt;strong&gt;method&lt;/strong&gt; they carry. Those methods are called &lt;strong&gt;HTTP verbs&lt;/strong&gt; and the two most used ones are &lt;strong&gt;GET&lt;/strong&gt; and &lt;strong&gt;POST&lt;/strong&gt;. The GET method tells the server that the client wants to retrieve a resource (the one connected with the relative URL) and shall have no side effects (such as changing the resource). The POST method is used to send some data to the server, the given URL being the &lt;em&gt;resource&lt;/em&gt; that shall handle the data.&lt;/p&gt;
&lt;p&gt;As you can see, the definition of POST is very broad: the server accepts the incoming data and is allowed to perform any type of action with it, such as creating a new entity, editing or deleting one or more of them, and so on.&lt;/p&gt;
&lt;p&gt;Keep in mind that forms are not the same thing as POST request. As a matter of fact, they are connected just incidentally: a form is a way to collect data from a user browsing a HTML page while POST is the way that data is transmitted to the server. You do not need to have a form to make a POST request, you just need some data to send. HTML forms are just a useful way to send POST requests, but not the only one.&lt;/p&gt;
&lt;h2&gt;Form views&lt;/h2&gt;
&lt;p&gt;Why are form views different from standard views? The answer can be found looking at the flow of a typical data submission on a Web site:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The user browses a web page (GET)&lt;/li&gt;
&lt;li&gt;The server answers the GET request with a page containing a form&lt;/li&gt;
&lt;li&gt;The user fills the form and submits it (POST)&lt;/li&gt;
&lt;li&gt;The server receives and processes data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can see the procedure involves a double interaction with the server: the first request GETs the page, the second POSTs the data. So you need to build a view that answers the GET request and a view that answers the POST one.&lt;/p&gt;
&lt;p&gt;Since most of the time the URL we use to POST data is the same URL we used to GET the page, we need to build a view that accepts both methods. This is the main reason of the pattern you are used to see in functional form views in Django. &lt;a href="https://docs.djangoproject.com/en/1.5/topics/forms/"&gt;The official Django documentation&lt;/a&gt; on the subject uses this snippet of code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c"&gt;# If the form has been submitted...&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ContactForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# A form bound to the POST data&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="c"&gt;# All validation rules pass&lt;/span&gt;
            &lt;span class="c"&gt;# Process the data in form.cleaned_data&lt;/span&gt;
            &lt;span class="c"&gt;# ...&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/thanks/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# Redirect after POST&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ContactForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# An unbound form&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;contact.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the first conditional path deals with the data submission (POST) while the else part deals with the usual case of a GET request.&lt;/p&gt;
&lt;p&gt;Now it is time to dig into the class-based forms that Django provides us to understand how they deal with this double interaction.&lt;/p&gt;
&lt;p&gt;Let us start with the &lt;code&gt;CreateView&lt;/code&gt; class we used in our simple example, which is defined in &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L202"&gt;views/generic/edit.py#202&lt;/a&gt;. It is an almost empty class that inherits from &lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt; and from &lt;code&gt;BaseCreateView&lt;/code&gt;. The first class deals with the template selected to render the response and we can leave it aside for the moment. The second class, on the other hand, can be found a couple of lines above, at &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L187"&gt;views/generic/edit.py#L187&lt;/a&gt;, and implements two methods which names are self explaining, &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;post()&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Processing GET and POST requests&lt;/h4&gt;
&lt;p&gt;We already met the &lt;code&gt;get()&lt;/code&gt; method in the &lt;a href="/blog/2013/12/11/digging-up-django-class-based-views-2"&gt;past article&lt;/a&gt; when we talked about the &lt;code&gt;dispatch()&lt;/code&gt; method of the &lt;code&gt;View&lt;/code&gt; class. A quick recap of its purpose: this method is called when the incoming HTTP request carries the GET verb and is used to process the request itself. Not surprisingly, the &lt;code&gt;post()&lt;/code&gt; method is called when the incoming request is a POST one. The two methods are already defined by an ancestor of the &lt;code&gt;BaseCreateView&lt;/code&gt; class, namely &lt;code&gt;ProcessFormView&lt;/code&gt; (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L145"&gt;views/generic/edit.py#L145&lt;/a&gt;). It is useful to take a peek at the source code of this last class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProcessFormView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    A mixin that renders a form on GET and processes it on POST.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Handles GET requests and instantiates a blank version of the form.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_form_class&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Handles POST requests, instantiating a form instance with the passed&lt;/span&gt;
&lt;span class="sd"&gt;        POST variables and then checked for validity.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_form_class&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_form&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form_invalid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the two methods are pretty straightforward. They both retrieve the class of the form with &lt;code&gt;get_form_class()&lt;/code&gt; and instance it with &lt;code&gt;get_form()&lt;/code&gt; (more on them later). The &lt;code&gt;get()&lt;/code&gt; method then just calls the &lt;code&gt;render_to_response()&lt;/code&gt; method to render a template, passing the context produced by the &lt;code&gt;get_context_data()&lt;/code&gt; method. Note that the context receives the form as built by the &lt;code&gt;get_form()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;post()&lt;/code&gt; method does not directly render the template since it has to process incoming data before doing this last step. Instead the validation of the form is performed through its &lt;code&gt;is_valid()&lt;/code&gt; method and the two methods &lt;code&gt;form_valid()&lt;/code&gt; and &lt;code&gt;form_invalid()&lt;/code&gt; are called depending on the result of the test. See the &lt;a href="https://docs.djangoproject.com/en/1.5/ref/forms/validation/"&gt;official documentation&lt;/a&gt; for more information about form validation.&lt;/p&gt;
&lt;p&gt;Please note that the behaviour of these classes follows the same pattern of that used in &lt;code&gt;ListView&lt;/code&gt; and &lt;code&gt;DetailView&lt;/code&gt; as described in the previous two posts.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ProcessFormView&lt;/code&gt; class inherits from &lt;code&gt;View&lt;/code&gt;, which was already described in depth in the first two posts of this series; there you can find the &lt;code&gt;as_view()&lt;/code&gt; and &lt;code&gt;dispatch()&lt;/code&gt; method that are the foundation of the CBVs system.&lt;/p&gt;
&lt;h2&gt;The form workflow - part I&lt;/h2&gt;
&lt;p&gt;The inheritance path that starts with &lt;code&gt;ProcessFormView&lt;/code&gt; spans all the classes that deal with the incoming request, telling GET and POST methods apart. The second inheritance path we can follow from &lt;code&gt;BaseCreateView&lt;/code&gt; leads to &lt;code&gt;ModelFormMixin&lt;/code&gt;, which is defined at &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L75"&gt;views/generic/edit.py#L75&lt;/a&gt;. This path contains the classes that implement the form management methods. The first two methods that deal with the form are &lt;code&gt;get_form_class()&lt;/code&gt; and &lt;code&gt;get_form()&lt;/code&gt; that we encountered when discussing the &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;post()&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;get_form_class()&lt;/code&gt; tries to get the form model from the &lt;code&gt;self.form_class&lt;/code&gt; attribute, and if this is not defined tries to extract the model from the &lt;code&gt;self.model&lt;/code&gt; or from the queryset. Then it returns a suitable modelform, using a factory defined in &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/forms/models.py"&gt;forms/models.py&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;get_form()&lt;/code&gt; method is defined in &lt;code&gt;FormMixin&lt;/code&gt; (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L10"&gt;views/generic/edit.py#L10&lt;/a&gt;) and instances the form class with the keywords returned by &lt;code&gt;get_form_kwargs()&lt;/code&gt;, implemented in &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L100"&gt;views/generic/edit.py#L100&lt;/a&gt;. This last method is quite important as we are going to discover in a short while, since it has a big role in the double interaction that happens with POST requests.&lt;/p&gt;
&lt;p&gt;The first implementation of the &lt;code&gt;get_form_kwargs()&lt;/code&gt; method that we find in the ancestors tree is in &lt;code&gt;ModelFormMixin&lt;/code&gt; (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L100"&gt;views/generic/edit.py#L100&lt;/a&gt;), but this immediately calls the same method defined in &lt;code&gt;FormMixin&lt;/code&gt; (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L10"&gt;views/generic/edit.py#L10&lt;/a&gt;). The code is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_form_kwargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;initial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_initial&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;PUT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;files&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FILES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first value of the form keywords dictionary is the copy of the &lt;code&gt;self.initial&lt;/code&gt; dictionary, returned by &lt;code&gt;get_initial()&lt;/code&gt; as stated by &lt;a href="https://docs.djangoproject.com/en/1.5/ref/forms/api/#dynamic-initial-values"&gt;the official documentation&lt;/a&gt;. Then, if the method of the request being processed is POST or PUT, the keywords are updated with the content of the request itself, i.e. posted data and uploaded files. This is used to initialize the form object itself as you can see at &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/forms/forms.py#L77"&gt;forms/forms.py#L77&lt;/a&gt;, and I am going to describe this mechanism later.&lt;/p&gt;
&lt;p&gt;After this method returns its dictionary, the execution continues in &lt;code&gt;ModelFormMixin&lt;/code&gt;. The code of that method is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_form_kwargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ModelFormMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_form_kwargs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;instance&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;that just adds &lt;code&gt;self.object&lt;/code&gt; under the &lt;code&gt;instance&lt;/code&gt; key of the keywords dictionary. We already met &lt;code&gt;self.object&lt;/code&gt; when discussing &lt;code&gt;DetailView&lt;/code&gt;, where it contained the result of the queryset, i.e. the object being shown by the view.&lt;/p&gt;
&lt;p&gt;What is &lt;code&gt;self.object&lt;/code&gt; now? Among the ancestors of our &lt;code&gt;CreateView&lt;/code&gt; class, &lt;code&gt;BaseCreateView&lt;/code&gt; defines &lt;code&gt;self.object&lt;/code&gt; as &lt;code&gt;None&lt;/code&gt; so for the moment we can leave it aside. It will come to the rescue later, when we will discuss update and deletion forms, so do not forget it.&lt;/p&gt;
&lt;p&gt;The last things we find in the &lt;code&gt;get()&lt;/code&gt; method, just after &lt;code&gt;get_form_class()&lt;/code&gt; and &lt;code&gt;get_form()&lt;/code&gt;, is &lt;code&gt;get_context_data()&lt;/code&gt;. As happened in &lt;code&gt;ListView&lt;/code&gt; and &lt;code&gt;DetailView&lt;/code&gt;, this method builds a dictionary (the context) that is used to render a template. You can find the implementation of &lt;code&gt;get_context_data()&lt;/code&gt; at &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L130"&gt;views/generic/edit.py#L130&lt;/a&gt;. As you can see, since &lt;code&gt;self.object&lt;/code&gt; has been set to &lt;code&gt;None&lt;/code&gt;, the context contains only the instanced form under the &lt;code&gt;form&lt;/code&gt; keyword (inserted at &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L155"&gt;views/generic/edit.py#L155&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Let's recap the process until here.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The URL dispatcher requests with GET a page containing a form.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;get()&lt;/code&gt; method of &lt;code&gt;ProcessFormView&lt;/code&gt; finds the form class of choice through &lt;code&gt;get_form_class()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The form class is instanced by &lt;code&gt;get_form()&lt;/code&gt; with the values contained in the &lt;code&gt;self.initial&lt;/code&gt; dictionary&lt;/li&gt;
&lt;li&gt;At this point a template is rendered with a context returned by &lt;code&gt;get_context_data()&lt;/code&gt; as usual. The context contains the form.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The form workflow - part II&lt;/h2&gt;
&lt;p&gt;Now the user obtained the requested page and is facing an empty form. Once the form has been filled, he or she clicks the submit button and a new HTTP request reaches the server, this time carrying the POST method and a set of data taken from the input fields of the form itself. Our view shall now handle the second interaction step, the one that in functional views is usually managed by the part starting with &lt;code&gt;if request.method == 'POST':&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As we already know, the incoming request is processed by the &lt;code&gt;post()&lt;/code&gt; method of &lt;code&gt;ProcessFormView&lt;/code&gt;, which works like the &lt;code&gt;get()&lt;/code&gt; method in its first part, calling &lt;code&gt;get_form_class()&lt;/code&gt; and &lt;code&gt;get_form()&lt;/code&gt;. This latter method now deals with a POST request, so the code of &lt;code&gt;get_form_kwargs()&lt;/code&gt; in &lt;code&gt;FormMixin&lt;/code&gt; (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L10"&gt;views/generic/edit.py#L10&lt;/a&gt;) adds to the keywords dictionary the submitted data with the &lt;code&gt;data&lt;/code&gt; key and the uploaded files under the &lt;code&gt;files&lt;/code&gt; key. Why does Django do this? Well, as you can see at &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/forms/forms.py#L77"&gt;forms/forms.py#L77&lt;/a&gt; a Django form can be instanced with an optional &lt;code&gt;data&lt;/code&gt; keyword, which is stored inside the form object for the subsequent validation phase.&lt;/p&gt;
&lt;p&gt;So now the form is bound (that is, it contains some data or files - see &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/forms/forms.py#L80"&gt;forms/forms.py#L80&lt;/a&gt;). The &lt;code&gt;post()&lt;/code&gt; method now tests the result of &lt;code&gt;is_valid()&lt;/code&gt; and acts accordingly calling either &lt;code&gt;form_valid()&lt;/code&gt; or &lt;code&gt;form_invalid()&lt;/code&gt;. Pay attention that, while &lt;code&gt;is_valid()&lt;/code&gt; is a method of the form itself, the two latter methods belong to the &lt;code&gt;BaseCreateView&lt;/code&gt;, defined by the same ancestor classes that implement &lt;code&gt;get_form_kwargs()&lt;/code&gt;, &lt;code&gt;ModelFormMixin&lt;/code&gt; and &lt;code&gt;FormMixin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The former class implements it at &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L123"&gt;views/generic/edit.py#L123&lt;/a&gt; and puts the result of &lt;code&gt;form.save()&lt;/code&gt; into &lt;code&gt;self.object&lt;/code&gt;. Remember that &lt;code&gt;self.object&lt;/code&gt; is appended to the context under the &lt;code&gt;object&lt;/code&gt; key by the &lt;code&gt;get_context_data()&lt;/code&gt; method, as shown in the previous section. The &lt;code&gt;form.save()&lt;/code&gt; method for modelforms is defined by &lt;code&gt;BaseModelForm&lt;/code&gt; at &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/forms/models.py#L357"&gt;forms/models.py#L357&lt;/a&gt; and basically saves the instance of the Django model connected with the modelform, that is implements the actual creation at the base of the &lt;code&gt;CreateView&lt;/code&gt; form view. As &lt;code&gt;form.save()&lt;/code&gt; returns the object saved to the database, it makes sense to store it in &lt;code&gt;self.object&lt;/code&gt; and pass it to the template.&lt;/p&gt;
&lt;p&gt;The execution of &lt;code&gt;form_valid()&lt;/code&gt; continues with the implementation in the &lt;code&gt;FormMixin&lt;/code&gt; class at &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L61"&gt;views/generic/edit.py#L61&lt;/a&gt;. This method returns a &lt;code&gt;HttpResponseRedirect&lt;/code&gt; object, which is the way you make the browser point to the given URL in Django. In this case the URL is given by &lt;code&gt;self.get_success_url()&lt;/code&gt; which tries to return &lt;code&gt;self.success_url&lt;/code&gt; if defined, otherwise returns the result of &lt;code&gt;get_absolute_url()&lt;/code&gt; for the fresh-made object.&lt;/p&gt;
&lt;p&gt;On the other hand, &lt;code&gt;form_invalid()&lt;/code&gt; at &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L67"&gt;views/generic/edit.py#L67&lt;/a&gt; deals with the case of a form containing some errors and simply calls &lt;code&gt;render_to_response()&lt;/code&gt; passing it the context with the compiled form under the &lt;code&gt;form&lt;/code&gt; key.&lt;/p&gt;
&lt;h2&gt;Update and Delete operations&lt;/h2&gt;
&lt;p&gt;This rather rich code tour unveiled the inner mechanism of the &lt;code&gt;CreateView&lt;/code&gt; class, which can be used to create a new object in the database. The &lt;code&gt;UpdateView&lt;/code&gt; and &lt;code&gt;DeleteView&lt;/code&gt; classes follow a similar path, with minor changes to perform the different action they are implementing.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UpdateView&lt;/code&gt; wants to show the form already filled with values, so it instances &lt;code&gt;self.object&lt;/code&gt; before processing the request (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L210"&gt;views/generic/edit.py#L210&lt;/a&gt;). This makes the object available in the keywords dictionary under the &lt;code&gt;instance&lt;/code&gt; key (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L105"&gt;views/generic/edit.py#L105&lt;/a&gt;), which is used by modelforms to initialize the data (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/forms/models.py#L244"&gt;forms/models.py#L244&lt;/a&gt;). The &lt;code&gt;form.save()&lt;/code&gt; method of &lt;code&gt;BaseModelForm&lt;/code&gt; is smart enough to understand if the object has been created or just changed (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/forms/models.py#L365"&gt;forms/models.py#L365&lt;/a&gt; so the &lt;code&gt;post()&lt;/code&gt; method of &lt;code&gt;UpdateView&lt;/code&gt; works just like the one of &lt;code&gt;CreateView&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DeleteView&lt;/code&gt; is a bit different from &lt;code&gt;CreateView&lt;/code&gt; and &lt;code&gt;UpdateView&lt;/code&gt;. As &lt;a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/generic-editing/#deleteview"&gt;the official documentation&lt;/a&gt; states, if called with a GET method it shows a confirmation page that POSTs to the same URL. So, as for the GET requests, &lt;code&gt;DeleteView&lt;/code&gt; just uses the &lt;code&gt;get()&lt;/code&gt; method defined by its ancestor &lt;code&gt;BaseDetailView&lt;/code&gt; (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/detail.py#L103"&gt;views/generic/detail.py#L103&lt;/a&gt;), which renders the template putting the object in the context. When called with a POST request, the view uses the &lt;code&gt;post()&lt;/code&gt; method defined by &lt;code&gt;DeletionMixin&lt;/code&gt; (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L233"&gt;views/generic/edit.py#L233&lt;/a&gt;, which in turn just calls the &lt;code&gt;delete()&lt;/code&gt; method of the same class (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L239"&gt;views/generic/edit.py#L239&lt;/a&gt;). This performs the deletion on the database and redirects to the success URL.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As you can see, the structure behind the current implementation of Django class-based form views is rather complex. This allows the user to achieve complex behaviours like the CUD operations just by defining a couple of classes as I did in the simple example at the beginning of the post. Most of the time, however, such a simplification makes it difficult for the programmer to understand how to achieve the desired changes to the class behaviour. So the purpose of this big tour I made inside the Django source code was to give an insight of what methods are called in the lifetime of your HTTP request so that you can better identify what methods you need to override.&lt;/p&gt;
&lt;p&gt;When performing special actions that fall outside the standard CUD operations you better inherit from &lt;code&gt;FormView&lt;/code&gt; (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/edit.py#L181"&gt;views/generic/edit.py#L181&lt;/a&gt;). The first thing to do is to check if and how you need to customize the &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;post()&lt;/code&gt; methods; remember that you either need to implement the full behaviour of those methods or make you changes and call the parent implementation. If this is not enough for your application consider overriding one of the more dedicated methods, such as &lt;code&gt;get_form_kwargs()&lt;/code&gt; or &lt;code&gt;form_valid()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This post ends the series "Digging Up Django Class-based Views". Stay tuned for other &lt;a href="/categories/django/"&gt;upcoming articles on Django&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Feel free to use &lt;a href="https://plus.google.com/u/0/b/110554719587236016835/110554719587236016835/posts"&gt;the blog Google+ page&lt;/a&gt; to comment the post or to ask for an in-depth analysis of some topic. The &lt;a href="https://github.com/lgiordani/lgiordani.github.com/issues"&gt;GitHub issues&lt;/a&gt; page is the best place to submit corrections.&lt;/p&gt;
&lt;h2&gt;Previous articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/blog/2013/10/28/digging-up-django-class-based-views-1"&gt;Digging Up Django Class-based Views - 1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/blog/2013/12/11/digging-up-django-class-based-views-2"&gt;Digging Up Django Class-based Views - 2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Django"></category></entry><entry><title>"Digging up Django class-based views - 2"</title><link href="http://lgiordani.com/blog/2013/12/11/digging-up-django-class-based-views-2/" rel="alternate"></link><updated>2013-12-11T09:00:00+02:00</updated><author><name>Leonardo Giordani</name></author><id>tag:lgiordani.com,2013-12-11:blog/2013/12/11/digging-up-django-class-based-views-2/</id><summary type="html">&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;This post refers to Django 1.5. Please be warned that some of the matters discussed here, some solutions or the given code can be outdated by more recent Django versions&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the first installment of this short series, I introduced the theory behind Django class-based views and the reason why in this context classes are more powerful than pure functions. I also introduced one of the generic views Django provides out-of-the-box, which is &lt;code&gt;ListView&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this second post I want to talk about the second most used generic view, &lt;code&gt;DetailView&lt;/code&gt;, and about custom querysets and arguments. Last, I'm going to introduce unspecialized class-based views that allow you to build more complex Web pages. To fully understand &lt;code&gt;DetailView&lt;/code&gt;, however, you need to grasp two essential concepts, namely &lt;strong&gt;querysets&lt;/strong&gt; and &lt;strong&gt;view parameters&lt;/strong&gt;. So I'm sorry for the learn-by-doing readers, but this time too I'm going to start with some pure programming topics.&lt;/p&gt;
&lt;h2&gt;QuerySets or the art of extracting information&lt;/h2&gt;
&lt;p&gt;One of the most important parts of Django is the ORM (Object Relational Mapper), which allows you to access the underlying database just like a collection of Python objects. As you know, Django provides you tools to simplify the construction of DB queries; they are &lt;strong&gt;managers&lt;/strong&gt; (the &lt;code&gt;.objects&lt;/code&gt; attribute of any models, for example) and &lt;strong&gt;query methods&lt;/strong&gt; (&lt;code&gt;get()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, and friends). Pay attention because things here are slightly more magical than you can think at a first glance.&lt;/p&gt;
&lt;p&gt;When you use one of the methods of a manager you get as a result a &lt;code&gt;QuerySet&lt;/code&gt;, which most of the time is used as a list, but is more than this. You can find &lt;a href="https://docs.djangoproject.com/en/1.5/topics/db/queries/"&gt;here&lt;/a&gt; and &lt;a href="https://docs.djangoproject.com/en/1.5/ref/models/querysets/"&gt;here&lt;/a&gt; the official documentation about queries and QuerySets, a very recommended reading.&lt;/p&gt;
&lt;p&gt;What I want to stress here is that QuesySets are not evaluated until you perform an action that access the content like slicing or iterating on it. This means that we can build QuerySets, pass them to functions, store them, and even build them programmatically or metaprogramming them without the DB being hit. If you think at QuerySets as recipes you are not far from the truth: they are objects that store how you want to retrieve the data of your interest. Actually retriving them is another part of the game. This separation between the definition of something and its execution is called &lt;strong&gt;lazy evaluation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let me give you a very trivial example to show why the lazy evaluation of QuerySets is important.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_oldest_three&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;old_books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_oldest_three&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;old_hardcover_books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
    &lt;span class="n"&gt;get_oldest_three&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type=Book.HARDCOVER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the &lt;code&gt;get_oldest_three()&lt;/code&gt; method is just filtering an incoming QuerySet (which can be of any type); it simply orders the objects and gets the first three inserted in the DB. The important thing here is that we are using QuerySets like pure 'algorithms', or descriptions of a procedure. When creating the &lt;code&gt;old_books&lt;/code&gt; variable we are just telling the &lt;code&gt;get_oldest_three()&lt;/code&gt; method "Hey, this is the way I extract the data I'm interested in. May you please refine it and return the actual data?"&lt;/p&gt;
&lt;p&gt;Being such flexible objects, QuerySets are an important part of generic views, so keep them warm for the upcoming banquet.&lt;/p&gt;
&lt;h2&gt;Being flexible: parametric views&lt;/h2&gt;
&lt;p&gt;URLs are the API of our Web site or service. This can be more or less evident for the user that browses through the pages, but from the programmer's point of view URLs are the entry points of a computer system. As such, they are not very different from the API of a library: here, static pages are just like constants, or functions that always return that same value (such as a configuration parameter), while dynamic pages are like functions that process incoming data (parameters) and return a result.&lt;/p&gt;
&lt;p&gt;So Web URLs can accept parameters, and our underlying view shall do the same. You basically have three methods to convey parameters from the user's browser to your server using HTTP. The first method is named &lt;a href="http://en.wikipedia.org/wiki/Query_string"&gt;query string&lt;/a&gt; and lists parameters directly in the URL through a universal syntax. The second method is storing parameters in the HTTP request body, which is what POST requests do. We will discuss this method in a later post about forms.&lt;/p&gt;
&lt;p&gt;The first method has one big drawback: most of the time URLs are long (and sometimes &lt;em&gt;too&lt;/em&gt; long), and difficult to use as a real API. To soften this effect the concept of &lt;a href="http://en.wikipedia.org/wiki/Clean_URL"&gt;clean URL&lt;/a&gt; arose, and this is the way Django follows natively (though, if you want, you can also stick to the query string method).&lt;/p&gt;
&lt;p&gt;Now, &lt;a href="https://docs.djangoproject.com/en/1.5/topics/http/urls/"&gt;you know&lt;/a&gt; that you can collect parameters contained in the URL parsing it with a regular expression; what we need to discover is how class-based views receive and process them.&lt;/p&gt;
&lt;p&gt;In the previous post we already discussed the &lt;code&gt;as_view()&lt;/code&gt; method that shall instance the class and return the result of &lt;code&gt;dispatch()&lt;/code&gt; (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L46"&gt;views/generic/base.py#L46&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nd"&gt;@classonlymethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;initkwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Main entry point for a request-response process.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c"&gt;# sanitize keyword arguments&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;initkwargs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;http_method_names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;You tried to pass in the &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; method name as a &amp;quot;&lt;/span&gt;
                                &lt;span class="s"&gt;&amp;quot;keyword argument to &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;(). Don&amp;#39;t do that.&amp;quot;&lt;/span&gt;
                                &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;() received an invalid keyword &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s"&gt;. as_view &amp;quot;&lt;/span&gt;
                                &lt;span class="s"&gt;&amp;quot;only accepts arguments that are already &amp;quot;&lt;/span&gt;
                                &lt;span class="s"&gt;&amp;quot;attributes of the class.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;initkwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# take name and docstring from class&lt;/span&gt;
        &lt;span class="n"&gt;update_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="c"&gt;# and possible attributes set by decorators&lt;/span&gt;
        &lt;span class="c"&gt;# like csrf_exempt from dispatch&lt;/span&gt;
        &lt;span class="n"&gt;update_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assigned&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now look at what the &lt;code&gt;view()&lt;/code&gt; wrapper function actually does with the instanced class (here line 21, &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L65"&gt;views/generic/base.py#L65&lt;/a&gt;); not surprisingly it takes the &lt;code&gt;request&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;kwargs&lt;/code&gt; passed by the URLconf passes and converts them into as many class attributes with the same names.&lt;/p&gt;
&lt;p&gt;This means that &lt;em&gt;everywhere in our CBVs&lt;/em&gt; we can access the original call parameters simply reading &lt;code&gt;self.request&lt;/code&gt;, &lt;code&gt;self.args&lt;/code&gt; and &lt;code&gt;self.kwargs&lt;/code&gt;, where &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; are the unnamed and named values extracted by the URLconf regular expression.&lt;/p&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;p&gt;Just after listing things, one of the most useful things a Web site does is giving details about objects. Obviously any e-commerce site is made for the most part by pages that list products and show product details, but also a blog is made of one or more pages with a list of posts and a page for each of them. So building a detailed view of the content of our database is worth learning.&lt;/p&gt;
&lt;p&gt;To help us in this task Django provides &lt;code&gt;DetailView&lt;/code&gt;, which indeed deals, as the name suggests, with the details of what we get from the DB. While &lt;code&gt;ListView&lt;/code&gt;'s basic behaviour is to extract the list of all objects with a given model, &lt;code&gt;DetailView&lt;/code&gt; extracts a single object. How does it know what object shall be extracted?&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;dispatch()&lt;/code&gt; is called on an incoming HTTP request the only thing it does is to look at the &lt;code&gt;method&lt;/code&gt; attribute, which for &lt;code&gt;HttpRequest&lt;/code&gt; objects contains the name of the HTTP verb used (e.g. &lt;code&gt;'GET'&lt;/code&gt;); then &lt;code&gt;dispatch()&lt;/code&gt; looks for a method of the class with the lowercase name of the verb (e.g. &lt;code&gt;'GET'&lt;/code&gt; --&amp;gt; &lt;code&gt;get()&lt;/code&gt;) (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L78"&gt;views/generic/base.py#L78&lt;/a&gt;). This handler is then called with the same parameters of &lt;code&gt;dispatch()&lt;/code&gt;, namely the &lt;code&gt;request&lt;/code&gt; itself, &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DetailView&lt;/code&gt; has no body and inherits everything from two classes; the second one, &lt;code&gt;BaseDetailView&lt;/code&gt;, implements the &lt;code&gt;get()&lt;/code&gt; method (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/detail.py#L107"&gt;views/generic/detail.py#L107&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see this method extracts the single object it shall represent calling &lt;code&gt;self.get_object()&lt;/code&gt;, then calls &lt;code&gt;self.get_context_data()&lt;/code&gt; (that we met in the previous post) and last the familiar &lt;code&gt;self.render_to_response()&lt;/code&gt; that is the class equivalent of the well know Django function. The method &lt;code&gt;self.get_object()&lt;/code&gt; is provided by &lt;code&gt;BaseDetailView&lt;/code&gt;'s ancestor &lt;code&gt;SingleObjectMixin&lt;/code&gt; (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/detail.py#L10"&gt;generic/detail.py#L10&lt;/a&gt;): the most important parts of its code, for the sake of our present topic are&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;pk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk_url_kwarg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: I removed many lines from the previous function to improve readability; please check the original source code for the complete implementation.&lt;/p&gt;
&lt;p&gt;The code shows where &lt;code&gt;DetailView&lt;/code&gt; gets the queryset from; the &lt;code&gt;get_queryset()&lt;/code&gt; method is provided by &lt;code&gt;SingleObjectMixin&lt;/code&gt; itself and basically returns &lt;code&gt;self.queryset&lt;/code&gt; if present, otherwise returns all objects of the given model (acting just like &lt;code&gt;ListView&lt;/code&gt; does). This &lt;code&gt;queryset&lt;/code&gt; is then refined by a &lt;code&gt;filter()&lt;/code&gt; and last by a &lt;code&gt;get()&lt;/code&gt;. Here &lt;code&gt;get()&lt;/code&gt; is not used directly (I think) to manage the different error cases and raise the correct exceptions.&lt;/p&gt;
&lt;p&gt;The parameter &lt;code&gt;pk&lt;/code&gt; used in &lt;code&gt;filter()&lt;/code&gt; comes directly from &lt;code&gt;self.kwargs&lt;/code&gt;, so it is taken directly from the URL. Since this is a core concept of views in general I want to look at this part carefully.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;DetailView&lt;/code&gt; is called by an URLconf that provides a regular expression to parse the URL, for example &lt;code&gt;url(r'^(?P&amp;lt;pk&amp;gt;\d+)/$',&lt;/code&gt;. This regex extracts a parameter and gives it the name &lt;code&gt;pk&lt;/code&gt;, so &lt;code&gt;kwargs&lt;/code&gt; of the view will contain &lt;code&gt;pk&lt;/code&gt; as key and the actual number in the URL as value. For example the URL &lt;code&gt;123/&lt;/code&gt; will result in &lt;code&gt;{'pk': 123}&lt;/code&gt;. The default behaviour of &lt;code&gt;DetailView&lt;/code&gt; is to look for a &lt;code&gt;pk&lt;/code&gt; key and use it to perform the filtering of the queryset, since &lt;code&gt;self.pk_url_kwarg&lt;/code&gt; is &lt;code&gt;'pk'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So if we want to change the name of the parameter we can simply define the &lt;code&gt;pk_url_kwarg&lt;/code&gt; of our class and provide a regex that extract the primary key with the new name. For example &lt;code&gt;url(r'^(?P&amp;lt;key&amp;gt;\d+)/$',&lt;/code&gt; extracts it with the name &lt;code&gt;key&lt;/code&gt;, so we will define &lt;code&gt;pk_url_kwarg = 'key'&lt;/code&gt; in our class.&lt;/p&gt;
&lt;p&gt;From this quick exploration we learned that a class inheriting from &lt;code&gt;DetailView&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;provides a context with the &lt;code&gt;object&lt;/code&gt; key initialized to a single object&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;must&lt;/strong&gt; be configured with a &lt;code&gt;model&lt;/code&gt; class attribute, to know what objects to extract&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;can&lt;/strong&gt; be configured with a &lt;code&gt;queryset&lt;/code&gt; class attribute, to refine the set of objects where the single object is extracted from&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;must&lt;/strong&gt; be called from a URL that includes a regexp that extracts the primary key of the searched object as &lt;code&gt;pk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;can&lt;/strong&gt; be configured to use a different name for the primary key through the &lt;code&gt;pk_url_kwarg&lt;/code&gt; class attribute&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The basic use of &lt;code&gt;DetailView&lt;/code&gt; is thus exemplified by the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookDetail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DetailView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^(?P&amp;lt;pk&amp;gt;\d+)/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;BookDetail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The view extracts a single object with the &lt;code&gt;Book&lt;/code&gt; model; the regex is configured with the standard &lt;code&gt;pk&lt;/code&gt; name.&lt;/p&gt;
&lt;p&gt;As shown for &lt;code&gt;ListView&lt;/code&gt; in the previous post, any CBV uses &lt;code&gt;get_context_data()&lt;/code&gt; to return the context dictionary to the rendering engine. So views that inherit from &lt;code&gt;DetailView&lt;/code&gt; can add data to the context following the same pattern&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookDetail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DetailView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BookDetail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;similar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_similar_books&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;^(?P&amp;lt;pk&amp;gt;\d+)/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;BookDetail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;detail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As explained before, you can access the object being shown through &lt;code&gt;self.object&lt;/code&gt;, which in the above example is passed to a service function we implemented somewhere in our code.&lt;/p&gt;
&lt;h2&gt;Using the base views&lt;/h2&gt;
&lt;p&gt;Sometimes, when dealing with complex pages, the generic display CBVs that Django provides are not the right choice. This usually becomes evident when you start overriding method to prevent the view to perform its standard behaviour. As an instance say that you want to show detailed information of more than one object: probably DetailView will soon show its limits, being built to show only one object.&lt;/p&gt;
&lt;p&gt;In all those cases that cannot be easily solved by one of the generic display CBVs, your way goes through other classes: &lt;code&gt;RedirectView&lt;/code&gt;, &lt;code&gt;TemplateView&lt;/code&gt;, and &lt;code&gt;View&lt;/code&gt;. The documentation for these base views is &lt;a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/base/"&gt;here&lt;/a&gt;, while the source code is in &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py"&gt;views/generic/base.py&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm not going to fully describe those views; I want however to briefly point out some peculiarities.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;View&lt;/code&gt; is by now an old friend of us; we met it when we discussed the &lt;code&gt;as_view()&lt;/code&gt; and &lt;code&gt;dispatch()&lt;/code&gt; method. It is the most generic view class and can be leveraged to perform very specialized tasks such as rendering pages without templates (for example when returning JSON data in AJAX techniques).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TemplateView&lt;/code&gt; is the best choice to render pages from a template keeping in the meanwhile freedom as regards the context content. Chances are that this is going to be the view you will use the most after &lt;code&gt;ListView&lt;/code&gt; and &lt;code&gt;DetailView&lt;/code&gt;. Basically you just need to inherit from it and define the &lt;code&gt;get_context_data()&lt;/code&gt; method. As you can see from the &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L147"&gt;source code&lt;/a&gt; &lt;code&gt;TemplateView&lt;/code&gt; answers to GET requests only.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RedirectView&lt;/code&gt;, as the name implies, is used to redirect a request. The redirection mechanism is very simple: its &lt;code&gt;get()&lt;/code&gt; method returns a &lt;code&gt;HttpResponseRedirect&lt;/code&gt; to the URL defined by the &lt;code&gt;url&lt;/code&gt; class attribute. The class exhibits a very interesting behaviour (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L195"&gt;views/generic/base.py#L195&lt;/a&gt;) when called through HTTP methods other than GET (namely HEAD, POST, OPTIONS, DELETE, and PUT): it "converts" the method to GET simply calling &lt;code&gt;get()&lt;/code&gt; from the respective method (&lt;code&gt;head()&lt;/code&gt;, &lt;code&gt;post()&lt;/code&gt;, and so on). In the next post I'll show how to leverage this simple technique to show the user a prefilled form.&lt;/p&gt;
&lt;h2&gt;Date-based views&lt;/h2&gt;
&lt;p&gt;Django provides other class-based views that simplify dealing with objects extracted or ordered by date. As a programmer, you know that dealing with dates is sometimes at least awkward; the views in &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/dates.py"&gt;views/generic/dates.py&lt;/a&gt; aims to help you to tame your date-based objects; any object that contains a date (e.g. post date for articles, birth date for people, log date for messages, etc) can be processed by these views. You can find the official documentation &lt;a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/generic-date-based/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Remember that date-based views are CBVs, so they are based on &lt;code&gt;View&lt;/code&gt;, just like &lt;code&gt;ListView&lt;/code&gt; or &lt;code&gt;TemplateView&lt;/code&gt;. So, apart from their specialization on date processing, they behave the same (&lt;code&gt;get_context_data()&lt;/code&gt;, &lt;code&gt;get()&lt;/code&gt;, &lt;code&gt;dispatch()&lt;/code&gt;, and so on).&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post we covered &lt;code&gt;DetailView&lt;/code&gt; in deep and, more quickly, all the remaining base and data-based views. In the next post we will step into the rich (and strange) world of forms.&lt;/p&gt;
&lt;p&gt;Feel free to use &lt;a href="https://plus.google.com/u/0/b/110554719587236016835/110554719587236016835/posts"&gt;the blog Google+ page&lt;/a&gt; to comment the post or to ask for an in-depth analysis of some topic. &lt;a href="https://github.com/lgiordani/lgiordani.github.com/issues"&gt;GitHub issues&lt;/a&gt; is the best place to submit corrections.&lt;/p&gt;
&lt;h2&gt;Previous articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/blog/2013/10/28/digging-up-django-class-based-views-1"&gt;Digging Up Django Class-based Views - 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Next articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/blog/2014/02/14/digging-up-django-class-based-views-3"&gt;Digging Up Django Class-based Views - 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Django"></category></entry><entry><title>"Digging up Django class-based views - 1"</title><link href="http://lgiordani.com/blog/2013/10/28/digging-up-django-class-based-views-1/" rel="alternate"></link><updated>2013-10-28T08:43:00+02:00</updated><author><name>Leonardo Giordani</name></author><id>tag:lgiordani.com,2013-10-28:blog/2013/10/28/digging-up-django-class-based-views-1/</id><summary type="html">&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;This post refers to Django 1.5. Please be warned that some of the matters discussed here, some solutions or the given code can be outdated by more recent Django versions&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Django programmers that started with versions prior to 1.3 are used to deal with views as functions, and they learned how to process even complex forms in a procedural way. From the release 1.3, Django introduced class-based views (CBVs) and ported its powerful generic views to this new paradigm (class-based generic views, or CBGVs).&lt;/p&gt;
&lt;p&gt;This change, however, has not been harmless for Django novices: the django-users mailing list and StackOverflow are full of questions about views and classes, and the official documentation on this topic is still a little unorganized. Well, open source things are always ready to be improved, aren't they? This post aims to share some thoughts and insights about CBVs, and hopefully it can also lead to an improvement of the official documentation.&lt;/p&gt;
&lt;p&gt;I want to thank all Django developers for their work. Despite the previous criticism on documentation, this post wants to be a thanksgiving for their efforts.&lt;/p&gt;
&lt;p&gt;Feel free to comment &lt;a href="https://plus.google.com/u/0/b/110554719587236016835/110554719587236016835/posts"&gt;here&lt;/a&gt; or to submit issues &lt;a href="https://github.com/lgiordani/lgiordani.github.com/issues"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What are CBVs?&lt;/h2&gt;
&lt;p&gt;Class-based views are, indeed, (Django) views based on (Python) classes. Until here, it makes sense, hopefully. This means that, to master them, you need to understand both Django views and Python classes, so let's give a quick definition of them.&lt;/p&gt;
&lt;p&gt;A Django view is a piece of code that processes an HTTP request and returns an HTTP response. Oh yes, nothing more, nothing less.
A Python class is the implementation of the Object-Oriented concept of class in the Python language.&lt;/p&gt;
&lt;p&gt;So a view just need to be a &lt;a href="http://docs.python.org/2/library/functions.html#callable"&gt;callable&lt;/a&gt;, and this includes functions and classes. Thus, to understand the advantages of class-based views over function-based views we shall discuss the merits of classes over functions. This latter sentence could be the title of a 10 volumes book on programming (followed by another 10 volumes book titled "Merits of functions over classes"), so I am just going to scratch the surface of the matter.&lt;/p&gt;
&lt;h2&gt;Starting off with Python classes&lt;/h2&gt;
&lt;p&gt;The main point of a class is implementing encapsulation: they represent a way of coupling data and functions. Doing this, a class loses the dynamic essence of a procedure, which exists only while it is running, and becomes a living entity, something that sits there, caring for its data, and reacts when we call its functions (methods).&lt;/p&gt;
&lt;p&gt;A good analogy for a class is a finite-state machine: once the class has been initialized, methods are what we use to make it move between states. If we do not call methods, the class simply waits there without complaining.&lt;/p&gt;
&lt;p&gt;As an example, let's look at a very simple procedure that takes a list and extracts the even numbers from it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract_even_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alist&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alist&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The example is very trivial, but I think there is always time to tangle up the code, so let us start with simple things. A class version of this function could be written as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EvenExtractor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alist&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alist&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Seems to be the same thing, doesn't it? Indeed the difference is subtle but remarkable. Now the extractor has two parts, the first being the initialization and the second being the actual extraction, and we can have the class in one of three states: before initialization (&lt;code&gt;e = EvenExtractor&lt;/code&gt;), after initialization (&lt;code&gt;e = EvenExtractor(range(120))&lt;/code&gt;), and after extraction (&lt;code&gt;l = e.extract()&lt;/code&gt;. Being a finite-state machine we can interact with it before moving from a state to another. For example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EvenExtractor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c"&gt;# State B&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# State C&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well, despite the very simple example the point is: by converting the procedure to a class we obtained a rich tool that can execute its job step by step and, in general, can work in a non linear way.&lt;/p&gt;
&lt;h2&gt;Playing with genetics&lt;/h2&gt;
&lt;p&gt;The real power of classes used as finite-state machines lies in the concept of &lt;a href="http://en.wikipedia.org/wiki/Inheritance_%28object-oriented_programming%29"&gt;inheritance&lt;/a&gt;. Inheritance is a mechanism through which a class can copy another class and then change only the parts that have to behave differently. Please note that here we talk about classes and not instances, so the copy action here refers to the structure of the class, not the actual data contained in it. Inheritance is a mean to mimic the behaviour of a class.&lt;/p&gt;
&lt;p&gt;(Sidenote: &lt;em&gt;I am a strong supporter of an OO design principle that states "Favour composition over inheritance" (and favor "favor" over "favour" for US audience). I read too many OOP introductions that stress too much the inheritance mechanism and leave composition aside, raising a generation of OOP programmers that, instead of building systems populated by many small collaborating objects create nightmares infested by giant all-purpose things that sometimes resemble an operating system more than a system component. Given that, inheritance plays an important role in OOP, and here we find a very good example of its real benefit.&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;Let's continue the above example, first by enriching the EvenExtractor class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EvenExtractor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alist&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;alist&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the class performs an important action in its initialization phase, converting all elements of the input list to integers, and we can happily use it in our Next Big Project™. Some days after this change we realize that we could also profitably use a class that extracts odd elements form a list. Being good object oriented programmers we write&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OddExtractor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EvenExtractor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and call it a day. Indeed, through the inheritance mechanism expressed by that &lt;code&gt;(EvenExtractor)&lt;/code&gt; signature of the new class, we defined something that is exactly the same thing as &lt;code&gt;EvenExtractor&lt;/code&gt;, with the same methods and attributes, but with a different name. Then we changed the behaviour of the new class but only for the extraction part by &lt;a href="http://en.wikipedia.org/wiki/Method_overriding"&gt;overriding the method&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To summarize the lesson: using classes and inheritance you can build finite-state machines that are easily customizable to suit your exact needs. This obviously is just one of the many points of view under which you can consider classes, but it is the one we need to understand Django CBVs.&lt;/p&gt;
&lt;h2&gt;Back to Django&lt;/h2&gt;
&lt;p&gt;Finally! You couldn't take Python classes anymore, could you? Sorry, we are dealing with them further, but for the moment let us move to Django to look at a practical use of what we learned in the previous sections.&lt;/p&gt;
&lt;p&gt;A Django view is a perfect example of a finite-state machine. It takes an incoming request and makes it flow through different processing steps until a final response is produced, which is then sent back to the user. So, for the love of definitions, say that CBVs are the Django mechanism to allow the programmer to write their views leveraging the tools made available by the object-oriented paradigm. In this context (pun intended) CBGVs are the "batteries included" of Django views: (class-based) generic views are powerful tools that the framework gives you to accomplish the most usual tasks, and sometimes even the unusual ones.&lt;/p&gt;
&lt;p&gt;Let's dig into one of the examples of the official Django docs; &lt;a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/generic-display/#listview"&gt;here&lt;/a&gt; you find the API of the beloved &lt;code&gt;ListView&lt;/code&gt;, a generic view to deal with a list of things (extracted from the database).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.list&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;articles.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This example assumes that &lt;code&gt;articles&lt;/code&gt; is your application and &lt;code&gt;Article&lt;/code&gt; is one of its models.&lt;/p&gt;
&lt;p&gt;This short piece of code leverages the full power of inheritance. Indeed we just derived &lt;code&gt;ArticleListView&lt;/code&gt; from &lt;code&gt;ListView&lt;/code&gt; and changed the class attribute &lt;code&gt;model&lt;/code&gt;: how can this work? How can this class process incoming requests and what are the outputs? The official documentation states "While this view is executing, self.object_list will contain the list of objects (usually, but not necessarily a queryset) that the view is operating upon."; this leaves many dark corners, however, and if you are a novice, chances are that you are already lost.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;ArticleListView&lt;/code&gt; derives from &lt;code&gt;ListView&lt;/code&gt;, the latter is the class we have to analyze to understand how data are processed. To do this you need to look at the &lt;a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/generic-display/#django.views.generic.list.ListView"&gt;documentation&lt;/a&gt;, and if something is still unclear you can freely look at the &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/list.py"&gt;source code&lt;/a&gt;. As already said I find a little difficult to find a clear way through the docs, so I'll try to summarize here what I learned. In the following paragraphs you will find links like (&lt;a href=""&gt;SC&lt;/a&gt;) which point to the source code, if you want to read it by yourself.&lt;/p&gt;
&lt;h4&gt;URL dispatchers and views&lt;/h4&gt;
&lt;p&gt;A CBV cannot directly be used in your URL dispatcher; instead you have to give the result of the &lt;code&gt;as_view()&lt;/code&gt; method (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L31"&gt;SC&lt;/a&gt;), which basically defines a function that instances the class (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L46"&gt;SC&lt;/a&gt;) and calls the &lt;code&gt;dispatch()&lt;/code&gt; method (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L47"&gt;SC&lt;/a&gt;); then the function is returned to be used in the URL dispatcher (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L55"&gt;SC&lt;/a&gt;). As a user, we are interested only in the fact that the &lt;em&gt;entry point&lt;/em&gt; of the class, i.e. the method called when a request hits the URL linked with it, is &lt;code&gt;dispatch()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's use this knowledge to print out a string on the console each time a request is served by our CBV. I'm running through this (indeed simple) task step by step since it shows exactly how you have to deal with CBVs when solving real problems.&lt;/p&gt;
&lt;p&gt;If we define the &lt;code&gt;ArticleListView&lt;/code&gt; class this way&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.list&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;articles.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArticleListView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the class does not change its behaviour. What we did was to override the &lt;code&gt;dispatch()&lt;/code&gt; method with a call to the parent's method, i.e. we explicitly wrote what Python does by default. You can find detailed information about &lt;code&gt;super()&lt;/code&gt; &lt;a href="http://docs.python.org/2/library/functions.html#super"&gt;here&lt;/a&gt;. Please be also sure to understand the star and double star notation to define variable number of arguments; the official documentation is &lt;a href="http://docs.python.org/2.7/tutorial/controlflow.html#more-on-defining-functions"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since views are automatically called by the framework, this latter expects them to comply with a very specific API, so when overriding a method you have to obey its signature. The signature of &lt;code&gt;dispatch()&lt;/code&gt; can be found &lt;a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/base/#django.views.generic.base.View.dispatch"&gt;here&lt;/a&gt;; by the way, this documentation of &lt;code&gt;dispatch()&lt;/code&gt; gives you good hints about the internal working mechanism of CBVs.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;dispatch()&lt;/code&gt; method receives a &lt;code&gt;request&lt;/code&gt; argument, which type is &lt;code&gt;HttpRequest&lt;/code&gt; (&lt;a href="https://docs.djangoproject.com/en/1.5/ref/request-response/#httprequest-objects"&gt;documentation&lt;/a&gt;), and we can print it on the console with the standard &lt;code&gt;print()&lt;/code&gt; function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.list&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;articles.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArticleListView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This prints the content of the &lt;code&gt;request&lt;/code&gt; object on the standard output of the Python code, that is on the standard output of the server that is running the Django project. If you are running the Django development server, you will find the output on the text console where you issued the &lt;code&gt;django-admin.py runserver&lt;/code&gt; command (or &lt;code&gt;manage.py runserver&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This, in a nutshell, is the standard way of dealing with framework classes, and thus with Django's CBGVs: inherit from a predefined class, identify which methods you need to change, override them complying with their signature and calling the parent's code somewhere in the new code.&lt;/p&gt;
&lt;p&gt;The full list of methods &lt;code&gt;ListView&lt;/code&gt; uses when processing incoming requests is listed on its &lt;a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/generic-display/#listview"&gt;official documentation page&lt;/a&gt; in the "Method Flowchart" section; in the "Ancestors (MRO)" section you can see that &lt;code&gt;ListView&lt;/code&gt; itself inherits from a good number of other classes. MRO stands for Method Resolution Order and has to deal with multiple inheritance: if you are eager to deal with one of the most intricate Python topics feel free to read &lt;a href="http://docs.python.org/2/tutorial/classes.html#multiple-inheritance"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Incoming GET requests&lt;/h4&gt;
&lt;p&gt;Back to our &lt;code&gt;ArticleListView&lt;/code&gt;. The &lt;code&gt;dispatch()&lt;/code&gt; method of the parent reads the &lt;code&gt;method&lt;/code&gt; attribute of the &lt;code&gt;request&lt;/code&gt; object and selects a handler to process the request itself (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L57"&gt;SC&lt;/a&gt;): this means that if &lt;code&gt;request.method&lt;/code&gt; is &lt;code&gt;'GET'&lt;/code&gt;, which is the HTTP way to say that we are &lt;em&gt;reading&lt;/em&gt; a resource, &lt;code&gt;dispatch()&lt;/code&gt; will call the &lt;code&gt;get()&lt;/code&gt; method of the class.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;get()&lt;/code&gt; method of &lt;code&gt;ListView&lt;/code&gt; comes from its &lt;code&gt;BaseListView&lt;/code&gt; ancestor (&lt;a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/generic-display/#django.views.generic.list.BaseListView"&gt;documentation&lt;/a&gt;, &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/list.py#L114"&gt;source code&lt;/a&gt;). This function is the one that contains the functional view code, so if you are accustomed to function-based views you'll find yourself at home here. As you can see, the function basically fills the attribute &lt;code&gt;self.object_list&lt;/code&gt; with the result of the method &lt;code&gt;self.get_queryset()&lt;/code&gt;, creates a context calling the method &lt;code&gt;self.get_context_data()&lt;/code&gt; and calls the class version of &lt;code&gt;render_to_response()&lt;/code&gt;, namely &lt;code&gt;self.render_to_response()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Are you still with me? Don't give up, we are nearly at the end (with ListView). The method &lt;code&gt;self.get_queryset()&lt;/code&gt; comes from the &lt;code&gt;MultipleObjectMixin&lt;/code&gt; ancestor of &lt;code&gt;ListView&lt;/code&gt; (&lt;a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/mixins-multiple-object/#multipleobjectmixin"&gt;documentation&lt;/a&gt;, &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/list.py#L11"&gt;source code&lt;/a&gt;) and simply gets all objects of a given model (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/list.py#L29"&gt;SC&lt;/a&gt;) issuing &lt;code&gt;queryset = self.model._default_manager.all()&lt;/code&gt;. The value of &lt;code&gt;self.model&lt;/code&gt; is what we configured in our class when we wrote &lt;code&gt;model = Article&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That's all. Our &lt;code&gt;ArticleListView&lt;/code&gt; class extracts all &lt;code&gt;Article&lt;/code&gt; objects from the database, and calls a template passing a context that contains a single variable, &lt;code&gt;object_list&lt;/code&gt;, instanced with the list of extracted objects.&lt;/p&gt;
&lt;h4&gt;Templates and contexts&lt;/h4&gt;
&lt;p&gt;Are you satisfied? I'm actually still curious about the template and the context. Let's see what we can find about these topics. First of all, when the class calls &lt;code&gt;self.render_to_response()&lt;/code&gt; it uses the code that comes from its &lt;code&gt;TemplateResponseMixin&lt;/code&gt; ancestor (&lt;a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/mixins-simple/#templateresponsemixin"&gt;documentation&lt;/a&gt;, &lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L81"&gt;source code&lt;/a&gt;); the method calls some other functions but its basic behaviour is to create a response using a template and a context. The template, again through a series of calls which you can follow by yourself, comes from &lt;code&gt;self.template_name&lt;/code&gt; (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L109"&gt;SC&lt;/a&gt;); while &lt;code&gt;TemplateResponseMixin&lt;/code&gt; defines it &lt;code&gt;None&lt;/code&gt; (&lt;a href="https://github.com/django/django/blob/stable/1.5.x/django/views/generic/base.py#L85"&gt;SC&lt;/a&gt;), &lt;code&gt;ListView&lt;/code&gt; does some magic through ancestors (&lt;a href="https://github.com/django/django/blob/stable/1.3.x/django/views/generic/list.py#L128"&gt;SC&lt;/a&gt;) to return a template which name derives from the given model. So, in short, our &lt;code&gt;ArticleListView&lt;/code&gt;, defining an &lt;code&gt;Article&lt;/code&gt; model, automatically uses a template that is called &lt;code&gt;article_list.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;May we change this behaviour? Of course! This is, after all, the point of using classes instead of functions: easily customize the behaviour. We can change the definition of our class like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.list&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;articles.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;
    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;sometemplate.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What does this exactly do? When the &lt;code&gt;self.render_to_response()&lt;/code&gt; method looks for &lt;code&gt;self.template_name&lt;/code&gt; this attribute has a value, so there is no need to call the predefined methods and &lt;code&gt;sometemplate.html&lt;/code&gt; becomes the name of the template used to render the response. This follows a very useful pattern of object-oriented programming; if you are interested I can write something about this topic.&lt;/p&gt;
&lt;p&gt;As regards the context, remember that it is only a dictionary of values you want to access when compiling the template. Variable names inside the context (as thus inside the template), data format and data content are completely up to you. When using CBGVs, however, you will find in your context some variables that have been created by the ancestors of your view, as happens for &lt;code&gt;object_list&lt;/code&gt;. What if you want to show a page with the list of all Articles, but you want to add a value to the context?&lt;/p&gt;
&lt;p&gt;Nothing is easier: you just need to override the function that produces the context and change its behaviour. Say, for example, that we want to show the number of total readers of our site, along with the list of articles. Assuming that a &lt;code&gt;Reader&lt;/code&gt; model is available we can write&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.list&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;articles.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Reader&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleListView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ArticleListView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_context_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;readers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As always, when overriding a method we first call the ancestor's one, so that we get the result expected from a normal behaviour of the method, then we add out customizations.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this first post I tried to uncover some of the mysteries behind CBVs and CBGVs in Django, by showing step by step what happens to a GET request that hits a class-based view. Hopefully the matter has now been demystified a little!&lt;/p&gt;
&lt;p&gt;In the next posts I will discuss DetailView, the generic view to show detail about an object, how to create custom CBVs and how to use CBVs to process forms, i.e. POST requests.&lt;/p&gt;
&lt;p&gt;Let me know if this post helped you in understanding the matter and feel free to point out any error or to ask questions.&lt;/p&gt;
&lt;h2&gt;Updates&lt;/h2&gt;
&lt;p&gt;2013-10-29: As pointed out by &lt;a href="http://www.reddit.com/user/mbrochh"&gt;mbrochh&lt;/a&gt; on Reddit, there is a very useful resource for Django programmers: &lt;a href="http://ccbv.co.uk/"&gt;Classy Class-Based Views&lt;/a&gt;. It is a comprensive index of all CBGVs with ancestors and method signatures. Make sure to have it in you Django bookmarks!&lt;/p&gt;
&lt;p&gt;2013-10-29: I fixed a couple of typos when overriding &lt;code&gt;dispatch()&lt;/code&gt;. Thanks to Tom Evans for spotting them.&lt;/p&gt;
&lt;p&gt;2013-10-30: Fixed the &lt;code&gt;__init__()&lt;/code&gt; method of &lt;code&gt;EvenExtractor&lt;/code&gt;, that was missing the &lt;code&gt;self&lt;/code&gt; parameter. Thanks &lt;a href="http://www.reddit.com/user/meatypocket"&gt;meatypocket&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Next articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/blog/2013/12/11/digging-up-django-class-based-views-2"&gt;Digging Up Django Class-based Views - 2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="/blog/2014/02/14/digging-up-django-class-based-views-3"&gt;Digging Up Django Class-based Views - 3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Python"></category><category term="Django"></category></entry></feed>