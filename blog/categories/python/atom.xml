<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | The digital cat]]></title>
  <link href="http://lgiordani.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://lgiordani.com/"/>
  <updated>2014-10-17T10:00:24+02:00</updated>
  <id>http://lgiordani.com/</id>
  <author>
    <name><![CDATA[Leonardo Giordani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Advanced use of Python decorators and metaclasses]]></title>
    <link href="http://lgiordani.com/blog/2014/10/14/decorators-and-metaclasses/"/>
    <updated>2014-10-14T09:43:08+02:00</updated>
    <id>http://lgiordani.com/blog/2014/10/14/decorators-and-metaclasses</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p>While introducing people to Python metaclasses I realized that sometimes the big problem of the most powerful Python features is that programmers do not perceive how they may simplify their usual tasks. Therefore, features like metaclasses are considered a fancy but rather unuseful addition to a standard OOP language, instead of a real game changer.</p>

<p>This post wants to show how to use metaclasses and decorators to create a powerful class that can be inherited and customized by easily adding decorated methods.</p>

<!--more-->


<h2>Metaclasses and decorators: a match made in space</h2>

<p>Metaclasses are a complex topic, and most of the times even advanced programmers do not see a wide range of practical uses for them. Chances are that this is the part of Python (or other languages that support metaclasses, like Smalltalk and Ruby) that fits the least the "standard" object-oriented patterns or solutions found in C++ and Java, just to mention two big players.</p>

<p>Indeed metaclasess usually come in play when programming advanced libraries or frameworks, where a lot of automation must be provided. For example, Django Forms system heavily relies on metaclasses to provide all its magic.</p>

<p>We also have to note, however, that we usually call "magic" or "tricks" all those techniques we are not familiar with, and as a result in Python many things are called this way, being its implementation often peculiar compared to other languages.</p>

<p>Time to bring some spice into your programming: let's practice some Python wizardry and exploit the power of the language!</p>

<p>In this post I want to show you an interesting joint use of decorators and metaclasses. I will show you how to use decorators to mark methods so that they can be automatically used by the class when performing a given operation.</p>

<p>More in detail, I will implement a class that can be called on a string to "process" it, and show you how to implement different "filters" through simple decorated methods. What I want to obtain is something like this:</p>

<p>```python
class MyStringProcessor(StringProcessor):</p>

<pre><code>@stringfilter
def capitalize(self, str):
    [...]

@stringfilter
def remove_double_spaces(self, str):
    [...]
</code></pre>

<p>msp = MyStringProcessor()
"A test string" == msp("a test  string")
```</p>

<p>The module defines a <code>StringProcessor</code> class that I can inherit and customize adding methods that have a standard signature <code>(self, str)</code> and are decorated with <code>@stringfilter</code>. This class can later be instantiated and the instance used to directly process a string and return the result. Internally the class automatically executes all the decorated methods in succession. I also would like the class to obey the order I defined the filters: first defined, first executed.</p>

<h2>The Hitchhiker's Guide To Metaclasses</h2>

<p>How can metaclasses help to reach this target?</p>

<p>Simply put, metaclasses are classes that are instantiated to get classes. That means that whenever I use a class, for example to instantiate it, first Python <em>builds</em> that class using the metaclass and the class definition we wrote. For example, you know that you can find the class members in the <code>__dict__</code> attribute: this attribute is created by the standard metaclass, which is <code>type</code>.</p>

<p>Given that, a metaclass is a good starting point for us to insert some code to identify a subset of functions inside the definition of the class. In other words, we want the output of the metaclass (that is, the class) be built exactly as happens in the standard case, but with an addition: a separate list of all the methods decorated with <code>@stringfilter</code>.</p>

<p>You know that a class has a <em>namespace</em>, that is a dictionary of what was defined inside the class. So, when the standard <code>type</code> metaclass is used to create a class, the class body is parsed and a <code>dict()</code> object is used to collect the namespace.</p>

<p>We are however interested in preserving the order of definition and a Python dictionary is an unordered structure, so we take advantage of the <code>__prepare__</code> hook introduced in the class creation process with Python 3. This function, if present in the metaclass, is used to preprocess the class and to return the structure used to host the namespace. So, following the example found in the official documentation, we start defining a metaclass like</p>

<p>```python
class FilterClass(type):</p>

<pre><code>def __prepare__(name, bases, **kwds):
    return collections.OrderedDict()
</code></pre>

<p>```</p>

<p>This way, when the class will be created, an <code>OrderedDict</code> will be used to host the namespace, allowing us to keep the definition order. Please note that the signature <code>__prepare__(name, bases, **kwds)</code> is enforced by the language. If you want the method to get the metaclass as a first argument (because the code of the method needs it) you have to change the signature to <code>__prepare__(metacls, name, bases, **kwds)</code> and decorate it with <code>@classmethod</code>.</p>

<p>The second function we want to define in our metaclass is <code>__new__</code>. Just like happens for the instantiation of classes, this method is invoked by Python to get a new instance of the metaclass, and is run before <code>__init__</code>. Its signature has to be <code>__new__(metacls, name, bases, namespace, **kwds)</code> and the result shall be an instance of the metaclass. As for its normal class counterpart (after all a metaclass is a class), <code>__new__()</code> usually wraps the same method of the parent class, <code>type</code> in this case, adding its own customizations.</p>

<p>The customization we need is the creation of a list of methods that are marked in some way (the decorated filters). Say for simplicity's sake that the decorated methods have an attribute <code>_filter</code>.</p>

<p>The full metaclass is then</p>

<p>```python
class FilterClass(type):</p>

<pre><code>@classmethod
def __prepare__(name, bases, **kwds):
    return collections.OrderedDict()

def __new__(metacls, name, bases, namespace, **kwds):
    result = type.__new__(metacls, name, bases, dict(namespace))
    result._filters = [
        value for value in namespace.values() if hasattr(value, '_filter')]
    return result
</code></pre>

<p>```</p>

<p>Now we have to find a way to mark all filter methods with a <code>_filter</code> attribute.</p>

<h2>The Anatomy of Purple Decorators</h2>

<p><strong>decorate</strong>: <em>to add something to an object or place, especially in order to make it more attractive</em> (Cambridge Dictionary)</p>

<p>Decorators are, as the name suggests, the best way to augment functions or methods. Remember that a decorator is basically a callable that accepts another callable, processes it, and returns it.</p>

<p>Used in conjunction with metaclasses, decorators are a very powerful and expressive way to implement advanced behaviours in our code. In this case we may easily use them to add an attribute to decorated methods, one of the most basic tasks for a decorator.</p>

<p>I decided to implement the <code>@stringfilter</code> decorator as a function, even if I usually prefer implementing them as classes. The reason is that decorator classes behave differently when used to implement decorators without arguments rather than decorators with arguments. In this case this difference would force to write some complex code and an explanation of that would be overkill now. In a future post on dectorators you will find all the gory details, but in the meantime you may check the three Bruce Eckel posts listed in the references section.</p>

<p>The decorator is very simple:</p>

<p>```python
def stringfilter(func):</p>

<pre><code>func._filter = True
return func
</code></pre>

<p>```</p>

<p>As you can see the decorator just creates an attribute called <code>_filter</code> into the function (remember that functions are objects). The actual value of this attribute is not important in this case, since we are just interested in telling apart class members that contain it.</p>

<h2>The Dynamics of a Callable Object</h2>

<p>We are used to think about functions as special language components that may be "called" or executed. In Python functions are objects, just like everything else, and the feature that allows them to be executed comes from the presence of the <code>__call__()</code> method. Python is polymorphic by design and based on delegation, so (almost) everything that happens in the code relies on some features of the target object.</p>

<p>The result of this generalization is that every object that contains the <code>__call__()</code> method may be executed like a function, and gains the name of <em>callable object</em>.</p>

<p>The <code>StringProcessor</code> class shall thus contain this method and perform there the string processing with all the contained filters. The code is</p>

<p>```python
class StringProcessor(metaclass=FilterClass):</p>

<pre><code>def __call__(self, string):
    _string = string
    for _filter in self._filters:
        _string = _filter(self, _string)

    return _string
</code></pre>

<p>```</p>

<p>A quick review of this simple function shows that it accepts the string as an argument, stores it in a local variable and loops over the filters, executing each of them on the local string, that is on the result of the previous filter.</p>

<p>The filter functions are extracted from the <code>self._filters</code> list, that is compiled by the <code>FilterClass</code> metaclass we already discussed.</p>

<p>What we need to do now is to inherit from <code>StringProcessor</code> to get the metaclass machinery and the <code>__call__()</code> method, and to define as many methods as needed, decorating them with the <code>@stringfilter</code> decorator.</p>

<p>Note that, thanks to the decorator and the metaclass, you may have other methods in your class that do not interfere with the string processing as long as they are not decorated with the decorator under consideration.</p>

<p>An example derived class may be the following</p>

<p>```python
class MyStringProcessor(StringProcessor):</p>

<pre><code>@stringfilter
def capitalize(self, string):
    return string.capitalize()

@stringfilter
def remove_double_spaces(self, string):
    return string.replace('  ', ' ')
</code></pre>

<p>```</p>

<p>The two <code>capitalize()</code> and <code>remove_double_spaces()</code> methods have been decorated, so they will be applied in order to any string passed when calling the class. A quick example of this last class is</p>

<p>```pycon</p>

<blockquote><blockquote><blockquote><p>import strproc
msp = strproc.MyStringProcessor()
input_string = "a test  string"
output_string = msp(input_string)
print("INPUT STRING:", input_string)
INPUT STRING: a test  string
print("OUTPUT STRING:", output_string)
OUTPUT STRING: A test string</p>

<p>```</p></blockquote></blockquote></blockquote>

<p>That's it!</p>

<h2>Final words</h2>

<p>There are obviously other ways to accomplish the same task, and this post wanted just to give a practical example of what metaclasses are good for, and why I think that they should be part of any Python programmer's arsenal.</p>

<p>[Update] Some developers (on Reddit)[http://www.reddit.com/r/Python/comments/2jbi2f/advanced_use_of_python_decorators_and_metaclasses/] and Linkedin raised objections to the content of the post mainly about the fact that the example may be perfectly implemented without metaclasses and about the dangerous nature of metaclasses. Since I try to learn from everyone, I thank them for their suggestions.</p>

<p>It is especially interesting to know that some developers consider the use of metaclasses a risky business, because they hide a lot of the structure of the class and the underlying machinery. This is true, so (as you should do for other technologies), think carefully about the reasons that drive you to use metaclasses, and be sure you know them well.</p>

<h2>Book Trivia</h2>

<p>Section titles come from the following books: <em>A Match Made in Space - George McFly</em>, <em>The Hitchhiker's Guide To the Galaxy - Various Authors</em>, <em>The Anatomy of Purple Dragons - Unknown</em>, <em>The Dynamics of an Asteroid - James Moriarty</em>.</p>

<h2>Source code</h2>

<p>The <a href="/downloads/code/metaclasses/strproc.py">strproc.py</a> file contains the full source code used in this post.</p>

<h2>Online resources</h2>

<p>The following resources may be useful.</p>

<h4>Metaclasses</h4>

<ul>
<li>Python 3 official documentation: <a href="https://docs.python.org/3.4/reference/datamodel.html#customizing-class-creation">customizing class creation</a>.</li>
<li>Python 3 OOP Part 5 - Metaclasses <a href="/blog/2014/09/01/python-3-oop-part-5-metaclasses">on this blog</a>.</li>
<li><a href="http://python-3-patterns-idioms-test.readthedocs.org/en/latest/Metaprogramming.html">Metaprogramming examples and patterns</a> (still using some Python 2 code but useful).</li>
</ul>


<h4>Decorators</h4>

<ul>
<li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">Bruce Eckel</a> on decorators (series of three posts, 6 years old but still valid).</li>
<li><a href="http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/">A different approach</a> on explaining decorators.</li>
<li><a href="http://www.jeffknupp.com/blog/2013/11/29/improve-your-python-decorators-explained/">Jeff Knupp</a> goes deep inside the concept of function.</li>
</ul>


<h4>Callable objects</h4>

<ul>
<li><a href="http://www.rafekettler.com/magicmethods.html#callable">Rafe Kettler</a> provides a very detaild guide on Python "magic" methods.</li>
</ul>


<h2>Updates</h2>

<p>2014-10-17: (Matthew Dillon)[https://github.com/thermokarst] and (Damon McDougall)[https://github.com/dmcdougall] spotted two typos. Thank you!</p>

<p>2014-10-17: (ionelmc)[http://www.reddit.com/user/ionelmc] suggested two corrections (here)[http://www.reddit.com/r/Python/comments/2jbi2f/advanced_use_of_python_decorators_and_metaclasses/cla696y] and (here)[http://www.reddit.com/r/Python/comments/2jbi2f/advanced_use_of_python_decorators_and_metaclasses/cla6o77]. Both are correct so I implemented them. The second one is more about style, but fits well the introductory purpose of the post. Thanks!</p>

<h2>Feedback</h2>

<p>Feel free to use <a href="https://plus.google.com/u/0/b/110554719587236016835/110554719587236016835/posts">the blog Google+ page</a> to comment the post. The <a href="https://github.com/lgiordani/lgiordani.github.com/issues">GitHub issues</a> page is the best place to submit corrections.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 3 OOP Part 6 - Abstract Base Classes]]></title>
    <link href="http://lgiordani.com/blog/2014/09/04/python-3-oop-part-6-abstract-base-classes/"/>
    <updated>2014-09-04T10:00:00+02:00</updated>
    <id>http://lgiordani.com/blog/2014/09/04/python-3-oop-part-6-abstract-base-classes</id>
    <content type="html"><![CDATA[<!--more-->


<h2>Previous post</h2>

<p><a href="/blog/2014/09/01/python-3-oop-part-5-metaclasses">Python 3 OOP Part 5 - Metaclasses</a></p>

<h2>The Inspection Club</h2>

<p>As you know, Python leverages polymorphism at its maximum by dealing only with generic references to objects. This makes OOP not an addition to the language but part of its structure from the ground up. Moreover, Python pushes the EAFP appoach, which tries to avoid direct inspection of objects as much as possible.</p>

<p>It is however very interesting to read what Guido van Rossum says in <a href="http://legacy.python.org/dev/peps/pep-3119/">PEP 3119</a>: <em>Invocation means interacting with an object by invoking its methods. Usually this is combined with polymorphism, so that invoking a given method may run different code depending on the type of an object. Inspection means the ability for external code (outside of the object's methods) to examine the type or properties of that object, and make decisions on how to treat that object based on that information. [...] In classical OOP theory, invocation is the preferred usage pattern, and inspection is actively discouraged, being considered a relic of an earlier, procedural programming style. However, in practice this view is simply too dogmatic and inflexible, and leads to a kind of design rigidity that is very much at odds with the dynamic nature of a language like Python.</em></p>

<p>The author of Python recognizes that forcing the use of a pure polymorphic approach leads sometimes to solutions that are too complex or even incorrect. In this section I want to show some of the problems that can arise from a pure polymorphic approach and introduce Abstract Base Classes, which aim to solve them. I strongly suggest to read <a href="http://legacy.python.org/dev/peps/pep-3119/">PEP 3119</a> (as for any other PEP) since it contains a deeper and better explanation of the whole matter. Indeed I think that this PEP is so well written that any further explanation is hardly needed. I am however used to write explanations to check how much I understood about the topic, so I am going to try it this time too.</p>

<h4>E.A.F.P the Extra Test Trial</h4>

<p>The EAFP coding style requires you to trust the incoming objects to provide the attributes and methods you need, and to manage the possible exceptions, if you know how to do it. Sometimes, however, you need to test if the incoming object matches a complex behaviour. For example, you could be interested in testing if the object <em>acts</em> like a list, but you quickly realize that the amount of methods a <code>list</code> provides is very big and this could lead to odd EAFP code like</p>

<p>``` python
try:</p>

<pre><code>obj.append
obj.count
obj.extend
obj.index
obj.insert
[...]
</code></pre>

<p>except AttributeError:</p>

<pre><code>[...]
</code></pre>

<p>```</p>

<p>where the methods of the <code>list</code> type are accessed (not called) just to force the object to raise the <code>AttributeError</code> exception if they are not present. This code, however, is not only ugly but also wrong. If you recall the "Enter the Composition" section of the <a href="/blog/2014/08/20/python-3-oop-part-3-delegation-composition-and-inheritance">third post</a> of this series, you know that in Python you can always customize the <code>__getattr__()</code> method, which is called whenever the requested attribute is not found in the object. So I could write a class that passes the test but actually does not act like a list</p>

<p>``` python
class FakeList:</p>

<pre><code>def fakemethod(self):
    pass

def __getattr__(self, name):
    if name in ['append', 'count', 'extend', 'index', 'insert', ...]:
        return self.fakemethod
</code></pre>

<p>```</p>

<p>This is obviously just an example, and no one will ever write such a class, but this demonstrates that just accessing methods does not guarantee that a class <em>acts</em> like the one we are expecting.</p>

<p>There are many examples that could be done leveraging the highly dynamic nature of Python and its rich object model. I would summarize them by saying that sometimes you'd better to check the type of the incoming object.</p>

<p>In Python you can obtain the type of an object using the <code>type()</code> built-in function, but to check it you'd better use <code>isinstance()</code>, which returns a boolean value. Let us see an example before moving on</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>isinstance([], list)
True
isinstance(1, int)
True
class Door:
...  pass
...
d = Door()
isinstance(d, Door)
True
class EnhancedDoor(Door):
...  pass
...
ed = EnhancedDoor()
isinstance(ed, EnhancedDoor)
True
isinstance(ed, Door)
True
```</p></blockquote></blockquote></blockquote>

<p>As you can see the function can also walk the class hierarchy, so the check is not so trivial like the one you would obtain by directly using <code>type()</code>.</p>

<p>The <code>isinstance()</code> function, however, does not completely solve the problem. If we write a class that actually <em>acts</em> like a <code>list</code> but does not inherit from it, <code>isinstance()</code> does not recognize the fact that the two may be considered the same thing. The following code returns <code>False</code> regardless the content of the <code>MyList</code> class</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>class MyList:
...  pass
...
ml = MyList()
isinstance(ml, list)
False
```</p></blockquote></blockquote></blockquote>

<p>since <code>isinstance()</code> does not check the content of the class or its behaviour, it just consider the class and its ancestors.</p>

<p>The problem, thus, may be summed up with the following question: what is the best way to test that an object exposes a given interface? Here, the word <em>interface</em> is used for its natural meaning, without any reference to other programming solutions, which however address the same problem.</p>

<p>A good way to address the problem could be to write inside an attribute of the object the list of interfaces it promises to implement, and to agree that any time we want to test the behaviour of an object we simply have to check the content of this attribute. This is exactly the path followed by Python, and it is very important to understand that the whole system is just about a promised behaviour.</p>

<p>The solution proposed through PEP 3119 is, in my opinion, very simple and elegant, and it perfectly fits the nature of Python, where things are usually agreed rather than being enforced. Not only, the solution follows the spirit of polymorphism, where information is provided by the object itself and not extracted by the calling code.</p>

<p>In the next sections I am going to try and describe this solution in its main building blocks. The matter is complex so my explanation will lack some details: please refer to the forementioned PEP 3119 for a complete description.</p>

<h4>Who Framed the Metaclasses</h4>

<p>As already described, Python provides two built-ins to inspect objects and classes, which are <code>isinstance()</code> and <code>issubclass()</code> and it would be desirable that a solution to the inspection problem allows the programmer to go on with using those two functions.</p>

<p>This means that we need to find a way to inject the "behaviour promise" into both classes and instances. This is the reason why metaclasses come in play. Recall what we said about them in the fifth issue of this series: metaclasses are the classes used to build classes, which means that they are the preferred way to change the structure of a class, and, in consequence, of its instances.</p>

<p>Another way to do the same job would be to leverage the inheritance mechanism, injecting the behaviour through a dedicated parent class. This solution has many downsides, which I'm am not going to detail. It is enough to say that affecting the class hierarchy may lead to complex situations or subtle bugs. Metaclasses may provide here a different entry point for the introduction of a "virtual base class" (as PEP 3119 specifies, this is not the same concept as in C++).</p>

<h4>Overriding Places</h4>

<p>As said, <code>isinstance()</code> and <code>issubclass()</code> are built-in functions, not object methods, so we cannot simply override them providing a different implementation in a given class. So the first part of the solution is to change the behaviour of those two functions to first check if the class or the instance contain a special method, which is <code>__instancecheck__()</code> for <code>isinstance()</code> and <code>__subclasscheck__()</code> for <code>issubclass()</code>. So both built-ins try to run the respective special method, reverting to the standard algorithm if it is not present.</p>

<p>A note about naming. Methods must accept the object they belong to as the first argument, so the two special methods shall have the form</p>

<p>``` python
def <strong>instancecheck</strong>(cls, inst):
   [...]</p>

<p>def <strong>subclasscheck</strong>(cls, sub):
   [...]
```</p>

<p>where <code>cls</code> is the class where they are injected, that is the one representing the promised behaviour. The two built-ins, however, have a reversed argument order, where the behaviour comes after the tested object: when you write <code>isinstance([], list)</code> you want to check if the <code>[]</code> instance has the <code>list</code> behaviour. This is the reason behind the name choice: just calling the methods <code>__isinstance__()</code> and <code>__issubclass__()</code> and passing arguments in a reversed order would have been confusing.</p>

<h4>This is ABC</h4>

<p>The proposed solution is thus called Abstract Base Classes, as it provides a way to attach to a concrete class a virtual class with the only purpose of signaling a promised behaviour to anyone inspecting it with <code>isinstance()</code> or <code>issubclass()</code>.</p>

<p>To help programmers implement Abstract Base Classes, the standard library has been given an <code>abc</code> module, thet contains the <code>ABCMeta</code> class (and other facilities). This class is the one that implements <code>__instancecheck__()</code> and <code>__subclasscheck__()</code> and shall be used as a metaclass to augment a standard class. This latter will then be able to register other classes as implementation of its behaviour.</p>

<p>Sounds complex? An example may clarify the whole matter. The one from the official documentation is rather simple:</p>

<p>``` python
from abc import ABCMeta</p>

<p>class MyABC(metaclass=ABCMeta):</p>

<pre><code>pass
</code></pre>

<p>MyABC.register(tuple)</p>

<p>assert issubclass(tuple, MyABC)
assert isinstance((), MyABC)
```</p>

<p>Here, the <code>MyABC</code> class is provided the <code>ABCMeta</code> metaclass. This puts the two <code>__isinstancecheck__()</code> and <code>__subclasscheck__()</code> methods inside <code>MyABC</code> so that, when issuing <code>isinstance()</code>, what Python actually ececutes is</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>d = {'a': 1}
isinstance(d, MyABC)
False
MyABC.<strong>class</strong>.<strong>instancecheck</strong>(MyABC, d)
False
isinstance((), MyABC)
True
MyABC.<strong>class</strong>.<strong>instancecheck</strong>(MyABC, ())
True
```</p></blockquote></blockquote></blockquote>

<p>After the definition of <code>MyABC</code> we need a way to signal that a given class is an instance of the Abstract Base Class and this happens through the <code>register()</code> method, provided by the <code>ABCMeta</code> metaclass. Calling <code>MyABC.register(tuple)</code> we record inside <code>MyABC</code> the fact that the <code>tuple</code> class shall be identified as a subclass of <code>MyABC</code> itself. This is analogous to saying that <code>tuple</code> inherits from <code>MyABC</code> but not quite the same. As already said registering a class in an Abstract Base Class with <code>register()</code> does not affect the class hierarchy. Indeed, the whole <code>tuple</code> class is unchanged.</p>

<p>The current implementation of ABCs stores the registered types inside the <code>_abc_registry</code> attribute. Actually it stores there weak references to the registered types (this part is outside the scope of this article, so I'm not detailing it)</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>MyABC._abc_registry.data
{<weakref at 0xb682966c; to 'type' at 0x83dcca0 (tuple)>}
```</p></blockquote></blockquote></blockquote>

<h2>Movie Trivia</h2>

<p>Section titles come from the following movies: <em>The Breakfast Club (1985)</em>, <em>E.T. the Extra-Terrestrial (1982)</em>, <em>Who Framed Roger Rabbit (1988)</em>, <em>Trading Places (1983)</em>, <em>This is Spinal Tap (1984)</em>.</p>

<h2>Sources</h2>

<p>You will find a lot of documentation in <a href="http://www.reddit.com/r/Python/comments/226ahl/some_links_about_python_oop/">this Reddit post</a>. Most of the information contained in this series come from those sources.</p>

<h2>Feedback</h2>

<p>Feel free to use <a href="https://plus.google.com/u/0/b/110554719587236016835/110554719587236016835/posts">the blog Google+ page</a> to comment the post. The <a href="https://github.com/lgiordani/lgiordani.github.com/issues">GitHub issues</a> page is the best place to submit corrections.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 3 OOP Part 5 - Metaclasses]]></title>
    <link href="http://lgiordani.com/blog/2014/09/01/python-3-oop-part-5-metaclasses/"/>
    <updated>2014-09-01T15:00:00+02:00</updated>
    <id>http://lgiordani.com/blog/2014/09/01/python-3-oop-part-5-metaclasses</id>
    <content type="html"><![CDATA[<!--more-->


<h2>Previous post</h2>

<p><a href="/blog/2014/08/21/python-3-oop-part-4-polymorphism">Python 3 OOP Part 4 - Polymorphism</a></p>

<h2>The Type Brothers</h2>

<p>The first step into the most intimate secrets of Python objects comes from two components we already met in the first post: <code>class</code> and <code>object</code>. These two things are the very fundamental elements of Python OOP system, so it is worth spending some time to understand how they work and relate each other.</p>

<p>First of all recall that in Python <em>everything is an object</em>, that is everything inherits from <code>object</code>. Thus, <code>object</code> seems to be the deepest thing you can find digging into Python variables. Let's check this</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>a = 5
type(a)
<class 'int'>
a.<strong>class</strong>
<class 'int'>
a.<strong>class</strong>.<strong>bases</strong>
(<class 'object'>,)
object.<strong>bases</strong>
()
```</p></blockquote></blockquote></blockquote>

<p>The variable <code>a</code> is an instance of the <code>int</code> class, and this latter inherits from <code>object</code>, which inherits from nothing. This demonstrates that <code>object</code> is at the top of the class hierarchy. However, as you can see, both <code>int</code> and <code>object</code> are called <em>classes</em> (<code>&lt;class 'int'&gt;</code>, <code>&lt;class 'object'&gt;</code>). Indeed, while <code>a</code> is an instance of the <code>int</code> class, <code>int</code> itself is an instance of another class, <em>a class that is instanced to build classes</em></p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>type(a)
<class 'int'>
type(int)
<class 'type'>
type(float)
<class 'type'>
type(dict)
<class 'type'>
```</p></blockquote></blockquote></blockquote>

<p>Since in Python everything is an object, everything is the instance of a class, even classes. Well, <code>type</code> is the class that is instanced to get classes. So remember this: <code>object</code> is the base of every object, <code>type</code> is the class of every type. Sounds puzzling? It is not your fault, don't worry. However, just to strike you with the finishing move, this is what Python is built on</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>type(object)
<class 'type'>
type.<strong>bases</strong>
(<class 'object'>,)
```</p></blockquote></blockquote></blockquote>

<p>If you are not about to faint at this point chances are that you are Guido van Rossum of one of his friends down at the Python core development team (in this case let me thank you for your beautiful creation). You may get a cup of tea, if you need it.</p>

<p>Jokes apart, at the very base of Python type system there are two things, <code>object</code> and <code>type</code>, which are inseparable. The previous code shows that <code>object</code> is an instance of <code>type</code>, and <code>type</code> inherits from <code>object</code>. Take your time to understand this subtle concept, as it is very important for the upcoming discussion about metaclasses.</p>

<p>When you think you grasped the <code>type</code>/<code>object</code> matter read this and start thinking again</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>type(type)
<class 'type'>
```</p></blockquote></blockquote></blockquote>

<h2>The Metaclasses Take Python</h2>

<p>You are now familiar with Python classes. You know that a class is used to create an instance, and that the structure of this latter is ruled by the source class and all its parent classes (until you reach <code>object</code>).</p>

<p>Since classes are objects too, you know that a class itself is an instance of a (super)class, and this class is <code>type</code>. That is, as already stated, <code>type</code> is the class that is used to build classes.</p>

<p>So for example you know that a class may be instanced, i.e. it can be called and by calling it you obtain another object that is linked with the class. What prepares the class for being called? What gives the class all its methods? In Python the class in charge of performing such tasks is called <em>metaclass</em>, and <code>type</code> is the default metaclass of all classes.</p>

<p>The point of exposing this structure of Python objects is that you may change the way classes are built. As you know, <code>type</code> is an object, so it can be subclassed just like any other class. Once you get a subclass of <code>type</code> you need to instruct your class to use it as the metaclass instead of type, and you can do this by passing it as the <code>metaclass</code> keyword argument in the class definition.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>class MyType(type):
...  pass
...
class MySpecialClass(metaclass=MyType):
...  pass
...
msp = MySpecialClass()
type(msp)
<class '__main__.MySpecialClass'>
type(MySpecialClass)
<class '__main__.MyType'>
type(MyType)
<class 'type'>
```</p></blockquote></blockquote></blockquote>

<h4>Metaclasses 2: Singleton Day</h4>

<p>Metaclasses are a very advanced topic in Python, but they have many practical uses. For example, by means of a custom metaclass you may log any time a class is instanced, which can be important for applications that shall keep a low memory usage or have to monitor it.</p>

<p>I am going to show here a very simple example of metaclass, the Singleton. Singleton is a well known design pattern, and many description of it may be found on the Internet. It has also been heavily criticized mostly because its bad behaviour when subclassed, but here I do not want to introduce it for its technological value, but for its simplicity (so please do not question the choice, it is just an example).</p>

<p>Singleton has one purpose: to return the same instance every time it is instanced, like a sort of object-oriented global variable. So we need to build a class that does not work like standard classes, which return a new instance every time they are called.</p>

<p>"Build a class"? This is a task for metaclasses. The following implementation comes from <a href="http://python-3-patterns-idioms-test.readthedocs.org/en/latest/Metaprogramming.html#intercepting-class-creation">Python 3 Patterns, Recipes and Idioms</a>.</p>

<p>``` python
class Singleton(type):</p>

<pre><code>instance = None
def __call__(cls, *args, **kw):
    if not cls.instance:
         cls.instance = super(Singleton, cls).__call__(*args, **kw)
    return cls.instance
</code></pre>

<p>```</p>

<p>We are defining a new type, which inherits from <code>type</code> to provide all bells and whistles of Python classes. We override the <code>__call__</code> method, that is a special method invoked when we call the class, i.e. when we instance it. The new method wraps the original method of <code>type</code> by calling it only when the <code>instance</code> attribute is not set, i.e. the first time the class is instanced, otherwise it just returns the recorded instance. As you can see this is a very basic cache class, the only trick is that it is applied to the creation of instances.</p>

<p>To test the new type we need to define a new class that uses it as its metaclass</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>class ASingleton(metaclass=Singleton):
...  pass
...
a = ASingleton()
b = ASingleton()
a is b
True
hex(id(a))
'0xb68030ec'
hex(id(b))
'0xb68030ec'
```</p></blockquote></blockquote></blockquote>

<p>By using the <code>is</code> operator we test that the two objects are the very same structure in memory, that is their ids are the same, as explicitly shown. What actually happens is that when you issue <code>a = ASingleton()</code> the <code>ASingleton</code> class runs its <code>__call__()</code> method, which is taken from the <code>Singleton</code> type behind the class. That method recognizes that no instance has been created (<code>Singleton.instance</code> is <code>None</code>) and acts just like any standard class does. When you issue <code>b = ASingleton()</code> the very same things happen, but since <code>Singleton.instance</code> is now different from <code>None</code> its value (the previous instance) is directly returned.</p>

<p>Metaclasses are a very powerful programming tool and leveraging them you can achieve very complex behaviours with a small effort. Their use is a must every time you are actually metaprogramming, that is you are writing code that has to drive the way your code works. Good examples are creational patterns (injecting custom class attributes depending on some configuration), testing, debugging, and performance monitoring.</p>

<h2>Coming to Instance</h2>

<p>Before introducing you to a very smart use of metaclasses by talking about Abstract Base Classes (read: to save some topics for the next part of this series), I want to dive into the object creation procedure in Python, that is what happens when you instance a class. In the first post this procedure was described only partially, by looking at the <code>__init__()</code> method.</p>

<p>In the first post I recalled the object-oriented concept of <em>constructor</em>, which is a special method of the class that is automatically called when the instance is created. The class may also define a destructor, which is called when the object is destroyed. In languages without a garbage collection mechanism such as C++ the destructor shall be carefully designed. In Python the destructor may be defined through the <code>__del__()</code> method, but it is hardly used.</p>

<p>The constructor mechanism in Python is on the contrary very important, and it is implemented by two methods, instead of just one: <code>__new__()</code> and <code>__init__()</code>. The tasks of the two methods are very clear and distinct: <code>__new__()</code> shall perform actions needed when <em>creating</em> a new instance while <code>__init__</code> deals with object <em>initialization</em>.</p>

<p>Since in Python you do not need to declare attributes due to its dynamic nature, <code>__new__()</code> is rarely defined by programmers, who may rely on <code>__init__</code> to perform the majority of the usual tasks. Typical uses of <code>__new__()</code> are very similar to those listed in the previous section, since it allows to trigger some code whenever your class is instanced.</p>

<p>The standard way to override <code>__new__()</code> is</p>

<p>``` python
class MyClass():</p>

<pre><code>def __new__(cls, *args, **kwds):
    obj = super().__new__(cls, *args, **kwds)
    [put your code here]
    return obj
</code></pre>

<p>```</p>

<p>just like you usually do with <code>__init__()</code>. When your class inherits from <code>object</code> you do not need to call the parent method (<code>object.__init__()</code>), because it is empty, but you need to do it when overriding <code>__new__</code>.</p>

<p>Remember that <code>__new__()</code> is not forced to return an instance of the class in which it is defined, even if you shall have very good reasons to break this behaviour. Anyway, <code>__init__()</code> will be called only if you return an instance of the container class. Please also note that <code>__new__()</code>, unlike <code>__init__()</code>, accepts the class as its first parameter. The name is not important in Python, and you can also call it <code>self</code>, but it is worth using <code>cls</code> to remember that it is not an instance.</p>

<h2>Movie Trivia</h2>

<p>Section titles come from the following movies: <em>The Blues Brothers (1980)</em>, <em>The Muppets Take Manhattan (1984)</em>, <em>Terminator 2: Judgement Day (1991)</em>, <em>Coming to America (1988)</em>.</p>

<h2>Sources</h2>

<p>You will find a lot of documentation in <a href="http://www.reddit.com/r/Python/comments/226ahl/some_links_about_python_oop/">this Reddit post</a>. Most of the information contained in this series come from those sources.</p>

<h2>Feedback</h2>

<p>Feel free to use <a href="https://plus.google.com/u/0/b/110554719587236016835/110554719587236016835/posts">the blog Google+ page</a> to comment the post. The <a href="https://github.com/lgiordani/lgiordani.github.com/issues">GitHub issues</a> page is the best place to submit corrections.</p>

<h2>Next post</h2>

<p><a href="/blog/2014/09/04/python-3-oop-part-6-abstract-base-classes">Python 3 OOP Part 6 - Abstract Base Classes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 3 OOP Part 4 - Polymorphism]]></title>
    <link href="http://lgiordani.com/blog/2014/08/21/python-3-oop-part-4-polymorphism/"/>
    <updated>2014-08-21T10:00:00+02:00</updated>
    <id>http://lgiordani.com/blog/2014/08/21/python-3-oop-part-4-polymorphism</id>
    <content type="html"><![CDATA[<!--more-->


<h2>Previous post</h2>

<p><a href="/blog/2014/08/20/python-3-oop-part-3-delegation-composition-and-inheritance">Python 3 OOP Part 3 - Delegation: composition and inheritance</a></p>

<h2>Good Morning, Polymorphism</h2>

<p>The term <em>polymorphism</em>, in the OOP lingo, refers to the ability of an object to adapt the code to the type of the data it is processing.</p>

<p>Polymorphism has two major applications in an OOP language. The first is that an object may provide different implementations of one of its methods depending on the type of the input parameters. The second is that code written for a given type of data may be used on data with a derived type, i.e. methods understand the class hierarchy of a type.</p>

<p>In Python polymorphism is one of the key concepts, and we can say that it is a built-in feature. Let us deal with it step by step.</p>

<p>First of all, you know that in Python the type of a variable is not explicitly declared. Beware that this does not mean that Python variables are <em>untyped</em>. On the contrary, everything in Python has a type, it just happens that the type is implicitly assigned. If you remember the last paragraph of the previous post, I stated that in Python variables are just pointers (using a C-like nomenclature), in other words they just tell the language <em>where</em> in memory a variable has been stored. What is stored at that address is not a business of the variable.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>a = 5
a
5
type(a)
<class 'int'>
hex(id(a))
'0x83fe540'
a = 'five'
a
'five'
type(a)
<class 'str'>
hex(id(a))
'0xb70d6560'
```</p></blockquote></blockquote></blockquote>

<p>This little example shows a lot about the Python typing system. The variable <code>a</code> is not statically declared, after all it can contain only one type of data: a memory address. When we assign the number 5 to it, Python stores in <code>a</code> the <em>address</em> of the number 5 (<code>0x83fe540</code> in my case, but your result will be different). The <code>type()</code> built-in function is smart enough to understand that we are not asking about the type of <code>a</code> (which is always a reference), but about the type of the content. When you store another value in <code>a</code>, the string <code>'five'</code>, Python shamelessly replaces the previous content of the variable with the new address.</p>

<p>So, thanks to the reference system, Python type system is both <em>strong</em> and <em>dynamic</em>. The exact definition of those two concepts is not universal, so if you are interested be ready to dive into a broad matter. However, in Python, the meaning of those two words is the following:</p>

<ul>
<li>type system is <em>strong</em> because everything has a well-defined type that you can check with the <code>type()</code> built-in function</li>
<li>type system is <em>dynamic</em> since the type of a variable is not explicitly declared, but changes with the content</li>
</ul>


<p>Onward! We just scratched the surface of the whole thing.</p>

<p>To explore the subject a little more, try to define the simplest function in Python (apart from an empty function)</p>

<p>``` python
def echo(a):</p>

<pre><code>return a
</code></pre>

<p>```</p>

<p>The function works as expected, just echoes the given parameter</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>echo(5)
5
echo('five')
'five'
```</p></blockquote></blockquote></blockquote>

<p>Pretty straightforward, isn't it? Well, if you come from a statically compiled language such as C or C++ you should be at least puzzled. What is <code>a</code>? I mean: what type of data does it contain? Moreover, how can Python know what it is returning if there is no type specification?</p>

<p>Again, if you recall the references stuff everything becomes clear: that function accepts a reference and returns a reference. In other words we just defined a sort of universal function, that does the same thing regardless of the input.</p>

<p>This is exactly the problem that polymorphism wants to solve. We want to describe an action regardless of the type of objects, and this is what we do when we talk among humans. When you describe how to move an object by pushing it, you may explain it using a box, but you expect the person you are addressing to be able to repeat the action even if you need to move a pen, or a book, or a bottle.</p>

<p>There are two main strategies you can apply to get code that performs the same operation regardless of the input types.</p>

<p>The first approach is to cover all cases, and this is a typical approach of procedural languages. If you need to sum two numbers that can be integers, float or complex, you just need to write three <code>sum()</code> functions, one bound to the integer type, the second bound to the float type and the third bound to the complex type, and to have some language feature that takes charge of choosing the correct implementation depending on the input type. This logic can be implemented by a compiler (if the language is statically typed) or by a runtime environment (if the language is dynamically typed) and is the approach chosen by C++. The disadvantage of this solution is that it requires the programmer to forecast all the possible situations: what if I need to sum an integer with a float? What if I need to sum two lists? (Please note that C++ is not so poorly designed, and the operator overloading technique allows to manage such cases, but the base polymorphism strategy of that language is the one exposed here).</p>

<p>The second strategy, the one implemented by Python, is simply to require the input objects to solve the problem for you. In other words you <em>ask the data itself to perform the operation</em>, reversing the problem. Instead of writing a bunch of functions that sum all the possible types in every possible combination you just write one function that requires the input data to sum, trusting that they know how to do it. Does it sound complex? It is not.</p>

<p>Let's look at the Python implementation of the <code>+</code> operator. When we write <code>c = a + b</code>, Python actually executes <code>c = a.__add__(b)</code>. As you can see the sum operation is delegated to the first input variable. So if we write</p>

<p>``` python
def sum(a, b):</p>

<pre><code>return a + b
</code></pre>

<p>```</p>

<p>there is no need to specify the type of the two input variables. The object <code>a</code> (the object contained in the variable <code>a</code>) shall be able to sum with the object <code>b</code>. This is a very beautiful and simple implementation of the polymorphism concept. Python functions are polymorphic simply because they accept everything and trust the input data to be able to perform some actions.</p>

<p>Let us consider another simple example before moving on. The built-in <code>len()</code> function returns the length of the input object. For example</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>l = [1, 2, 3]
len(l)
3
s = "Just a sentence"
len(s)
15
```</p></blockquote></blockquote></blockquote>

<p>As you can see it is perfectly polymorphic: you can feed both a list or a string to it and it just computes its length. Does it work with any type? let's check</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>d = {'a': 1, 'b': 2}
len(d)
2
i = 5
len(i)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: object of type 'int' has no len()
```</p></blockquote></blockquote></blockquote>

<p>Ouch! Seems that the <code>len()</code> function is smart enough to deal with dictionaries, but not with integers. Well, after all, the length of an integer is not defined.</p>

<p>Indeed this is exactly the point of Python polymorphism: <em>the integer type does not define a length operation</em>. While you blame the <code>len()</code> function, the <code>int</code> type is at fault. The <code>len()</code> function just calls the <code>__len__()</code> method of the input object, as you can see from this code</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>l.<strong>len</strong>()
3
s.<strong>len</strong>()
15
d.<strong>len</strong>()
2
i.<strong>len</strong>()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'int' object has no attribute '<strong>len</strong>'
```</p></blockquote></blockquote></blockquote>

<p>Very straightforward: the <code>'int' object</code> does not define any <code>__len__()</code> method.</p>

<p>So, to sum up what we discovered until here, I would say that <em>Python polymorphism is based on delegation</em>. In the following sections we will talk about the <a href="https://docs.python.org/3/glossary.html#term-eafp">EAFP</a> Python principle, and you will see that the delegation principle is somehow ubiquitous in this language.</p>

<h2>Type Hard</h2>

<p>Another real-life concept that polymorphism wants to bring into a programming language is the ability to walk the class hierarchy, that is <em>to run code on specialized types</em>. This is a complex sentence to say something we are used to do every day, and an example will clarify the matter.</p>

<p>You know how to open a door, it is something you learned in your early years. Under an OOP point of view you are an object (sorry, no humiliation intended) which is capable of interacting with a wood rectangle rotating on hinges. When you can open a door, however, you can also open a window, which, after all, is a specialized type of wood-rectangle-with-hinges, hopefully with some glass in it too. You are also able to open the car door, which is also a specialized type (this one is a mix between a standard door and a window). This shows that, once you know how to interact with the most generic type (basic door) you can also interact with specialized types (window, car door) as soon as they act like the ancestor type (e.g. as soon as they rotate on hinges).</p>

<p>This directly translates into OOP languages: polymorphism requires that <em>code written for a given type may also be run on derived types</em>. For example, a list (a generic list object, not a Python one) that can contain "numbers" shall be able to accept integers because they <em>are</em> numbers. The list could specify an ordering operation which requires the numbers to be able to compare each other. So, as soon as integers specify a way to compare each other they can be inserted into the list and ordered.</p>

<p>Statically compiled languages shall provide specific language features to implement this part of the polymorphism concept. In C++, for example, the language needs to introduce the concept of pointer compatibility between parent and child classes.</p>

<p>In Python there is no need to provide special language features to implement subtype polymorphism. As we already discovered Python functions accept any variable without checking the type and rely on the variable itself to provide the correct methods. But you already know that a subtype must provide the methods of the parent type, either redefining them or through implicit delegation, so as you can see Python implements subtype polymorphism from the very beginning.</p>

<p>I think this is one of the most important things to understand when working with this language. Python is not really interested in the actual type of the variables you are working with. It is interested in how those variables act, that is it just wants the variable <em>to provide the right methods</em>. So, if you come from statically typed languages, you need to make a special effort to think about <em>acting like</em> instead of <em>being</em>. This is what we called "duck typing".</p>

<p>Time to do an example. Let us define a <code>Room</code> class</p>

<p>``` python
class Room:</p>

<pre><code>def __init__(self, door):
    self.door = door

def open(self):
    self.door.open()

def close(self):
    self.door.close()

def is_open(self):
    return self.door.is_open()
</code></pre>

<p>```</p>

<p>A very simple class, as you can see, just enough to exemplify polymorphism. The <code>Room</code> class accepts a <code>door</code> variable, and the type of this variable is not specified. Duck typing in action: the actual type of <code>door</code> is not declared, there is no "acceptance test" built in the language. Indeed, the incoming variable shall export the following methods that are used in the <code>Room</code> class: <code>open()</code>, <code>close()</code>, <code>is_open()</code>. So we can build the following classes</p>

<p>``` python
class Door:</p>

<pre><code>def __init__(self):
    self.status = "closed"

def open(self):
    self.status = "open"

def close(self):
    self.status = "closed"

def is_open(self):
    return self.status == "open"
</code></pre>

<p>class BooleanDoor:</p>

<pre><code>def __init__(self):
    self.status = True

def open(self):
    self.status = True

def close(self):
    self.status = False

def is_open(self):
    return self.status
</code></pre>

<p>```</p>

<p>Both represent a door that can be open or closed, and they implement the concept in two different ways: the first class relies on strings, while the second leverages booleans. Despite <em>being</em> two different types, both <em>act</em> the same way, so both can be used to build a <code>Room</code> object.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>door = Door()
bool_door = BooleanDoor()
room = Room(door)
bool_room = Room(bool_door)</p>

<p>room.open()
room.is_open()
True
room.close()
room.is_open()
False</p>

<p>bool_room.open()
bool_room.is_open()
True
bool_room.close()
bool_room.is_open()
False
```</p></blockquote></blockquote></blockquote>

<h2>File Like Us</h2>

<p>File-like objects are a concrete and very useful example of polymorphism in Python. A file-like object is a class (or the instance of a class) that acts like a file, i.e. it provides those methods a file object exposes.</p>

<p>Say for example that you code a class that parses an XML tree, and that you expect the XML code to be contained in a file. So your class accepts a file in its <code>__init__()</code> method, and reads the content from it</p>

<p>``` python
class XMLReader:</p>

<pre><code>def __init__(xmlfile):
    xmlfile.open()
    self.content = xmlfile.read()
    xmlfile.close()
</code></pre>

<p>[...]
```</p>

<p>The class works well until your application shall be modified to receive XML content from a network stream. To use the class without modifying it you shall write the stream in a temporary file and load this latter, but this sounds a little overkill. So you plan to change the class to accept a string, but this way you shall change every single code that uses the class to read a file, since now you shall open, read and close the file on your own, outside the class.</p>

<p>Polymorphism offers a better way. Why not storing the incoming stream inside an object that <em>acts like</em> a file, even if it is not an actual one? If you check the <a href="https://docs.python.org/3/library/io.html"><code>io</code></a> module you will find that such an object has been already invented and provided in the standard Python library.</p>

<p>Other very useful file-like classes are those contained in the <code>gzip</code>, <code>bz2</code>, and <code>zipfile</code> modules (just to name some of the most used), which provide objects that allow you to manage compressed files just like plain files, hiding the decompression/compression machinery.</p>

<h2>Unforgiveness</h2>

<p>EAFP is a Python acronym that stands for <em>easier to ask for forgiveness than permission</em>. This coding style is highly pushed in the Python community because it completely relies on the duck typing concept, thus fitting well with the language philosophy.</p>

<p>The concept behind EAFP is fairly easy: instead of checking if an object has a given attribute or method before actually accessing or using it, just trust the object to provide what you need and manage the error case. This can be probably better understood by looking at some code. According to EAFP, instead of writing</p>

<p>``` python
if hasattr(someobj, 'open'):</p>

<pre><code>[...]
</code></pre>

<p>else:</p>

<pre><code>[...]
</code></pre>

<p>```</p>

<p>you shall write</p>

<p>``` python
try:</p>

<pre><code>someobj.open()
[...]
</code></pre>

<p>except AttributeError:</p>

<pre><code>[...]
</code></pre>

<p>```</p>

<p>As you can see, the second snippet directly uses the method and deals with the possible <code>AttributeError</code> exception (by the way: managing exceptions is one of the top Black Magic Topics in Python, more on it in a future post. A very quick preview: I think we may learn something from Erlang - check <a href="/blog/2013/05/30/error-handling-in-erlang-a-primer/">this</a>).</p>

<p>Why is this coding style pushed so much in the Python community? I think the main reason is that through EAFP you <em>think</em> polymorphically: you are not interested in knowing if the object <em>has</em> the <code>open</code> attribute, you are interested in knowing if the object can satisfy your request, that is to perform the <code>open()</code> method call.</p>

<h2>Movie Trivia</h2>

<p>Section titles come from the following movies: <em>Good Morning, Vietnam (1987)</em>, <em>Die Hard (1988)</em>, <em>Spies Like Us (1985)</em>, <em>Unforgiven (1992)</em>.</p>

<h2>Sources</h2>

<p>You will find a lot of documentation in <a href="http://www.reddit.com/r/Python/comments/226ahl/some_links_about_python_oop/">this Reddit post</a>. Most of the information contained in this series come from those sources.</p>

<h2>Feedback</h2>

<p>Feel free to use <a href="https://plus.google.com/u/0/b/110554719587236016835/110554719587236016835/posts">the blog Google+ page</a> to comment the post. The <a href="https://github.com/lgiordani/lgiordani.github.com/issues">GitHub issues</a> page is the best place to submit corrections.</p>

<h2>Next post</h2>

<p><a href="/blog/2014/09/01/python-3-oop-part-5-metaclasses">Python 3 OOP Part 5 - Metaclasses</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 3 OOP Part 3 - Delegation: composition and inheritance]]></title>
    <link href="http://lgiordani.com/blog/2014/08/20/python-3-oop-part-3-delegation-composition-and-inheritance/"/>
    <updated>2014-08-20T15:00:00+02:00</updated>
    <id>http://lgiordani.com/blog/2014/08/20/python-3-oop-part-3-delegation-composition-and-inheritance</id>
    <content type="html"><![CDATA[<!--more-->


<h2>Previous post</h2>

<p><a href="/blog/2014/08/20/python-3-oop-part-2-classes-and-members">Python 3 OOP Part 2 - Classes and members</a></p>

<h2>The Delegation Run</h2>

<p>If classes are objects what is the difference between types and instances?</p>

<p>When I talk about "my cat" I am referring to a concrete instance of the "cat" concept, which is a <em>subtype</em> of "animal". So, despite being both objects, while types can be <em>specialized</em>, instances cannot.</p>

<p>Usually an object B is said to be a specialization of an object A when:</p>

<ul>
<li>B has all the features of A</li>
<li>B can provide new features</li>
<li>B can perform some or all the tasks performed by A in a different way</li>
</ul>


<p>Those targets are very general and valid for any system and the key to achieve them with the maximum reuse of already existing components is <em>delegation</em>. Delegation means that an object shall perform only what it knows best, and leave the rest to other objects.</p>

<p>Delegation can be implemented with two different mechanisms: <em>composition</em> and <em>inheritance</em>. Sadly, very often only inheritance is listed among the pillars of OOP techniques, forgetting that it is an implementation of the more generic and fundamental mechanism of delegation; perhaps a better nomenclature for the two techniques could be <em>explicit delegation</em> (composition) and <em>implicit delegation</em> (inheritance).</p>

<p>Please note that, again, when talking about composition and inheritance we are talking about focusing on a behavioural or structural delegation. Another way to think about the difference between composition and inheritance is to consider if the object <em>knows</em> who can satisfy your request or if the object <em>is</em> the one that satisfy the request.</p>

<p><strong>Please, please, please do not forget composition</strong>: in many cases, composition can lead to simpler systems, with benefits on maintainability and changeability.</p>

<p>Usually composition is said to be a very generic technique that needs no special syntax, while inheritance and its rules are strongly dependent on the language of choice. Actually, the strong dynamic nature of Python softens the boundary line between the two techniques.</p>

<h2>Inheritance Now</h2>

<p>In Python a class can be declared as an <em>extension</em> of one or more different classes, through the <em>class inheritance</em> mechanism. The child class (the one that inherits) has the same internal structure of the parent class (the one that is inherited), and for the case of multiple inheritance the language has very specific rules to manage possible conflicts or redefinitions among the parent classes. A very simple example of inheritance is</p>

<p>``` python
class SecurityDoor(Door):</p>

<pre><code>pass
</code></pre>

<p>```</p>

<p>where we declare a new class <code>SecurityDoor</code> that, at the moment, is a perfect copy of the <code>Door</code> class. Let us investigate what happens when we access attributes and methods. First we instance the class</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>sdoor = SecurityDoor(1, 'closed')
```</p></blockquote></blockquote></blockquote>

<p>The first check we can do is that class attributes are still global and shared</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>SecurityDoor.colour is Door.colour
True
sdoor.colour is Door.colour
True
```</p></blockquote></blockquote></blockquote>

<p>This shows us that Python tries to resolve instance members not only looking into the class the instance comes from, but also investigating the parent classes. In this case <code>sdoor.colour</code> becomes <code>SecurityDoor.colour</code>, that in turn becomes <code>Door.colour</code>. <code>SecurityDoor</code> <em>is</em> a <code>Door</code>.</p>

<p>If we investigate the content of <code>__dict__</code> we can catch a glimpse of the inheritance mechanism in action</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>sdoor.<strong>dict</strong>
{'number': 1, 'status': 'closed'}
sdoor.<strong>class</strong>.<strong>dict</strong>
mappingproxy({'<strong>doc</strong>': None, '<strong>module</strong>': '<strong>main</strong>'})
Door.<strong>dict</strong>
mappingproxy({'<strong>dict</strong>': <attribute '__dict__' of 'Door' objects>,</p>

<pre><code>'colour': 'yellow',
'open': &lt;function Door.open at 0xb687e224&gt;,
'__init__': &lt;function Door.__init__ at 0xb687e14c&gt;,
'__doc__': None,
'close': &lt;function Door.close at 0xb687e1dc&gt;,
'knock': &lt;classmethod object at 0xb67ff6ac&gt;,
'__weakref__': &lt;attribute '__weakref__' of 'Door' objects&gt;,
'__module__': '__main__',
'paint': &lt;classmethod object at 0xb67ff6ec&gt;})
</code></pre>

<p>```</p></blockquote></blockquote></blockquote>

<p>As you can see the content of <code>__dict__</code> for <code>SecurityDoor</code> is very narrow compared to that of <code>Door</code>. The inheritance mechanism takes care of the missing elements by climbing up the classes tree. Where does Python get the parent classes? A class always contains a <code>__bases__</code> tuple that lists them</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>SecurityDoor.<strong>bases</strong>
(<class '__main__.Door'>,)
```</p></blockquote></blockquote></blockquote>

<p>So an example of what Python does to resolve a class method call through the inheritance tree is</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>sdoor.<strong>class</strong>.<strong>bases</strong>[0].<strong>dict</strong>['knock'].<strong>get</strong>(sdoor)
<bound method type.knock of <class '__main__.SecurityDoor'>>
sdoor.knock
<bound method type.knock of <class '__main__.SecurityDoor'>>
```</p></blockquote></blockquote></blockquote>

<p>Please note that this is just an example that does not consider multiple inheritance.</p>

<p>Let us try now to override some methods and attributes. In Python you can <em>override</em> (redefine) a parent class member simply by redefining it in the child class.</p>

<p>``` python
class SecurityDoor(Door):</p>

<pre><code>colour = 'gray'
locked = True

def open(self):
    if not self.locked:
        self.status = 'open'
</code></pre>

<p>```</p>

<p>As you can forecast, the overridden members now are present in the <code>__dict__</code> of the <code>SecurityDoor</code> class</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>SecurityDoor.<strong>dict</strong>
mappingproxy({'<strong>doc</strong>': None,</p>

<pre><code>'__module__': '__main__',
'open': &lt;function SecurityDoor.open at 0xb6fcf89c&gt;,
'colour': 'gray',
'locked': True})
</code></pre>

<p>```</p></blockquote></blockquote></blockquote>

<p>So when you override a member, the one you put in the child class is used instead of the one in the parent class simply because the former is found before the latter while climbing the class hierarchy. This also shows you that Python does not implicitly call the parent implementation when you override a method. So, overriding is a way to block implicit delegation.</p>

<p>If we want to call the parent implementation we have to do it explicitly. In the former example we could write</p>

<p>``` python
class SecurityDoor(Door):</p>

<pre><code>colour = 'gray'
locked = True

def open(self):
    if self.locked:
        return
    Door.open(self)
</code></pre>

<p>```</p>

<p>You can easily test that this implementation is working correctly.</p>

<p>``` python</p>

<blockquote><blockquote><blockquote><p>sdoor = SecurityDoor(1, 'closed')
sdoor.status
'closed'
sdoor.open()
sdoor.status
'closed'
sdoor.locked = False
sdoor.open()
sdoor.status
'open'
```</p></blockquote></blockquote></blockquote>

<p>This form of explicit parent delegation is heavily discouraged, however.</p>

<p>The first reason is because of the very high coupling that results from explicitly naming the parent class again when calling the method. <em>Coupling</em>, in the computer science lingo, means to link two parts of a system, so that changes in one of them directly affect the other one, and is usually avoided as much as possible. In this case if you decide to use a new parent class you have to manually propagate the change to every method that calls it. Moreover, since in Python the class hierarchy can be dynamically changed (i.e. at runtime), this form of explicit delegation could be not only annoying but also wrong.</p>

<p>The second reason is that in general you need to deal with multiple inheritance, where you do not know a priori which parent class implements the original form of the method you are overriding.</p>

<p>To solve these issues, Python supplies the <code>super()</code> built-in function, that climbs the class hierarchy and returns the correct class that shall be called. The syntax for calling <code>super()</code> is</p>

<p>``` python
class SecurityDoor(Door):</p>

<pre><code>colour = 'gray'
locked = True

def open(self):
    if self.locked:
        return
    super().open(self)
</code></pre>

<p>```</p>

<p>The output of <code>super()</code> is not exactly the <code>Door</code> class. It returns a <code>super</code> object which representation is <code>&lt;super: &lt;class 'SecurityDoor'&gt;, &lt;SecurityDoor object&gt;&gt;</code>. This object however acts like the parent class, so you can safely ignore its custom nature and use it just like you would do with the <code>Door</code> class in this case.</p>

<h2>Enter the Composition</h2>

<p>Composition means that an object knows another object, and explicitly delegates some tasks to it. While inheritance is implicit, composition is explicit: in Python, however, things are far more interesting than this =).</p>

<p>First of all let us implement classic composition, which simply makes an object part of the other as an attribute</p>

<p>``` python
class SecurityDoor:</p>

<pre><code>colour = 'gray'
locked = True

def __init__(self, number, status):
    self.door = Door(number, status)

def open(self):
    if self.locked:
        return
    self.door.open()

def close(self):
    self.door.close()
</code></pre>

<p>```</p>

<p>The primary goal of composition is to relax the coupling between objects. This little example shows that now <code>SecurityDoor</code> is an <code>object</code> and no more a <code>Door</code>, which means that the internal structure of <code>Door</code> is not copied. For this very simple example both <code>Door</code> and <code>SecurityDoor</code> are not big classes, but in a real system objects can very complex; this means that their allocation consumes a lot of memory and if a system contains thousands or millions of objects that could be an issue.</p>

<p>The composed <code>SecurityDoor</code> has to redefine the <code>colour</code> attribute since the concept of delegation applies only to methods and not to attributes, doesn't it?</p>

<p>Well, no. Python provides a very high degree of indirection for objects manipulation and attribute access is one of the most useful. As you already discovered, accessing attributes is ruled by a special method called <code>__getattribute__()</code> that is called whenever an attribute of the object is accessed. Overriding <code>__getattribute__()</code>, however, is overkill; it is a very complex method, and, being called on every attribute access, any change makes the whole thing slower.</p>

<p>The method we have to leverage to delegate attribute access is <code>__getattr__()</code>, which is a special method that is called whenever the requested attribute is not found in the object. So basically it is the right place to dispatch all attribute and method access our object cannot handle. The previous example becomes</p>

<p>``` python
class SecurityDoor:</p>

<pre><code>locked = True

def __init__(self, number, status):
    self.door = Door(number, status)

def open(self):
    if self.locked:
        return
    self.door.open()

def __getattr__(self, attr):
    return getattr(self.door, attr)
</code></pre>

<p>```</p>

<p>Using <code>__getattr__()</code> blends the separation line between inheritance and composition since after all the former is a form of automatic delegation of every member access.</p>

<p>``` python
class ComposedDoor:</p>

<pre><code>def __init__(self, number, status):
    self.door = Door(number, status)

def __getattr__(self, attr):
    return getattr(self.door, attr)
</code></pre>

<p>```</p>

<p>As this last example shows, delegating every member access through <code>__getattr__()</code> is very simple. Pay attention to <code>getattr()</code> which is different from <code>__getattr__()</code>. The former is a built-in that is equivalent to the dotted syntax, i.e. <code>getattr(obj, 'someattr')</code> is the same as <code>obj.someattr</code>, but you have to use it since the name of the attribute is contained in a string.</p>

<p>Composition provides a superior way to manage delegation since it can selectively delegate the access, even mask some attributes or methods, while inheritance cannot. In Python you also avoid the memory problems that might arise when you put many objects inside another; Python handles everything through its reference, i.e. through a pointer to the memory position of the thing, so the size of an attribute is constant and very limited.</p>

<h2>Movie Trivia</h2>

<p>Section titles come from the following movies: <em>The Cannonball Run (1981)</em>, <em>Apocalypse Now (1979)</em>, <em>Enter the Dragon (1973)</em>.</p>

<h2>Sources</h2>

<p>You will find a lot of documentation in <a href="http://www.reddit.com/r/Python/comments/226ahl/some_links_about_python_oop/">this Reddit post</a>. Most of the information contained in this series come from those sources.</p>

<h2>Feedback</h2>

<p>Feel free to use <a href="https://plus.google.com/u/0/b/110554719587236016835/110554719587236016835/posts">the blog Google+ page</a> to comment the post. The <a href="https://github.com/lgiordani/lgiordani.github.com/issues">GitHub issues</a> page is the best place to submit corrections.</p>

<h2>Next post</h2>

<p><a href="/blog/2014/08/21/python-3-oop-part-4-polymorphism">Python 3 OOP Part 4 - Polymorphism</a></p>
]]></content>
  </entry>
  
</feed>
