<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: concurrent programming | The digital cat]]></title>
  <link href="http://lgiordani.github.io/blog/categories/concurrent-programming/atom.xml" rel="self"/>
  <link href="http://lgiordani.github.io/"/>
  <updated>2013-08-23T17:09:57+02:00</updated>
  <id>http://lgiordani.github.io/</id>
  <author>
    <name><![CDATA[Leonardo Giordani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Lord of the Rings: an Erlang epic]]></title>
    <link href="http://lgiordani.github.io/blog/2013/06/20/the-lord-of-the-rings-an-erlang-epic/"/>
    <updated>2013-06-20T17:49:00+02:00</updated>
    <id>http://lgiordani.github.io/blog/2013/06/20/the-lord-of-the-rings-an-erlang-epic</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p>One of the first really challenging problems an Erlang novice must face is the classical process ring, which can be found around the Internet and most notably in "Erlang Programming" by Cesarini and Thompson (page 115).</p>

<p>Its formulation may vary, but the core of it requires the programmer to design and implement a closed ring of processes, to make them pass a given number of messages each other and then terminate gracefully.</p>

<p>I try here to give an in-depth analysis of the matter, to point out some of the most interesting issues of this exercise. I strongly suggest the Erlang novice to try and solve the exercise before looking at the solutions proposed here.</p>

<!--more-->


<h2>Linking processes</h2>

<p>The aim of the exercise is to build a chain of processes that exchange messages. This latter specification is important since we are required to connect our processes with the only purpose of sending messages and we know that, in Erlang, a process may send a message to another process simply by knowing its pid.</p>

<p>Actual linking between processes, in Erlang, has the aim of making them exchange <em>exit signals</em>; links are thus a mean to control the way the system collapses (or not) when a process crashes. The processes in the ring will thus be linked to ensure that when one of them exits all other processes will be terminated, but this has nothing to do with the ring itself.</p>

<p>The point is to let a process know how to send a message to the next one, forming a chain. This chain, then, is closed, i.e. the last process sends messages to the first one.</p>

<p>There are two main strategies that can be leveraged to get the ring build and behave in a correct way: the <strong>master process</strong> approach and the <strong>recursive</strong> one. For each of the two, I am going to present and analyze the following steps: a ring of processes with <strong>no message</strong> exchange, a ring with <strong>a single message</strong> travelling through it, a ring with <strong>multiple messages</strong> and a ring that exposes a <strong>functional interface</strong> to send messages.</p>

<h2>Debugging</h2>

<p>Debugging concurrent applications is everything but simple. For this exercise, it is however enough to get simple information about which process is forwarding which message. To allow a simple removal of debug prints a very small macro has been included in the file <code>debug.hrl</code>, activated by the definition of <code>debug</code>.</p>

<p>``` erlang
-ifdef(debug).
-define(DEBUG(Format, Args),</p>

<pre><code>    io:format("~p: " ++ Format, [self()] ++ Args)).
</code></pre>

<p>-else.
-define(DEBUG(Format, Args), true).
-endif.
```</p>

<p>This converts the line</p>

<p><code>erlang
?DEBUG("A message~n", []).
</code></p>

<p>to</p>

<p><code>bash
&lt;0.44.0&gt;: A message
</code></p>

<p>where <code>&lt;0.44.0&gt;</code> is the pid of the message calling <code>?DEBUG</code> (only if <code>-define(debug, true).</code> is in the file).</p>

<h2>The “master process” solution</h2>

<p>A good way to face the problem of building the ring is to spawn a <em>master process</em>, which will then spawn all other processes. This solution keeps the creation phase simple since everything happens between the master process and the process that is currently being spawned.</p>

<p>A small caveat: the creation of the ring must be performed <strong>backwards</strong>. When the master process spawns another process the only other process it knows is the process spawned in the previous loop. This means that the master process spawns a process that connects backwards to it, then spawns a process that connects backward to the second one, and so on.</p>

<h4>Building the ring</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (ring_master_no_messages.erl)</span> <a href='/downloads/code/erlang-rings/ring_master_no_messages.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes without message passing</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_master_no_messages</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">debug</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">create</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program uses the first process as a</span>
</span><span class='line'><span class="c">%% master that spawns all other processes. It links to each process it spawns,</span>
</span><span class='line'><span class="c">%% but processes are not linked each other.</span>
</span><span class='line'><span class="c">%% Processes send no messages.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process. There is no need to register the process.</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span> <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/1 needs to be defined so that the first process can call</span>
</span><span class='line'><span class="c">%% create/2 passing its pid through self().</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="n">self</span><span class="p">()).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/2 manages the single process creation; in this version the</span>
</span><span class='line'><span class="c">%% master process just spawns each process and links to it. The exit clause</span>
</span><span class='line'><span class="c">%% is when the proceses counter reaches 1 (that is, we completed the ring).</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">);</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Prev</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="p">[</span><span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Prev</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Prev</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% In this version function loop/1 sits down and does nothing.</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note that the first spawn cannot directly call <code>create/2</code> passing <code>self()</code> since at that moment <code>self()</code> is the pid of the calling process (e.g. the Erlang shell) and not the pid of the first process of the ring, which is what we want. So we have to bypass this by spawning a process which executes <code>create/1</code>, which in turn calls <code>create/2</code> with the pid the process extracted with <code>self()</code>.</p>

<p>This first program spawns a set of processes that sit down and do nothing. Since they are all linked together (through the link with the master process), you can terminate the whole set by sending an exit signal to one of them. You can get the list of pid and names through the shell function <code>i()</code>. Otherwise, you can get and use the pid returned by the function <code>start/1</code>.</p>

<p><code>erlang
1&gt; i().
[...]
2&gt; exit(pid(0,44,0), boom).
</code></p>

<h4>Sending a single message</h4>

<p>Now I am going to develop further the solution by making a single message travel the whole ring.</p>

<p>The code undergoes the following modifications:</p>

<ul>
<li>function <code>start()</code> must accept the message and pass it to <code>create()</code>.</li>
<li>function <code>create()</code> must accept the message</li>
<li>when the ring is ready the master process has to send the message to the second process; then it terminates</li>
<li>each node just forwards the incoming message and terminates</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (ring_master_single_message.erl)</span> <a href='/downloads/code/erlang-rings/ring_master_single_message.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes with a single</span>
</span><span class='line'><span class="c">%%%              message traveling once through the ring.</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_master_single_message</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">debug</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">create</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program uses the first process as a</span>
</span><span class='line'><span class="c">%% master that spawns all other processes. It links to each process it spawns,</span>
</span><span class='line'><span class="c">%% but processes are not linked each other.</span>
</span><span class='line'><span class="c">%% The first process then injects a single message in the ring, sending it to</span>
</span><span class='line'><span class="c">%% the second process.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process. There is no need to register the process.</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span> <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/2 needs to be defined so that the first process can call</span>
</span><span class='line'><span class="c">%% create/3 passing its pid through self().</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="n">self</span><span class="p">(),</span> <span class="nv">Message</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/3 manages the single process creation; in this version the</span>
</span><span class='line'><span class="c">%% master process spawns each process and links to it. Then each process starts</span>
</span><span class='line'><span class="c">%% a loop. When the ring is completed the first process injects the message and</span>
</span><span class='line'><span class="c">%% terminates.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> injects message </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Message</span><span class="p">]),</span>
</span><span class='line'>    <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Message</span><span class="p">;</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Prev</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="p">[</span><span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Prev</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Prev</span><span class="p">,</span> <span class="nv">Message</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Now loop/1 blocks each process making it wait for a message to pass along.</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Msg</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ok</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Beware that a subtle mechanism conceals here: in Erlang, you can always send a message to a pid, even if it the relative process does not exist; in this latter case the message is simply discarded. This feature allows us to make the first process send the message and terminate without having the last process crash by sending a message to it. Remember that you cannot do this with registered processes alias, only with pids.</p>

<h4>Sending multiple messages</h4>

<p>The exercise requests that a message can travel more than once through the whole ring. Adding this possibility is pretty straightforward: it simply requires to add a parameter to <code>start()</code> and <code>create()</code> and to change the loop clauses.</p>

<p>Function <code>loop/1</code> now becomes <code>loop/2</code> and has the following clauses:</p>

<ul>
<li>when the number of remaining travels is 1 the process forwards the message and then terminates.</li>
<li>when the number of remaining travels is more than 1 the process loops again with a decremented value of travels.</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (ring_master_multiple_messages.erl)</span> <a href='/downloads/code/erlang-rings/ring_master_multiple_messages.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes with a single</span>
</span><span class='line'><span class="c">%%%              message traveling multiple times through the ring.</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_master_multiple_messages</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">debug</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">3</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">create</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program uses the first process as a</span>
</span><span class='line'><span class="c">%% master that spawns all other processes. It links to each process it spawns,</span>
</span><span class='line'><span class="c">%% but processes are not linked each other.</span>
</span><span class='line'><span class="c">%% The first process then injects a message in the ring, sending it to the</span>
</span><span class='line'><span class="c">%% second process and when getting the message from the last process, it</span>
</span><span class='line'><span class="c">%% injects it again in the ring a given number of times.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process. There is no need to register the process.</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span> <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/3 needs to be defined so that the first process can call</span>
</span><span class='line'><span class="c">%% create/4 passing its pid through self().</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="n">self</span><span class="p">(),</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/4 manages the single process creation; in this version the</span>
</span><span class='line'><span class="c">%% master process spawns each process and links to it. Then each process starts</span>
</span><span class='line'><span class="c">%% a loop. When the ring is completed the first process injects the message and</span>
</span><span class='line'><span class="c">%% starts looping.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> injects message </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Message</span><span class="p">]),</span>
</span><span class='line'>    <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Message</span><span class="p">,</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Prev</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="p">[</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Prev</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Prev</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p</span><span class="s"> and terminating</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[</span><span class="nv">Msg</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ok</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p</span><span class="s"> (still </span><span class="si">~p</span><span class="s"> time(s))</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[</span><span class="nv">Msg</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As before, we are here relying on the possibility of sending a message to a non existent process.</p>

<h4>Exposing a functional interface</h4>

<p>An Erlang best practice is to expose a functional interface to the user that hides the underlying message passing. We are going to convert our ring program to expose the following functions:</p>

<ul>
<li><code>start/1</code> - starts a ring with the given number of processes</li>
<li><code>stop/0</code> - terminates all processes in the ring</li>
<li><code>send_message/1</code> - sends a message that travels once through the ring</li>
<li><code>send_message/2</code> - sends a message that travels the given number of times through the ring</li>
</ul>


<p>To expose a functional interface you need to register one or more processes, to get a global access point for your functions, so the first change to the code is that the spawned process is registered. Note that <code>Message</code> and <code>NumberProcesses</code> are no more passed to the <code>create()</code> function.</p>

<p><code>erlang
register(ring_master_functional, spawn(?MODULE, create, [NumberProcesses])),
</code></p>

<p>This is not enough. We have to be sure that the whole ring is ready before giving control back to the user issuing <code>start()</code>. Until now the message was sent by the master process just after the creation of the last ring process, so there was no need to synchronize the return of the start function with the spawned processes. Now we need it, so just after registering the master process we wait for a ready message coming from the ring. To allow the ring to send the message to the initial caller we have to pass <code>self()</code> to <code>create()</code>. Pay attention that <code>self()</code> passed to the spawned process is the pid of the external process (e.g. the Erlang shell) while <code>self()</code> passed to <code>create()</code> is the pid of the master ring process.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (ring_master_functional.erl)</span> <a href='/downloads/code/erlang-rings/ring_master_functional.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes that exposes a</span>
</span><span class='line'><span class="c">%%%              functional interface to send messages.</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_master_functional</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="c">%%-define(debug, true).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">stop</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">send_message</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">send_message</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program uses the first process as a</span>
</span><span class='line'><span class="c">%% master that spawns all other processes. It links to each process it spawns,</span>
</span><span class='line'><span class="c">%% but processes are not linked each other.</span>
</span><span class='line'><span class="c">%% The module exposes a functional interface to send messages in the ring</span>
</span><span class='line'><span class="c">%% and to terminate it.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process. The process is registered to allow the</span>
</span><span class='line'><span class="c">%% functional interface to work with it.</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">register</span><span class="p">(</span><span class="n">ring_master_functional</span><span class="p">,</span> <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span>
</span><span class='line'>                                           <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="n">self</span><span class="p">()])),</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="n">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">ok</span>
</span><span class='line'>    <span class="k">after</span> <span class="mi">5000</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">timeout</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Functional interface: terminate the ring</span>
</span><span class='line'><span class="nf">stop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">ring_master_functional</span> <span class="o">!</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">stop</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Functional interface: send a message that travels through the ring once</span>
</span><span class='line'><span class="nf">send_message</span><span class="p">(</span><span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">send_message</span><span class="p">(</span><span class="nv">Message</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Functional interface: send a message that travels through the ring</span>
</span><span class='line'><span class="c">%% Times times</span>
</span><span class='line'><span class="nf">send_message</span><span class="p">(</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">ring_master_functional</span> <span class="o">!</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span><span class="p">]}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/2 needs to be defined so that the first process can call</span>
</span><span class='line'><span class="c">%% create/3 passing its pid through self(). The Starter process is passed to</span>
</span><span class='line'><span class="c">%% allow the ring to send a ready message.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Starter</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="n">self</span><span class="p">(),</span> <span class="nv">Starter</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/3 manages the single process creation; in this version the</span>
</span><span class='line'><span class="c">%% master process spawns each process and links to it. Then each process starts</span>
</span><span class='line'><span class="c">%% a loop. When the ring is completed the first process injects the message and</span>
</span><span class='line'><span class="c">%% terminates.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Starter</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="nv">Starter</span> <span class="o">!</span> <span class="n">ready</span><span class="p">,</span>
</span><span class='line'>    <span class="n">loop_master</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">);</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Starter</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Prev</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="p">[</span><span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Prev</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">create</span><span class="p">(</span><span class="nv">NumberProcesses</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">Prev</span><span class="p">,</span> <span class="nv">Starter</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function loop_master/1 rules the behaviour of the master process (the first</span>
</span><span class='line'><span class="c">%% of the whole ring). When it receives a stop command it forwards it and</span>
</span><span class='line'><span class="c">%% terminates. When it receives a message command if Times is 0 the message is</span>
</span><span class='line'><span class="c">%% thrown away, otherwise is is injected again in the ring with a decremented</span>
</span><span class='line'><span class="c">%% Times value.</span>
</span><span class='line'><span class="nf">loop_master</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">=</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">stop</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>        <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[_</span><span class="nv">Message</span><span class="p">,</span> <span class="mi">0</span><span class="p">]}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">loop_master</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">);</span>
</span><span class='line'>        <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span><span class="p">]}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p</span><span class="s"> (still </span><span class="si">~p</span><span class="s"> time(s)</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Times</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]},</span>
</span><span class='line'>            <span class="n">loop_master</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function loop/1 rules the behaviour of the standard processes.</span>
</span><span class='line'><span class="c">%% When a process receives a stop command it forwards it and</span>
</span><span class='line'><span class="c">%% terminates. When it receives a message command it just forwards it.</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">=</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">stop</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">=</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[_</span><span class="nv">Message</span><span class="p">,</span> <span class="p">_]}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[_</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The exposed functions are very simple. As you can see they use two different messages: <code>{command, stop}</code> and <code>{command, message, [Message, Times]}</code>. One of the advantages of exposing a functional API is that you are free to format your messages according to the current status of the software and change the format if it does no more suit the application needs.</p>

<p>The <code>loop()</code> function has been splitted in two different functions now: <code>loop/1</code> rules the behaviour of the standard ring process, while <code>loop_master/1</code> rules the behaviour of the master process.</p>

<p>The standard process has to react to a stop command, forwarding it and terminating, and to a message command, simply forwarding it. The master process has to check an incoming message to decide if it shall be injected again in the ring.</p>

<h2>A recursive solution</h2>

<p>The simplest way to make a process know the pid of another process is to let the first spawn the second, and this gives us a hint about another way the process ring can be built. Like many things in Erlang, this can be solved recursively by saying:</p>

<p>In a process do:</p>

<ul>
<li>spawn another process and store its pid, call recursively on the spawned process</li>
<li>if you are the last process just connect to the first</li>
</ul>


<p>This solution has the advantage of being very straightforward for an Erlang programmer since it implements the standard recursion pattern. However, it forces the programmer to deal most of the time with the last node, which is a little counterintuitive.</p>

<p>The following programs are the recursive version of the four presented in the previous section. Once grasped the two main differences, building the ring forwards instead of backwards and dealing with the last node instead of the first, the two solutions present pretty much the same evolution steps.</p>

<p>The recursive ring construction.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (ring_recursion_no_messages.erl)</span> <a href='/downloads/code/erlang-rings/ring_recursion_no_messages.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes without message passing</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_recursion_no_messages</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">debug</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program starts the processes in a</span>
</span><span class='line'><span class="c">%% recursive way. Each process spawns the next one and links to it.</span>
</span><span class='line'><span class="c">%% Processes send no messages.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Please remember that io:format() does not always respect processes order</span>
</span><span class='line'><span class="c">%% and that as a general rule printing on the standard output from concurrent</span>
</span><span class='line'><span class="c">%% jobs is not very useful. Here I do this just to show that processes have been</span>
</span><span class='line'><span class="c">%% spawned. Remember to define debug false if you create a ring of more than</span>
</span><span class='line'><span class="c">%% 30-40 processes.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process, registering it under the name</span>
</span><span class='line'><span class="c">%% &#39;ring_recursion_no_messages&#39;.</span>
</span><span class='line'><span class="c">%% Note that spawn() does never fail, but register may; if spawning the</span>
</span><span class='line'><span class="c">%% first process fails an exception is raised and the process calling</span>
</span><span class='line'><span class="c">%% start/1 is terminated.</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">register</span><span class="p">(</span><span class="n">ring_recursion_no_messages</span><span class="p">,</span> <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span>
</span><span class='line'>                                               <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">])).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/1 manages the single process creation; in this version the</span>
</span><span class='line'><span class="c">%% only thing a process shall do is to spawn another process. The exit clause</span>
</span><span class='line'><span class="c">%% is when the proceses counter reaches 1 (that is, the current process is the</span>
</span><span class='line'><span class="c">%% last one): the last process uses &#39;ring_recursion_no_messages&#39; as its next</span>
</span><span class='line'><span class="c">%% process, thus closing the ring.</span>
</span><span class='line'><span class="c">%% Here we use the only parameter(NumberProcesses) as the index for the current</span>
</span><span class='line'><span class="c">%% process, so we end when the parameter is 1. If we want to think of it as the</span>
</span><span class='line'><span class="c">%% number of REMAINING processes the only changes are that the exit clause is</span>
</span><span class='line'><span class="c">%% create(0) instead of create(1), and that the first process is spawned in</span>
</span><span class='line'><span class="c">%% start/1 with [NumberProcesses - 1] as argument. It is only a matter of taste.</span>
</span><span class='line'><span class="c">%% Since all processes in the ring are meant to work together we are linking</span>
</span><span class='line'><span class="c">%% them together to ensure that if one fails all others are terminated.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> (last)</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nb">whereis</span><span class="p">(</span><span class="n">ring_recursion_no_messages</span><span class="p">)]),</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="n">ring_recursion_no_messages</span><span class="p">);</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Next</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span> <span class="p">[</span><span class="nv">NumberProcesses</span> <span class="o">-</span>  <span class="mi">1</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> </span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Next</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">Next</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% In this version function loop/1 sits down and does nothing.</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The recursive ring with a single message travelling.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (ring_recursion_single_message.erl)</span> <a href='/downloads/code/erlang-rings/ring_recursion_single_message.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes with a single</span>
</span><span class='line'><span class="c">%%%              message traveling once through the ring.</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_recursion_single_message</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">debug</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program starts the processes in a</span>
</span><span class='line'><span class="c">%% recursive way. Each process spawns the next one and links to it.</span>
</span><span class='line'><span class="c">%% The last process then injects a single message in the ring, sending it to the</span>
</span><span class='line'><span class="c">%% first process.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process passing the requested message to it</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">register</span><span class="p">(</span><span class="n">ring_recursion_single_message</span><span class="p">,</span> <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span>
</span><span class='line'>                                                  <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">])).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/2 manages the single process creation; in this version each</span>
</span><span class='line'><span class="c">%% process just spawns another process, except the last one, which shall inject</span>
</span><span class='line'><span class="c">%% the message in the ring and terminate.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> (last)</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nb">whereis</span><span class="p">(</span><span class="n">ring_recursion_single_message</span><span class="p">)]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> injects message </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Message</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">ring_recursion_single_message</span> <span class="o">!</span> <span class="nv">Message</span><span class="p">;</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Next</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span> <span class="p">[</span><span class="nv">NumberProcesses</span> <span class="o">-</span>  <span class="mi">1</span><span class="p">,</span> <span class="nv">Message</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> </span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Next</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">Next</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Now loop/1 blocks each process making it wait for a message to pass along.</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">Msg</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ok</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The recursive ring with support for multiple message travels.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (ring_recursion_multiple_messages.erl)</span> <a href='/downloads/code/erlang-rings/ring_recursion_multiple_messages.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes with a single</span>
</span><span class='line'><span class="c">%%%              message traveling multiple times through the ring.</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_recursion_multiple_messages</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">debug</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">3</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program starts the processes in a</span>
</span><span class='line'><span class="c">%% recursive way. Each process spawns the next one and links to it.</span>
</span><span class='line'><span class="c">%% The last process then injects a message in the ring, sending it to the</span>
</span><span class='line'><span class="c">%% first process and when getting the message from the second to last, it</span>
</span><span class='line'><span class="c">%% injects it again in the ring a given number of times.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process passing it the requested message and the number</span>
</span><span class='line'><span class="c">%% of times the message shall travel through the ring.</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">register</span><span class="p">(</span><span class="n">ring_recursion_multiple_messages</span><span class="p">,</span> <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span>
</span><span class='line'>                          <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">])).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/3 manages the single process creation; in this version each</span>
</span><span class='line'><span class="c">%% process spawns another process and then loops, except the last one, which</span>
</span><span class='line'><span class="c">%% shall inject the message in the ring before looping. Since the last process</span>
</span><span class='line'><span class="c">%% starts the message passing it loops an already decremented number of times.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> (last)</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nb">whereis</span><span class="p">(</span><span class="n">ring_recursion_multiple_messages</span><span class="p">)]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> injects message </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Message</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">ring_recursion_multiple_messages</span> <span class="o">!</span> <span class="nv">Message</span><span class="p">,</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="n">ring_recursion_multiple_messages</span><span class="p">,</span> <span class="nv">NumberMessages</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Next</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span>
</span><span class='line'>                      <span class="p">[</span><span class="nv">NumberProcesses</span> <span class="o">-</span>  <span class="mi">1</span><span class="p">,</span> <span class="nv">Message</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> </span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Next</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">Next</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function loop/2 needs two clauses now. The first one is the exit condition,</span>
</span><span class='line'><span class="c">%% when the forward counter reaches 1: the process forwards the message and</span>
</span><span class='line'><span class="c">%% terminates. The second clause is the standard behaviour: the process forwards</span>
</span><span class='line'><span class="c">%% the incoming message and loops again with a decremented counter.</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p</span><span class="s"> and terminating</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[</span><span class="nv">Msg</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ok</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p</span><span class="s"> (still </span><span class="si">~p</span><span class="s"> time(s))</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[</span><span class="nv">Msg</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">NumberMessages</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The recursive ring exposing the functional API.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (ring_recursion_functional.erl)</span> <a href='/downloads/code/erlang-rings/ring_recursion_functional.erl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%%% Author:  Leonardo Giordani &lt;giordani.leonardo@gmail.com&gt;</span>
</span><span class='line'><span class="c">%%% Description: Implements a simple ring of processes that exposes a</span>
</span><span class='line'><span class="c">%%%              functional interface to send messages.</span>
</span><span class='line'><span class="c">%%% Created: Jun 2013 by Leonardo Giordani</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">ring_recursion_functional</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Include some debug macros</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">debug</span><span class="p">,</span> <span class="n">true</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include</span><span class="p">(</span><span class="s">&quot;debug.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% User interface</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">stop</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">send_message</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">send_message</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Private exports</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">create</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">loop</span><span class="o">/</span><span class="mi">1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This version of the processes ring program starts the processes in a</span>
</span><span class='line'><span class="c">%% recursive way. Each process spawns the next one and links to it.</span>
</span><span class='line'><span class="c">%% The module exposes a functional interface to send messages in the ring</span>
</span><span class='line'><span class="c">%% and to terminate it.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% This spawns the first process. The process is registered as in the previous</span>
</span><span class='line'><span class="c">%% recursive versions to allow the last process to connect with the first.</span>
</span><span class='line'><span class="c">%% Moreover, exposing a functional interface needs a global entry point, that is</span>
</span><span class='line'><span class="c">%% the name of the first process.</span>
</span><span class='line'><span class="nf">start</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">register</span><span class="p">(</span><span class="n">ring_recursion_functional</span><span class="p">,</span> <span class="nb">spawn</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span>
</span><span class='line'>                                              <span class="p">[</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="n">self</span><span class="p">()])),</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="n">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">ok</span>
</span><span class='line'>    <span class="k">after</span> <span class="mi">5000</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">timeout</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Functional interface: terminate the ring</span>
</span><span class='line'><span class="nf">stop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">ring_master_functional</span> <span class="o">!</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">stop</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Functional interface: send a message that travels through the ring once</span>
</span><span class='line'><span class="nf">send_message</span><span class="p">(</span><span class="nv">Message</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">send_message</span><span class="p">(</span><span class="nv">Message</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Functional interface: send a message that travels through the ring</span>
</span><span class='line'><span class="c">%% Times times</span>
</span><span class='line'><span class="nf">send_message</span><span class="p">(</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">ring_recursion_functional</span> <span class="o">!</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span><span class="p">]}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function create/2 manages the single process creation; in this version each</span>
</span><span class='line'><span class="c">%% process just spawns another process, except the last one, which connects with</span>
</span><span class='line'><span class="c">%% the first one. The Starter process is passed to allow the ring to send a</span>
</span><span class='line'><span class="c">%% ready message.</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">Starter</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> (last)</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nb">whereis</span><span class="p">(</span><span class="n">ring_recursion_functional</span><span class="p">)]),</span>
</span><span class='line'>    <span class="nv">Starter</span> <span class="o">!</span> <span class="n">ready</span><span class="p">,</span>
</span><span class='line'>    <span class="n">loop_last</span><span class="p">(</span><span class="n">ring_recursion_functional</span><span class="p">);</span>
</span><span class='line'><span class="nf">create</span><span class="p">(</span><span class="nv">NumberProcesses</span><span class="p">,</span> <span class="nv">Starter</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Next</span> <span class="o">=</span> <span class="nb">spawn_link</span><span class="p">(</span><span class="o">?</span><span class="nv">MODULE</span><span class="p">,</span> <span class="n">create</span><span class="p">,</span> <span class="p">[</span><span class="nv">NumberProcesses</span> <span class="o">-</span>  <span class="mi">1</span><span class="p">,</span> <span class="nv">Starter</span><span class="p">]),</span>
</span><span class='line'>    <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Process </span><span class="si">~p</span><span class="s"> created and connected with </span><span class="si">~p</span><span class="s"> </span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span><span class="p">(),</span> <span class="nv">Next</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">loop</span><span class="p">(</span><span class="nv">Next</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function loop_last/1 rules the behaviour of the last process of the whole</span>
</span><span class='line'><span class="c">%% ring). When it receives a stop command it just terminates since the message</span>
</span><span class='line'><span class="c">%% has already been received by all processes in the ring. When it receives a</span>
</span><span class='line'><span class="c">%% message command if Times is 1 the message is thrown away (it just travelled</span>
</span><span class='line'><span class="c">%% through the ring for the last time), otherwise is is injected again in the</span>
</span><span class='line'><span class="c">%% ring with a decremented Times value.</span>
</span><span class='line'><span class="nf">loop_last</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">stop</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>        <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[_</span><span class="nv">Message</span><span class="p">,</span> <span class="mi">1</span><span class="p">]}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">loop_last</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">);</span>
</span><span class='line'>        <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span><span class="p">]}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p</span><span class="s"> (still </span><span class="si">~p</span><span class="s"> time(s)</span><span class="si">~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">,</span> <span class="nv">Times</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">Times</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]},</span>
</span><span class='line'>            <span class="n">loop_last</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% Function loop/1 rules the behaviour of the standard processes.</span>
</span><span class='line'><span class="c">%% When a process receives a stop command it forwards it and</span>
</span><span class='line'><span class="c">%% terminates. When it receives a message command it just forwards it.</span>
</span><span class='line'><span class="nf">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="k">receive</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">=</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">stop</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">ok</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">Msg</span> <span class="o">=</span> <span class="p">{</span><span class="n">command</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[_</span><span class="nv">Message</span><span class="p">,</span> <span class="p">_]}</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="o">?</span><span class="nv">DEBUG</span><span class="p">(</span><span class="s">&quot;Got message </span><span class="si">~p</span><span class="s">, passing it to </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">[_</span><span class="nv">Message</span><span class="p">,</span> <span class="nv">NextProcess</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">NextProcess</span> <span class="o">!</span> <span class="nv">Msg</span><span class="p">,</span>
</span><span class='line'>            <span class="n">loop</span><span class="p">(</span><span class="nv">NextProcess</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Conclusions</h2>

<p>The process ring is an exercise that can be solved in many ways (I just presented the two more straightforward ones) but makes the programmer face problems that may later rise in real-world applications. For this reason, it is an invaluable sandbox where the Erlang programmer can try different approaches to solve both the concurrency and the topology problems.</p>

<p>Keep in touch for other Erlang articles on <a href="/blog/categories/erlang/">this page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Error handling in Erlang - a primer]]></title>
    <link href="http://lgiordani.github.io/blog/2013/05/30/error-handling-in-erlang-a-primer/"/>
    <updated>2013-05-30T11:41:00+02:00</updated>
    <id>http://lgiordani.github.io/blog/2013/05/30/error-handling-in-erlang-a-primer</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p>This article aims to summarize Erlang error handling both in sequential and in concurrent environments. The targets of this article are novices that, like me, make their first steps into the beautiful world of Erlang. Moreover, I always find that trying to explain things makes me understand them better.</p>

<p>Disclaimer (for Erlang gurus): I'm a complete Erlang novice so please be indulgent with me while you read my thoughts. Corrections and suggestions are welcome!</p>

<!--more-->


<h2>Introduction</h2>

<p>Recently I started studying Erlang; coming from a pure imperative background (C, C++, and Python) I have to say that Erlang has been a surprise and a joy. I did not find something so innovative since long, even if the pure functional part of the language was not totally new since it is available in Python too.</p>

<p>The concept of runtime <em>system</em>, with a support for concurrency built in the language itself, the pattern matching idea and the recursion as a way to implement loops are all very intriguing, so learning them is fun (pun intended, if you do not get it review Erlang anonymous functions).</p>

<p>One of the innovative concepts that ploughed through my imperative mind was that of <em>defensive programming</em> under its formulation in the Erlang tenet "Let it crash". This was something new, partly because I rarely found advice on system organization while learning the foundations of a programming language and partly because about 80% of the code I write has the task of avoiding programs to crash.</p>

<p>I found <a href="http://mazenharake.wordpress.com/2009/09/14/let-it-crash-the-right-way/">this very interesting post</a> of Mazen Harake on the subject. Basically, he clarifies that the Erlang philosophy is not that of just let errors happen and propagate: the point is that the programmer should deal only with errors that are <em>documented</em>. This means that the code specification includes that error as a possibility. Well, it is not my intention to state something already well explained: go and read Mazen's post.</p>

<p>Anyway, before discussing the Erlang way of dealing with code errors, it is necessary to firmly grasp syntax and structures that the language provides.</p>

<h2>Exceptions in Erlang</h2>

<p>The simplest way to make something go wrong when dealing with a computer is to treat it like a sentient being. Joking apart, a good way to crash a program is to execute a division by zero.</p>

<p>``` erlang
1> 1/0.
** exception error: bad argument in an arithmetic expression</p>

<pre><code> in operator  '/'/2
    called as 1 / 0
</code></pre>

<p>2>
```</p>

<p>As you can see Erlang does not get mad at your provocation and simply <strong>raises and exception</strong>, i.e. signals that something went wrong, giving some details about why and where it happened. This is not different from what other languages, like Python, do.</p>

<p>```python</p>

<blockquote><blockquote><blockquote><p>1/0
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ZeroDivisionError: integer division or modulo by zero</p>

<p>```</p></blockquote></blockquote></blockquote>

<p>So exceptions are in Erlang, as in other languages, a "reserved channel" the language uses to propagate errors. If you code in C, you cannot leverage something like exceptions and must rely on return values. This means that you have to format the results of your functions so that they can host a wrong result too and end up returning an <code>int</code> with the error code while functions results are managed by reference.</p>

<p>Back to Erlang. Exceptions crash you program, i.e. they make your program immediately stop, reporting the error to the system process that executed it (usually the OS GUI or a textual shell). Indeed the Erlang shell crashed when you tried to reach for the infinity.</p>

<p>``` erlang
1> self().
&lt;0.32.0>
2> 1/0.
** exception error: bad argument in an arithmetic expression</p>

<pre><code> in operator  '/'/2
    called as 1 / 0
</code></pre>

<p>3> self().
&lt;0.35.0>
4>
<code>``
Remember that in Erlang</code>self()` gives you the Erlang PID of the process (not the operating system's one). As you can see the Eshell process crashed and was restarted by some magic behind the scenes.</p>

<p>I hear you mumble that, well, world is not perfect, and errors happen. So how do we deal with this? Shall we crash every time something wrong occurs in our code or is there some way to unravel the knot and happily continue running the code?</p>

<p>This seems to be a question that even Erlang creators wanted to answer, and their answer was: you can, but you shouldn't always. By now, let us drop the "you shouldn't always" part and learn the basics; you can stop an exception before it crashes your pretty program. Before diving into stopping exceptions techniques, let me review the types of exception you may encounter.</p>

<h2>Exception types</h2>

<p>There are three types (or classes) of exceptions in Erlang: <em>throw</em>, <em>error</em>, and <em>exit</em>.</p>

<p>The first, throw, identifies an exception that a called function voluntarily raises (throwing it at you); such exceptions shall be documented, i.e. the documentation of the function you are calling shall state that this exception may be raised and specify under what conditions this may happen. "Shall" here means that if the programmer does not document the exception all sorts of curses will be casted on his or her code forever. As a Python programmer I strongly advice you to read "shall" as "must".</p>

<p>The second exception type, error, signals that something very bad happened in the system, something that was unexpected to the author of the code raising the exception. Even if this type of exception can be raised explicitly, it is usually raised by the Erlang run-time system. If you recall the first example of this post, the division by zero, you can now understand why the shell printed "exception error"; that exception has not been raised by an instruction in the code of the Erlang shell, but from the run-time system itself. This type of exception also contains a stack trace, but I will not cover it in this article.</p>

<p>The third and last exception type, exit, means that your code is being told to stop immediately.</p>

<p>As you can see the real difference between the three types is the communication intent, not a special behaviour. So from the pure theoretical point of view an error exception can be replaced by a throw exception without any side effect. Obviously, the communication intent is not negligible: indeed, as explained before, throw exceptions are usually documented while errors are not intended for being formalized.</p>

<p>In addition to a class, exceptions encompass a <em>reason</em>, that is a valid Erlang item (an atom, an integer, a pid, ...). The reason carries the explanation of the exception, i.e. a detailed insight in what really happened.</p>

<h2>Dealing with exceptions</h2>

<p>Now that we got acquainted with Erlang exception types we may step further into exception management structures and learn how to stop exceptions from crashing our programs. The way of managing exceptions raised by a function called in our code should be familiar to Python, C++, java and Ruby developers (and to many others, probably); the basic Erlang syntax is</p>

<p><code>erlang
try &lt;expressions&gt; of
  &lt;result_pattern_matching&gt;
catch
  &lt;exception_pattern_matching&gt;
after
  &lt;after_expressions&gt;
end
</code></p>

<p>The large part of this structure is well known. Here, <code>&lt;expressions&gt;</code> is a series of Erlang expressions, comma-separated as usual; the <code>&lt;result_pattern_matching&gt;</code> part is a classical Erlang pattern matching structure, just like that you write in a case construct; last, the <code>&lt;after_expressions&gt;</code> is a series of Erlang expressions. The <code>&lt;exception_pattern_matching&gt;</code> part has a slightly new syntax we will cover in a moment.</p>

<p>The structure works like in other languages: the <code>&lt;expressions&gt;</code> code is evaluated and the result is pattern matched against <code>&lt;result_pattern_matching&gt;</code> and the result is returned by the whole <code>try</code> statement. If an exception is raised when evaluating <code>&lt;expressions&gt;</code>, it is pattern matched against the code listed in <code>&lt;exception_pattern_matching&gt;</code> and the relative code is executed. Regardless of what happens in the try/catch part the code in <code>&lt;after_expressions&gt;</code> is executed, and its result is not returned.</p>

<p>The exception matching code has a syntax that is very similar to that of the usual pattern matching, but exceptions are listed in the new form <code>ExceptionType:Reason</code>, where type and reason have been already described in the previous section. When the exception is a run-time error the reason is one of the values listed <a href="http://erlang.org/doc/reference_manual/errors.html#exit_reasons">here</a>.</p>

<p>So the complete form of a try/catch statement in Erlang is the following, where <code>Expressions</code> is always a comma-separated list of Erlang expressions.</p>

<p><code>erlang
try Expression1,...,ExpressionN of
  Pattern1 [when Guard1] -&gt; PatternExpressions1;
  Pattern2 [when Guard2] -&gt; PatternExpressions2;
  ...
  PatternN [when GuardN] -&gt; PatternExpressionN
catch
  ExceptionType:Reason1 [when ExceptionGuard1] -&gt; ExceptionExpressions1;
  ExceptionType:Reason2 [when ExceptionGuard2] -&gt; ExceptionExpressions2;
  ...
  ExceptionType:ReasonN [when ExceptionGuardN] -&gt; ExceptionExpressionsN
after
  AfterExpressions
end.
</code></p>

<p>Exceptions pattern matching allows the use of the do-not-care variable <code>_</code> not only for reasons but for also for types. So the following syntax catches all exceptions of type ExceptionType</p>

<p><code>erlang
...
catch
  ExceptionType: _ -&gt; ExceptionExpressions1;
end
</code></p>

<p>while the following catches all exceptions</p>

<p><code>erlang
...
catch
  _:_ -&gt; ExceptionExpressions1;
end
</code></p>

<p>I will not cover here the old-style error handling mechanism with <code>catch</code>; the interested reader can find it documented <a href="http://erlang.org/doc/reference_manual/expressions.html#id79206">here</a>.</p>

<h2>Returning values from try/catch statements</h2>

<p>Try/catch statements return the value of the last expression executed, that is one of <code>PatternExpression1</code>,...,<code>PatternExpressionN</code> if no exception is raised, or one of <code>ExceptionExpressions1</code>,...,<code>ExceptionExpressionsN</code>. This means that we can assign the value of the whole expression to a variable</p>

<p><code>erlang
Result = try Expression of ... end.
</code></p>

<p>Remember that <code>AfterExpressions</code> are always executed, but their final value is not returned by the statement.</p>

<p>Since a lot of times you want to return the result of the expression after the <code>try</code> keyword, you can omit the <code>of</code> part</p>

<p><code>erlang
try Expressions
catch
 ...
end.
</code></p>

<h2>Raising exceptions</h2>

<p>Erlang provides three different BIFs to raise exceptions, profitably called like the exception type they raise: <code>throw/1</code>, <code>erlang:error/1</code>, and <code>exit/1</code>. As you see, <code>error/1</code> is not automatically imported by the system and must be called in its full form. This is a hint for us programmers: <code>error/1</code> is there and can be used, but it is not something you should need often; otherwise, you misunderstood what an error exception is in Erlang.</p>

<p>So in most cases, if your code encounters an error condition and you need to raise an exception, you end up using <code>throw/1</code> or <code>exit/1</code>. The argument of these functions is the reason of the exception: remember that you can format the reason you attach to your exception to match your needs, you only need to document it.</p>

<p><code>erlang
my_function(Somebadvalue) -&gt; throw({badvalue, Somebadvalue}).
</code></p>

<p>Pay attention, however, that exceptions are a double-edged sword; the fact that they return values through a reserved channel is powerful, but can lead to subtle bugs and to long debug sessions. The advice in Erlang is to spare throw() for some special cases and to try always to communicate the failure through standard function results. This is, however, part of a coding philosophy that cannot be examined in depth here.</p>

<h2>Exceptions and exit signals</h2>

<p>Erlang is a run-time system, not just a language; as such, it has built-in structures and concepts that are usually provided by libraries in other languages. One of these concepts is the dependency between processes, which may be realized through <em>links</em> (and <em>monitors</em>, but I am not going to introduce them in this article). Process linking in Erlang means a very simple thing: when two processes are linked they die together, i.e. when one of the two terminates abnormally the other one is terminated too. A process can link to more than one other process, and the dying behaviour is propagated among all them.</p>

<p>What is the point of this structure? In Erlang, you are encouraged to spawn processes to accomplish tasks, even the simplest ones. Thus, you can easily end up with a multitude of processes working together to perform some action, and if one of them crashes it is likely that others should exit too, being them dependent from it. This is not mandatory; it is all up to you to decide what processes have to be linked, but if they are they must die together.</p>

<p>How is this accomplished? Linked processes are connected by a hidden communication channel, which carries information about their termination with so-called <em>exit signals</em>. Exit signals are invisible to the programmer, and when a process receives one of them it simply terminates, spreading the news under the form of other exit signals.</p>

<h4>Process termination and reasons</h4>

<p>Exit signals are always sent when a process dies, but they carry a reason for its termination, just like exceptions. This reason is very important for the subsequent events concerning processes linked to the dying one.</p>

<p>First of all let us look at process termination. A process in Erlang can terminate normally or abnormally: the former happens when it has no more code to execute or when it raises an exception passing as reason the atom <code>normal</code>; the latter occurs when a raised exception has a reason different from the atom <code>normal</code>.</p>

<p>So an exit signal process contains either the atom <code>normal</code> or another reason, and it travels from the terminating process to each linked process. When it hits one of them, if the reason is not <code>normal</code> the process is terminated and sends its own exit signals to its linked processes with the same reason of the incoming one. The result is that the entire network of linked processes terminates automatically.</p>

<p>The best way to terminate a process with a reason is to execute the BIF <code>exit(Reason)</code>. This BIF has also the form of arity 2 where you pass the pid of a process <code>exit(Pid, Reason)</code>: the addressed process will get an exit signal with the given reason. A caveat: when using <code>exit/1</code> the exit signal will contain the pid of the terminating process, when using <code>exit/2</code> the exit signal will contain the pid of the target process.</p>

<h4>Stopping exit signals</h4>

<p>Having a way to stop an entire group of processes when one of them crashes is a big benefit, but it could be a good thing to be able to stop the propagation somewhere. Obviously, if processes are not linked they do not influence each other when terminating, but this also means that no one notices that a process terminated, which in turn means that no one will be restarting it.</p>

<p>The whole point of linking processes is indeed the control over terminating processes. If a process runs there is a reason and if it crashes the system should investigate why it crashed and possibly restart it.</p>

<p>Erlang gives a process the chance to receive an abnormal exit signal from a process it is linked to, without forcing it to terminate: in Erlang speech this is called <em>trapping exit signals</em> or <em>trapping exits</em>. When a process traps exits the incoming exit signals coming from linked processes are converted by the run-time system into messages that the process can fetch with a <code>receive</code> construct. Thus, a process trapping exits can be notified that a linked process died without being affected by this.</p>

<p>A process can start trapping exits by executing the BIF <code>process_flag(trap_exit, true)</code>. It is a best practice to call it at the beginning of the process and to avoid turning it off during the execution since it makes the system difficult to debug.</p>

<p>Once the BIF has been executed, an exit signal with the reason <code>Reason</code> coming from another process is converted in an incoming message under the form <code>{'EXIT', Pid, Reason}</code>, where Pid is the pid of the terminated process.</p>

<h4>Unstoppable exit signals</h4>

<p>Now we can convert a process so that it does not terminate with its linked processes. This has a downside: if the process contains errors such as infinite loops or if for some reason we need to stop the entire system, the processes that trap exits cannot be stopped. For this reason, Erlang provides the special atom <code>kill</code> as a reason for an exit signal.</p>

<p>An exit signal containing the reason <code>kill</code> cannot be trapped; thus the exit signal is unstoppable. Unconditionally terminating the entire network is however something dangerous, so when a process terminates because of an incoming <code>kill</code> exit signal it will send to its linked processes a <code>killed</code> exit signal, which can be possibly trapped.</p>

<h2>Conclusions</h2>

<p>The aim of the article was to give an overview of error handling in Erlang: not everything has been covered, but a novice should find here almost everything he or she needs to step into this part of the language.</p>

<p>There is obviously much more than this in the Erlang treasure chest. If the whole link and exit signals stuff thrilled you like it did with me, I promise you that OTP behavious (sorry, behaviors) will take your breath away.</p>

<p>Keep in touch for other Erlang articles on <a href="/blog/categories/erlang/">this page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrent programming - 6]]></title>
    <link href="http://lgiordani.github.io/blog/2013/04/23/concurrent-programming-6/"/>
    <updated>2013-04-23T08:29:00+02:00</updated>
    <id>http://lgiordani.github.io/blog/2013/04/23/concurrent-programming-6</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p>Issue 5 of this series ended with a small program where two processes exchanged ten numbers through a message queue, thus being a synchronized producer-consumer couple. This time I am going to show and comment the code of a very simple communication simulator written in C. The code leverages IPC queues to allow multiple processes to talk each other while running concurrently.</p>

<!--more-->


<h2>The simulator</h2>

<p>The program simulates a messaging switch, where multiple users (child processes) connect to a central switch (parent process) and send text messages (SMS-like) to other users through it. The switch receives messages and route them if the recipient is reachable (process is running). Moreover, the switch can perform a timing operation on a user, checking how much time the user needs to answer a message, or select it for termination. Last, the switch counts how many times a user sends a message to an unreachable user and when a threshold is reached terminates it. Switch and user decisions are taken extracting pseudo-random numbers and comparing them with thresholds given on the command line. Remember that the simulation wants to demonstrate a concrete use of message queues and does not claim to be a complete communication system between processes.</p>

<h2>10,000 feet overview</h2>

<p>I splitted the simulator in 3 parts, namely two stacked layers of function and the main application code. The first layer implements the message structure, provides functions to interact with it (getters and setters), exports basic functions to manage queues and to send and receive messages. The second layer exports functions that implement the protocol, i.e. the actions users and switch can perform. Last, the main function contains the actual logic of the whole simulation. Due to the instructional purpose of the simulation some of the solution implemented are far from optimal or even correct (e.g. random numbers management); I suggest you to try to evolve the simulation, adding new services or messages between users.</p>

<h2>Debugging nightmares</h2>

<p>Be ready to spend some time debugging your multiprocessing applications! If you ever debugged some code, you know that the most friendly bugs are by far those which are reproducible: you only need to add some debugging output or step through the code with the debugger and the bug is spotted. Multiprocessing and network application are at the very opposite corner: most of the time the bugs in that sort of applications are very difficult to reproduce, when not impossible. The concurrent execution of multiple processes, indeed, makes every execution unique, since the actual execution sequence is random (random means that it is the result of so many factors that the result is unpredictable and thus irreproducible). Network programs suffers from the same problems (concurrent execution), worsened by network lags that add a factor of randomness.</p>

<h2>Code and analysis</h2>

<p>I am not going to include the whole code of the layers directly in the post text as they are a straightforward implementation of what was presented in the previous articles; the code of the main application is, on the contrary, analyzed block by block. The links to the source files are at the end of the article, together with compilation instructions.</p>

<h2>Layer 1</h2>

<h4>Message structure</h4>

<p>The structure of the message is</p>

<p>``` c
typedef struct
{
 int sender;
 int recipient;
 char text[160];
 int service;
 int service_data;
} message_t;</p>

<p>typedef struct
{
 long mtype;
 message_t mtext;
} messagebuf_t;
```</p>

<p>Here, <code>sender</code> and <code>recipient</code> are numbers that identify the switch and the users (0 is the switch, then users are numbered increasingly when they connect to the switch); <code>text</code> is the content of a message a user sends to another user, and is 160 characters long to mimic SMS behaviour. Last <code>service</code> is the identifier of some system operation, like a request the switch sends to the users; <code>service_data</code> carries the optional data the service needs to communicate. Actual services are implemented in layer 2 and I am going to describe them later.</p>

<h4>Other functions</h4>

<p>Layer 1 exposes many functions: some are simple set and get functions to deal with the message structure while five simplify access to IPC structures; <code>build_key()</code> makes an IPC key from a given character, <code>create_queue()</code> and <code>remove_queue()</code> manage IPC queues and last <code>send_message()</code> and <code>receive_message()</code> give a simple way to route messages.</p>

<p>A very simple error management code has been introduced here: C language does not allow to use exceptions, so errors have to be managed by functions or returned through the <code>return</code> statement. A solid error management in C is outside the scope of this article, so here you will find the bare minimum.</p>

<p>The error management of <code>receive_message()</code> needs a little explanation.</p>

<p>``` c
int receive_message(int qid, long type, messagebuf_t *qbuf){
  int result, length;
  length = sizeof(messagebuf_t) - sizeof(long);</p>

<p>  if((result = msgrcv(qid, (struct msgbuf *)qbuf, length, type, IPC_NOWAIT)) == -1){</p>

<pre><code>if(errno == ENOMSG){
  return 0;
}
else{
  perror("msgrcv");
  exit(1);
}
</code></pre>

<p>  }</p>

<p>  return result;
}
```</p>

<p>Here, <code>msgrcv()</code> fails even when there are no messages of the given type, producing a <code>ENOMSG</code> error. This is the reason why that case has been ignored through the <code>if(errno == ENOMSG)</code> construct.</p>

<h2>Layer 2</h2>

<h4>The protocol</h4>

<p>Layer2 implements the actual communication protocol between the switch and the users. Users send text messages to other users, and those messages are routed by the switch. Users and switch can also send service messages; those are messages encompassing information used to manage the system.</p>

<p>Every user, when spawned, initializes a queue, connects to the switch and communicates the queue id. Since the queues can contain old unread messages, it is necessary to empty them before the use. Each user enters a loop where it sleeps a while, receives service messages, sends messages and last receives text messages. At the same time, the switch collects queue ids, routes text messages from the sender to the recipient and sometimes sends a service request to a user.</p>

<p>The services the switch can request from users are to terminate and to test the answering time. Both can be requested on a probability base, but the first is also forced when the user sends too many messages to unreachable recipients.</p>

<p>The answering time test is performed in a simple way: the switch requests the service and records the time of the request. The user answers with a message that contains the time at which it received the request and the switch computes the difference between the two. Pay attention that both the timing service and the random number extraction used to request services on a probability base are not exact; the code works but is good only for a demonstration system.</p>

<p>I defined some useful constants in the header file: <code>MAX_SLEEP</code> is the maximum number of seconds a user waits before performing an action while <code>TYPE_SERVICE</code> and <code>TYPE_TEXT</code> identify the type of message. The defines which name starts with <code>SERVICE_</code> list all the possible services: <code>SERVICE_TERMINATE</code> forces a user to quit; <code>SERVICE_TIME</code> makes it perform a timing operation; <code>SERVICE_CONNECT</code> and <code>SERVICE_DISCONNECT</code> tell the switch a new user has connected or disconnected; <code>SERVICE_QID</code> bears the identifier of the user queue to the switch; <code>SERVICE_UNREACHABLE_DESTINATION</code> communicates a user that the recipient of a message is no more online.</p>

<h4>Queues</h4>

<p>Two functions are dedicated to queues, <code>init_queue()</code> and <code>close_queue()</code>. The first builds an IPC key from a given number (previously converting it to a char) and runs the <code>create_queue()</code> function from layer 1. Because of the char conversion the range of integers it can accept is 0-255, and for simplicity's sake there is no check in the whole code that a queue key has not yet been assigned. For this example, I am simply leveraging that different numbers return different keys and, thus, queues.</p>

<p>The second function closes the queue running the <code>remove_queue()</code> function from layer 1. The underlying system calls are not used directly to allow the future introduction of checks on the assigned queues.</p>

<h4>User functions</h4>

<p>Users have five functions that implement their part of the protocol. Two functions communicate to the switch that the user connected or disconnected, namely <code>user_send_connect()</code> and <code>user_send_disconnect()</code>; both carry the <code>sender</code> id and the switch id <code>sw</code>, which however in the main program is always 0. The <code>user_send_qid()</code> function communicates to the switch the queue id of the user; <code>user_send_text_message()</code> sends a string of text to another user and <code>user_send_time()</code> answers the timing service.</p>

<h4>Switch functions</h4>

<p>The switch can execute <code>switch_send_text_message()</code> to deliver a text message sent by a user; <code>switch_send_terminate()</code> to ask a user to terminate; <code>switch_send_time()</code> to ask a user to perform a timing service.</p>

<h4>Code analysis</h4>

<p>Now I will briefly review the whole application code to better explain the different parts of the system. Please remember that this is a demonstration system so many choices have been made for simplicity's sake.</p>

<p>``` c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;unistd.h></h1>

<h1>include &lt;linux/ipc.h></h1>

<h1>include &lt;linux/msg.h></h1>

<h1>include &lt;time.h></h1>

<h1>include &lt;signal.h></h1>

<h1>include &lt;wait.h></h1>

<h1>include "layer1.h"</h1>

<h1>include "layer2.h"</h1>

<h1>define MINCHILDS 1</h1>

<h1>define MAXCHILDS 15</h1>

<h1>define MAXFAILS 10</h1>

<p>```</p>

<p>After the list of includes, you will find three defines that rule the number of child processes the system can spawn and the maximum number of messages a user can send to unreachable recipients before the switch asks it to terminate.</p>

<p>``` c
int random_number(int max)
{
  double r,x;
  r = (double) random();
  x = r * (double) max / RAND_MAX;
  return((int) x);
}</p>

<p>void usage(char *argv[])
{
  printf("Telephone switch simulator\n");
  printf("%s <number of users> <service probability> <text message probability>\n", argv[0]);
  printf("\n");
  printf("     <number of users> - Number of users alive in the system (%d - %d)\n", MINCHILDS, MAXCHILDS);
  printf("     <service probability> - The probability that the switch requires a service from the user (0-100)\n");
  printf("     <text message probability> - The probability the a user sends a message to another user (0-100)\n\n");
}
```</p>

<p>The <code>random_number()</code> function is used to extract a random number between 0 and a maximum <code>max</code>; <code>RAND_MAX</code> is a define of the standard library and represents the maximum number the <code>random()</code> function can return and in the GNU C library it is 2<sup>31</sup> (2147483647); here it is used to calculate a proportion with the maximum value given by the caller. The <code>usage()</code> function helps the user remembering the command line arguments; as you can see, the program receives 3 mandatory input values: the number of users that the switch can spawn; the probability that the switch requests a service to a user when this latter sends a message; the probability that a user sends a text message to another user.</p>

<p>``` c
int main(int argc, char *argv[])
{
  pid_t pid;
  int i;</p>

<p>  int users_number;
  int service_probability;
  int text_message_probability;</p>

<p>  int status;
  int deadproc = 0; /<em> A counter of the already terminated user processes </em>/
  int qid;
  int sw; /<em> Qid of the switch </em>/
  int dest; /<em> Destination of the message </em>/
  int olddest; /<em> Destination of the previous message </em>/</p>

<p>  int queues[MAXCHILDS + 1]; /<em> Queue identifiers - 0 is the qid of the switch </em>/</p>

<p>  int msg_sender;
  int msg_recipient;
  char msg_text[160];
  int msg_service;
  int msg_service_data;</p>

<p>  int t;
  int timing[MAXCHILDS + 1][2];</p>

<p>  int unreachable_destinations[MAXCHILDS + 1];</p>

<p>  char *padding = "                                                                      ";
  char text[160];</p>

<p>  messagebuf_t msg, in;</p>

<p><code>``
Many of these variables are just helpers that simplify the code;</code>queues<code>holds the queue identifier of each process;</code>timing<code>holds the information about user timing service results;</code>unreachable_destinations<code>contains how many times each user sent a message to an unreachable recipient;</code>dest<code>and</code>olddest<code>are used to avoid a user to send a message to the recipient of the previous one.  The</code>padding` variable is a quick and dirty way to create two columns, the left one filled by switch messages and the right one by user ones.</p>

<p>Remember that in C you have to declare variables at the beginning of the program while in C++ you can declare them anywhere. This means that child processes, a copy of the parent, carry in memory some variables such as <code>queues</code> and <code>timings</code> that are used only by the switch. This is both a waste of resources and a dangerous situation, so remember that in general statically allocated variables are not a good choice for concurrent programs.</p>

<p>``` c
  /<em> Command line argument parsing </em>/
  if(argc != 4){</p>

<pre><code>usage(argv);
exit(0);
</code></pre>

<p>  }</p>

<p>  users_number = strtol(argv[1], NULL, 10);<br/>
  service_probability = strtol(argv[2], NULL, 10);
  text_message_probability = strtol(argv[3], NULL, 10);</p>

<p>  if((users_number &lt; MINCHILDS) || (users_number > MAXCHILDS)){</p>

<pre><code>usage(argv);
exit(1);
</code></pre>

<p>  }</p>

<p>  if((service_probability &lt; 0) || (service_probability > 100)){</p>

<pre><code>usage(argv);
exit(0);
</code></pre>

<p>  }</p>

<p>  if((text_message_probability &lt; 0) || (text_message_probability > 100)){</p>

<pre><code>usage(argv);
exit(0);
</code></pre>

<p>  }</p>

<p>  printf("Number of users: %d\n", users_number);
  printf("Probability of a service request: %d%%\n", service_probability);
  printf("Probability of a text message: %d%%\n", text_message_probability);
  printf("\n");</p>

<p>  /<em> Initialize the random number generator </em>/
  srandom(time(NULL));
```</p>

<p>All these lines contain initialization code and checks for the values passed on the command line.</p>

<p>``` c
  /<em> Switch queue initialization </em>/
  sw = init_queue(255);</p>

<p>  /<em> Read the last messages we have in the queue </em>/
  while(receive_message(sw, TYPE_TEXT, &amp;in)){</p>

<pre><code>printf("%d -- S -- Receiving old text messages\n", (int) time(NULL), i);
</code></pre>

<p>  }</p>

<p>  /<em> Read the last messages we have in the queue </em>/
  while(receive_message(sw, TYPE_SERVICE, &amp;in)){</p>

<pre><code>printf("%d -- S -- Receiving old service messge\n", (int) time(NULL), i);
</code></pre>

<p>  }</p>

<p>  /<em> All queues are "uninitialized" (set equal to switch queue) </em>/
  for(i = 0; i &lt;= users_number; i++){</p>

<pre><code>queues[i] = sw;
unreachable_destinations[i] = 0;
</code></pre>

<p>  }
```</p>

<p>The switch initializes its queue; this has to be done before spawning users since the <code>sw</code> variable will be copied in each child process and used to communicate with the switch. The queue is initialized with the number 255 just to be sure that no child process initializes the same queue. As explained, IPC queues provide no mechanism to ensure uniqueness of the instanced queues, so we have to establish our own system; in this simple example we spawn a maximum of 15 users, so we could also use <code>16</code> or <code>MAXCHILDS+1</code> to initialize the switch queue. Since queues are shared structures and nothing prevents the system to assign to a process a previously used queue we must ensure that the queue is empty, so the switch reads and discards all text and service messages found in its queue. Last, the <code>queues</code> and <code>unreachable_destinations</code> arrays are initialized.</p>

<p>``` c
  /<em> Create users </em>/
  for(i = 1; i &lt;= users_number; i++){</p>

<pre><code>pid = fork();

if (pid == 0){
  srandom(time(NULL) + 1000*i);

  /* Initialize queue  */
  qid = init_queue(i);

  /* Read the last messages we have in the queue */
  while(receive_message(qid, TYPE_TEXT, &amp;in)){
    printf("%s%d -- U %02d -- Receiving old text messages\n", padding, (int) time(NULL), i);
  }

  /* Read the last messages we have in the queue */
  while(receive_message(qid, TYPE_SERVICE, &amp;in)){
    printf("%s%d -- U %02d -- Receiving old service messge\n", padding, (int) time(NULL), i);
  }

  /* Let the switch know we are alive */
  user_send_connect(i, sw);

  /* Let the switch know how to reach us */
  user_send_qid(i, qid, sw);
</code></pre>

<p>```</p>

<p>This code spawns the users and from here the code splits in two, and the code of the user processes is inside the if construct. As you can see, the user acts like the switch at the very beginning, initializing its own queue and flushing the possible messages it contains. After this, the user sends the switch a message to communicate that it is alive and sends its qid to allow the user to communicate.</p>

<p>``` c</p>

<pre><code>  /* Enter the main loop */
  while(1){
    sleep(rand()%MAX_SLEEP);

    /* Check if the switch requested a service */
    if(receive_message(qid, TYPE_SERVICE, &amp;in)){
      msg_service = get_service(&amp;in);

      switch(msg_service){

      case SERVICE_TERMINATE:
        /* Send an acknowledgement to the switch */
        user_send_disconnect(i, getpid(), sw);

        /* Read the last messages we have in the queue */
        while(receive_message(qid, TYPE_TEXT, &amp;in)){
          msg_sender = get_sender(&amp;in);
          get_text(&amp;in, msg_text);
          printf("%s%d -- U %02d -- Message received\n", padding, (int) time(NULL), i);
          printf("%s                      Sender: %d\n", padding, msg_sender);
          printf("%s                      Text: %s\n", padding, msg_text);
        }

        /* Remove the queue */
        close_queue(qid);
        printf("%s%d -- U %02d -- Termination\n", padding, (int) time(NULL), i);
        exit(0);
        break;

      case SERVICE_TIME:
        user_send_time(i, sw);
        printf("%s%d -- U %02d -- Timing\n", padding, (int) time(NULL), i);
        break;
      }
    }
</code></pre>

<p>```</p>

<p>The user loops infinitely and at each loop sleeps a random number of seconds. After that, it checks its message queue for service messages (<code>receive_message()</code> with the parameter <code>TYPE_SERVICE</code>); if the requested service is <code>SERVICE_TERMINATE</code>, an acknowledgement is sent to the switch (<code>user_send_disconnect()</code>) so that the user is marked as offline and no more messages are sent with it as recipient. The user then reads all remaining text messages in its queue and closes the queue. Last with <code>exit()</code>the user process terminates. If the requested service is <code>SERVICE_TIME</code>, the user simply sends the current time back to the switch through <code>user_send_time()</code>.</p>

<p>``` c</p>

<pre><code>    /* Send a message */
    if(random_number(100) &lt; text_message_probability){
      dest = random_number(users_number + 1);

      /* Do not send a message to the switch, to yourself and to the previous recipient */
      while((dest == 0) || (dest == i) || (dest == olddest)){
        dest = random_number(users_number + 1);
      }
      olddest = dest;

      printf("%s%d -- U %02d -- Message to user %d\n", padding, (int) time(NULL), i, dest);
      sprintf(text, "A message from me (%d) to you (%d)", i, dest);
      user_send_text_message(i, dest, text, sw);
    }

    /* Check the incoming box for simple messages */
    if(receive_message(qid, TYPE_TEXT, &amp;in)){
      msg_sender = get_sender(&amp;in);
      get_text(&amp;in, msg_text);
      printf("%s%d -- U %02d -- Message received\n", padding, (int) time(NULL), i);
      printf("%s                      Sender: %d\n", padding, msg_sender);
      printf("%s                      Text: %s\n", padding, msg_text);
    }
  }
}
</code></pre>

<p>  }
```</p>

<p>The user extracts a random number and tests it against the probability given on the command line; if the test gives a positive result the user extracts a random user, avoiding the switch (<code>dest == 0</code>), itself (<code>dest == i</code>) and the recipient of the previous message it sent (<code>dest == olddest</code>). The new recipient is saved in <code>olddest</code>, and the message is sent through <code>user_send_text_message()</code>. This part ends the user code.</p>

<p>``` c
  /<em> Switch (parent process) </em>/
  while(1){</p>

<pre><code>/* Check if some user is answering to service messages */
if(receive_message(sw, TYPE_SERVICE, &amp;in)){
  msg_service = get_service(&amp;in);
  msg_sender = get_sender(&amp;in);

  switch(msg_service){
  case SERVICE_CONNECT:
    /* A new user has connected */
    printf("%d -- S -- Service: connection\n", (int) time(NULL));
    printf("                   User: %d\n", msg_sender);
    break;

  case SERVICE_DISCONNECT:
    /* The user is terminating */
    printf("%d -- S -- Service: disconnection\n", (int) time(NULL));
    printf("                   User: %d\n", msg_sender);

    deadproc++;
    break;

  case SERVICE_QID:
    /* The user is sending us its queue id */
    msg_service_data = get_service_data(&amp;in);
    printf("%d -- S -- Service: queue\n", (int) time(NULL));
    printf("                   User: %d\n", msg_sender);
    printf("                   Qid: %d\n", msg_service_data);
    queues[msg_sender] = msg_service_data;
    break;

  case SERVICE_TIME:
    msg_service_data = get_service_data(&amp;in);

    /* Timing informations */
    timing[msg_sender][1] = msg_service_data - timing[msg_sender][1];

    printf("%d -- S -- Service: timing\n", (int) time(NULL));
    printf("                   User: %d\n", msg_sender);
    printf("                   Timing: %d\n", timing[msg_sender][1]);

    /* The user is no more blocked by a timing operation */
    timing[msg_sender][0] = 0;
    break;
  }
}
</code></pre>

<p>```</p>

<p>The switch code has a structure similar to that of the user code. It loops infinitely with a <code>while(1)</code> statement, and inside this it checks for incoming messages and acts accordingly. The first thing it does is to check for service messages. If the service is <code>SERVICE_CONNECT</code> a user is communicating that it is alive, and the switch simply print out a log of this event; when a user disconnects it sends a <code>SERVICE_DISCONNECT</code> message and the switch increases the number of dead processes to monitor the number of active user processes; if the service is a <code>SERVICE_QID</code> a user is sending the switch its queue identifier and this is stored in the <code>queues</code> array; last, the <code>SERVICE_TIME</code> messages mean that a user is answering a timing request; its answer is compared with the recorded send time and the result is printed.</p>

<p>``` c</p>

<pre><code>/* Check if some user has connected */
if(receive_message(sw, TYPE_TEXT, &amp;in)){

  msg_recipient = get_recipient(&amp;in);
  msg_sender = get_sender(&amp;in);
  get_text(&amp;in, msg_text);

  /* If the destination is connected */
  if(queues[msg_recipient] != sw){
    /* Send the message (forward it) */
    switch_send_text_message(msg_sender, msg_text, queues[msg_recipient]);

    printf("%d -- S -- Routing message\n", (int) time(NULL));
    printf("                   Sender: %d -- Destination: %d\n", msg_sender, msg_recipient);
    printf("                   Text: %s\n", msg_text);
  }
  else{
    unreachable_destinations[msg_sender] += 1;

    if (unreachable_destinations[msg_sender] &gt; MAXFAILS) {
      continue;
    }

    printf("%d -- S -- Unreachable destination\n", (int) time(NULL));
    printf("                   Sender: %d -- Destination: %d\n", msg_sender, msg_recipient);
    printf("                   Text: %s\n", msg_text);
    printf("                   Threshold: %d/%d\n", unreachable_destinations[msg_sender], MAXFAILS);

    if (unreachable_destinations[msg_sender] == MAXFAILS) {
      printf("%d -- S -- User %d reached max unreachable destinations\n", (int) time(NULL), msg_sender);

      switch_send_terminate(queues[msg_sender]);

      /* Remove its queue from the list */
      queues[msg_sender] = sw;
    }
  }
</code></pre>

<p>```</p>

<p>Here, the switch checks the queue for incoming text messages users send to other users. If the recipient is connected (reachable) the message is routed through <code>switch_send_text_message()</code>; otherwise the counter of failed dispatches <code>unreachable_destinations</code> is incremented for that user; when the maximum number of failures <code>MAXFAILS</code> is reached the switch sends that user a termination request.</p>

<p>``` c</p>

<pre><code>  /* Randomly request a service to the sender of the last message */
  if((random_number(100)  &lt; service_probability) &amp;&amp; (queues[msg_sender] != sw)){
    if (random_number(100) &lt; 40){
      /* The user must terminate */
      printf("%d -- S -- User %d chosen for termination\n", (int) time(NULL), msg_sender);

      switch_send_terminate(queues[msg_sender]);

      /* Remove its queue from the list */
      queues[msg_sender] = sw;
    }
    else {
      /* Check if we are already timing that user */
      if(!timing[msg_sender][0]){
        timing[msg_sender][0] = 1;
        timing[msg_sender][1] = (int) time(NULL);
        printf("%d -- S -- User %d chosen for timing...\n", timing[msg_sender][1], msg_sender);
        switch_send_time(queues[msg_sender]);
      }
    }
  }
}
</code></pre>

<p>```</p>

<p>Each user that sends a message through the switch can be selected as the destination of a service request. Here, the switch tests a random number against the probability given on the command line, ensuring that the users is not already unreachable. The probability of a termination service is hardcoded (40%), the other case being the timing service; when this latter is requested, the switch sends a message to the user recording the dispatch time so that it can be later compared with the user answer.</p>

<p>``` c</p>

<pre><code>else{
  if(deadproc == users_number){
    /* All childs have been terminated, just wait for the last to complete its jobs */
    waitpid(pid, &amp;status, 0);

    /* Remove the switch queue */
    remove_queue(sw);

    printf("\n");
    printf("No more active users. Switch turns off.\n");

    /* Terminate the program */
    exit(0);
  }
}
</code></pre>

<p>  }
}
```</p>

<p>When there are no incoming messages the switch checks if the number of dead processes is equal to the number of users; when this happens the switch waits for each child process (to avoid zombie processes), removes its queue and terminates.</p>

<h2>Files and compilation</h2>

<p>The 5 files of this small program can be downloaded here:</p>

<ul>
<li><a href="/downloads/code/ipc_demo/layer1.h">layer1.h</a></li>
<li><a href="/downloads/code/ipc_demo/layer1.c">layer1.c</a></li>
<li><a href="/downloads/code/ipc_demo/layer2.h">layer2.h</a></li>
<li><a href="/downloads/code/ipc_demo/layer2.c">layer2.c</a></li>
<li><a href="/downloads/code/ipc_demo/main.c">main.c</a></li>
</ul>


<p>and can be compiled with the following command line</p>

<p><code>bash
gcc -o ipc_demo main.c layer1.c layer2.c
</code></p>

<p>A typical execution can be obtained running the program with the following parameters</p>

<p><code>bash
./ipc_demo 8 30 80
</code></p>

<p>Remember that the output lines of the processes are mixed and generally not in order; indeed, you can find the answer of a user printed before the switch request. Timestamps can help you find the right order, but the resolution of the <code>time()</code> function is a second, and in such a time span many messages can be sent.</p>

<h2>Conclusions</h2>

<p>This article ends by now this little series on concurrent programming in C and IPC structures. As you can see C is not the best language to implement concurrent programming concepts, due to its very low level nature. However, since many OSs are written in C (and/or C++) knowledge of the way this language can provide concurrent execution is useful.</p>

<p>There is much left to say about concurrent programming structures: atomicity, mutual exclusions, threads, monitors are just some of the most important. I will post new articles on such topics in the future, perhaps showing their implementation in other languages.</p>

<h2>Past articles</h2>

<p><a href="/blog/2013/01/31/concurrent-programming-1">Concurrent Programming 1</a></p>

<p><a href="/blog/2013/02/04/concurrent-programming-2">Concurrent Programming 2</a></p>

<p><a href="/blog/2013/02/06/concurrent-programming-3">Concurrent Programming 3</a></p>

<p><a href="/blog/2013/02/13/concurrent-programming-4">Concurrent Programming 4</a></p>

<p><a href="/blog/2013/02/28/concurrent-programming-5">Concurrent Programming 5</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrent programming - 5]]></title>
    <link href="http://lgiordani.github.io/blog/2013/02/28/concurrent-programming-5/"/>
    <updated>2013-02-28T17:49:00+01:00</updated>
    <id>http://lgiordani.github.io/blog/2013/02/28/concurrent-programming-5</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p>In the past articles we introduced the concept of concurrent programming and studied a first solution to the problem of intercommunication: semaphores. As explained, the use of semaphores allows us to manage access to shared resources, and this is a first and very simple form of synchronization. In this issue, we will go one step further introducing a richer tool for concurrent programming: <em>message queues</em>.</p>

<!-- more -->


<h2>Limits of semaphores</h2>

<p>Ruling access to a resource through semaphores is a good form of synchronization, even if it is very limited. Indeed it prevents two or more processes simultaneously modifying shared data but does not allow them to exchange information.</p>

<p>Moreover, the basic use of semaphores does not guarantee the absence of dangerous situations. As an example remember that, in a multitasking environment, we do not know in advance which process will be executed and when. This means that a resource could be inaccessible for a process since it is always blocked by other processes.</p>

<p>Thus, while being a good tool in the multitasking programmer's bag, semaphores are not the final solution to his or her problems. So we now introduce a new tool which plays a big role in multitasking and distributed systems called <strong>message queues</strong>.</p>

<h2>Message queues theory</h2>

<p>Since message queues are one of the most important structures in computer science, let us dive into them at a slow pace. So first of all, what is a <strong>message</strong> in this context? Simply stated, a message is some <strong>data</strong> with a given <strong>format</strong>, which is a complex form to say everything. Indeed in the context of communication between processes, or computers, a message is a stream of bits which must be formatted according to a previously agreed format, where format means a set of rules the stream of bit must obey.</p>

<p>For example, we could simply state that a message is a raw extended <a href="http://en.wikipedia.org/wiki/ASCII">ASCII</a> string: this means that the stream must contain a multiple of 8 bits (since each extended ASCII character is represented by 8 bits). Our format is very simple, in this case, but it is enough to state that a message made of 377 bit is invalid. We can also make a message encompass entire files, and there is in general no limit to the size.</p>

<p>Now we have a definition of message. What is a <strong>queue</strong>? A queue is a list structure, where a given number of <em>homogeneous</em> objects can be stored. An object can be inserted in the list (<strong>push</strong>ed) and extracted from it (<strong>pop</strong>ped). Usually a queue in the messaging environment is a FIFO (First In First Out) one, meaning that the first object pushed is the first object popped. There is a plenty of mathematical and computer science theory about queues, buffers, FIFO, LIFO and other list types, and we will not review such topics here. Just a notice, to open further research by the reader: the stack, one of the most important concepts in programming, is also a memory buffer, or a queue, where the computer stores function calls and local variables.</p>

<p>So message queues are buffers where arbitrary (but homogeneous) objects called messages can be stored for a later retrieval.</p>

<p>Every process can create one or more queues and every process can send a message to one of them. The only prerequisite is that the unique identifier of the queue must be known. Since we are now working with processes spawned by a fork operation, each process can know the identifier of a queue if the queue has been created before executing <code>fork()</code>.</p>

<p>The knowledge of a queue identifier makes it is also possible to read messages from it. Messages can be accessed sequentially, reading the messages in chronological order (from the oldest, the first, to the most recent, the last arrived), but selectively, that is considering only the messages of a certain type: this last feature give us a sort of control on the priority of the messages we read.</p>

<p>Queues, therefore, can be used to implement several communication scenarios, from the simplest ones where all processes send messages to and read messages from the same queue, to more complex solutions such as a full mail system between processes.</p>

<p>Irrespective of the communication framework we set for our processes, synchronization can now be performed through a richer tool. Processes needing synchronization can exchange messages to establish the correct timings schedule when performing actions. Messages, thus, do not replace semaphores, but, as already seen, cover functionalities that they cannot provide.</p>

<p>Before we can switch to implement message queues in C language, it is necessary to speak about another problem related to messages: the need of a <em>communication protocol</em>.</p>

<h2>Creating a protocol</h2>

<p>A <strong>protocol</strong> is a set of rules which control the interaction of elements in a set. Every time you must regulate the exchange of information between two or more actors in a scenario you need a protocol, even when dealing with humans and not computers.</p>

<p>In <a href="/blog/2013/02/13/concurrent-programming-4">the past article</a> we implemented a very simple protocol when instructing processes to access a resource according to the status of a semaphore. This latter is also modified as part of the protocol itself.</p>

<p>As already stated in a past article, there is no difference between interprocess communication on the same machine or in a distributed environment (multiple machines): indeed, every network protocol (TCP/IP, DNS, SMTP, just to cite some of the most famous) is built on a message exchange architecture.</p>

<p>This is a simple example of a protocol based on message exchange: two processes, A and B, are executing concurrently and processing different data. Once they end the processing they have to merge their results. Here, synchronization problems arise: what process actually does the merging? If the process in charge of the merging operation is the process A, for example, the merging protocol can be described by these time charts, one for each process</p>

<h4>PROCESS B</h4>

<ol>
<li>Work with your data</li>
<li>When you finish send a message to A</li>
<li>When A answers, begin sending it your results</li>
</ol>


<h4>PROCESS A</h4>

<ol>
<li>Work with your data</li>
<li>Wait for a message from B</li>
<li>Answer the message</li>
<li>Receive data and merge them with yours</li>
</ol>


<p>Choosing the merger process is in this case totally arbitrary. This, however, can be a very important part of a protocol.</p>

<p>This protocol is extensible ina simple way to the case of n processes: every process but A works with its own data and then send a message to A. When A answers, the other process sends its results: the only process modified in this generalization is A since it has to receive messages from multiple processes instead of just one.</p>

<h2>System V Message Queues</h2>

<p>Now it is the time to speak about implementing these concepts in a Linux operating system environment. As already said we have a set of primitives that allow us to manage the structures related to message queues, and they are very similar to those dedicated to semaphore management, already described in <a href="/blog/2013/02/13/concurrent-programming-4">the past article</a>.</p>

<p>The structure used to describe a message is <code>msgbuf</code> and is declared in <code>linux/msg.h</code></p>

<p><code>c
/* message buffer for msgsnd and msgrcv calls */
struct msgbuf {
   long mtype;         /* type of message */
   char mtext[1];      /* message text */
};
</code></p>

<p>The field <code>mtype</code> represents the type of the message and is a strictly positive number: the correspondence between numbers and message types has to be set in advance and is part of the protocol definition.</p>

<p>The second field represents the content of the message. With the standard definition, no real message can be held inside it because the space is too little (just one byte). This is just a placeholder since the real structure used to describe messages can be redefined in order to contain complex data. An example of redefinition is the following</p>

<p><code>c
struct message {
   long mtype;         /* message type */
   long sender;        /* sender id */
   long receiver;        /* receiver id */        
   struct info data;   /* message content */
};
</code></p>

<p>As you can see this is not a redefinition in the sense of object inheritance, being C a pure procedural language. The redefined structure must obey two simple rules: the first field must be a <code>long mtype</code> and the maximum size dimension shall be 8192 bytes.</p>

<p>This last limit is hard coded in the Linux kernel, i.e. there is a C <code>#define</code> directive in <code>linux/msg.h</code> which states</p>

<p>``` c</p>

<h1>define MSGMAX  8192   /<em> &lt;= INT_MAX </em>/   /<em> max size of message (bytes) </em>/</h1>

<p>```</p>

<p>In the same file, there are other interesting limits such as <code>MSGMNB</code>, the maximum total size of a queue, which in Linux is set by default to 16384. That means that a queue containing 2 messages is already full.</p>

<p>A short notice about kernel parameters such as <code>MSGMAX</code>, <code>MSGMNB</code> and others: kernel parameters can obviously be changed by modifying the source code and recompiling the kernel, that is generating a custom Linux kernel. Varying some parameters, however, can be dangerous for the portability of your programs. Indeed, if you increase the maximum size of a message to, say, 16384 bytes, in order to host big messages, your application will crash on a kernel without that modification, where the maximum size is still 8192. Kernel parameters can also be changed at runtime through the <code>/proc</code> filesystem and the sysctl interface: these topics are very rich and important and thus deserve a larger space. For the time being, I let the reader research about them.</p>

<h4>Create a queue</h4>

<p>To create a new queue a process should call the <code>msgget()</code> function</p>

<p><code>c
int msgget(key_t key, int msgflg)
</code></p>

<p>which receives as arguments an IPC key (see <a href="/blog/2013/02/13/concurrent-programming-4">issue 4</a>) and some flags, which by now can be set to <code>IPC_CREAT | 0660</code> (create the queue if it does not exist
and grant access to the owner and group users). The returned integer is called queue identifier and is unique in the system.</p>

<h4>Send messages</h4>

<p>To send a message to a queue we call the <code>msgsnd()</code> primitive</p>

<p><code>c
int msgsnd(int msqid, struct msgbuf *msgp, int msgsz, int msgflg)
</code></p>

<p>where <code>msqid</code> is the identifier of the queue, <code>msgp</code> is a pointer to the message we have to send, <code>msgz</code> the size of the message in bytes (excluding the length of the <code>mtype</code> field, which is 4 bytes) and <code>msgflg</code> a flag related to the waiting policy.</p>

<p>Here, <code>msgp</code> is a pointer to a <code>struct msgbuf</code>. However, since that structure has been redefined, our actual call will contain a pointer to a variable of the redefined type.</p>

<p>The length of the message in bytes can be easily be found as</p>

<p><code>c
length = sizeof(struct message) - sizeof(long);
</code></p>

<p>where <code>struct message</code> is our redefinition of <code>struct msgbuf</code>.</p>

<p>Waiting policies are similar to those introduced for semaphores. This time the policy is used when the queue is full. If <code>msgflg</code> is set to <code>IPC_NOWAIT</code>, the sender process will not wait for some available space and will exit with an error code.</p>

<h4>Read messages</h4>

<p>To read messages contained in a queue we use the <code>msgrcv()</code> system call</p>

<p><code>c
int msgrcv(int msqid, struct msgbuf *msgp, int msgsz, long mtype, int msgflg)
</code></p>

<p>where the <code>msgp</code> pointer identifies the variable where we will copy the message read from the queue and mtype identifies the subset of messages we want to consider. As before, <code>msgp</code> should be a pointer to a variable of our redefined type and both <code>msgz</code> and <code>msgflg</code> have the same meaning of their counterparts in <code>msgsnd()</code>.</p>

<h4>Delete a queue</h4>

<p>Last, a queue can be removed calling the <code>msgctl()</code> primitive</p>

<p><code>c
int msgctl(int msqid, int cmd, struct msqid_ds *buf);
</code></p>

<p>where the command <code>cmd</code> to remove the queue is <code>IPC_RMID</code>. Other two commands, <code>IPC_STAT</code> and <code>IPC_SET</code>, are available through <code>msgctl()</code>, but they are not interesting now.</p>

<h2>Putting it all together</h2>

<p>Let's test all these concepts with a simple program which creates a message queue, sends a message to it, reads the message and cancels the queue. After the message has been read, a comparison between the original values and the ones in the message is performed to check that the system is working.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>queues1  (queues1.c)</span> <a href='/downloads/code/queues1.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/ipc.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/msg.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Redefines the struct msgbuf */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">mymsgbuf</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">mtype</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">int_num</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">float_num</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">ch</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">message_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">qid</span><span class="p">;</span>
</span><span class='line'>  <span class="n">key_t</span> <span class="n">msgkey</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">message_t</span> <span class="n">sent</span><span class="p">;</span>
</span><span class='line'>  <span class="n">message_t</span> <span class="n">received</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Initialize the seed of the pseudo-random number generator */</span>
</span><span class='line'>  <span class="n">srand</span> <span class="p">(</span><span class="n">time</span> <span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Length of the message */</span>
</span><span class='line'>  <span class="n">length</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">message_t</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">msgkey</span> <span class="o">=</span> <span class="n">ftok</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Create the queue*/</span>
</span><span class='line'>  <span class="n">qid</span> <span class="o">=</span> <span class="n">msgget</span><span class="p">(</span><span class="n">msgkey</span><span class="p">,</span> <span class="n">IPC_CREAT</span> <span class="o">|</span> <span class="mo">0660</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;QID = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">qid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Build a message */</span>
</span><span class='line'>  <span class="n">sent</span><span class="p">.</span><span class="n">mtype</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sent</span><span class="p">.</span><span class="n">int_num</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
</span><span class='line'>  <span class="n">sent</span><span class="p">.</span><span class="n">float_num</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)(</span><span class="n">rand</span><span class="p">())</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sent</span><span class="p">.</span><span class="n">ch</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">rand</span><span class="p">())</span><span class="o">%</span><span class="mi">26</span> <span class="o">+</span> <span class="mi">97</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Send the message */</span>
</span><span class='line'>  <span class="n">msgsnd</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sent</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;MESSAGE SENT</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Receive the message */</span>
</span><span class='line'>  <span class="n">msgrcv</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">received</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">sent</span><span class="p">.</span><span class="n">mtype</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;MESSAGE RECEIVED</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Control that received and sent messages are equal */</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Interger number = %d (sent %d) -- &quot;</span><span class="p">,</span> <span class="n">received</span><span class="p">.</span><span class="n">int_num</span><span class="p">,</span> <span class="n">sent</span><span class="p">.</span><span class="n">int_num</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">received</span><span class="p">.</span><span class="n">int_num</span> <span class="o">==</span> <span class="n">sent</span><span class="p">.</span><span class="n">int_num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot; OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;ERROR</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Float number = %f (sent %f) -- &quot;</span><span class="p">,</span> <span class="n">received</span><span class="p">.</span><span class="n">float_num</span><span class="p">,</span> <span class="n">sent</span><span class="p">.</span><span class="n">float_num</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">received</span><span class="p">.</span><span class="n">float_num</span> <span class="o">==</span> <span class="n">sent</span><span class="p">.</span><span class="n">float_num</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot; OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;ERROR</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Char = &#39;%c&#39; (sent &#39;%c&#39;) -- &quot;</span><span class="p">,</span> <span class="n">received</span><span class="p">.</span><span class="n">ch</span><span class="p">,</span> <span class="n">sent</span><span class="p">.</span><span class="n">ch</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">received</span><span class="p">.</span><span class="n">ch</span> <span class="o">==</span> <span class="n">sent</span><span class="p">.</span><span class="n">ch</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot; OK</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;ERROR</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Destroy the queue */</span>
</span><span class='line'>  <span class="n">msgctl</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="n">IPC_RMID</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we can create two processes and let them communicate through a message queue. Remembering forking concepts explained in the <a href="/blog/2013/02/04/concurrent-programming-2">issue 2</a> you can recall that the child process, when created, receives a copy of the memory of its parent. This means that creating the queue before the fork operation results in both the parent and the child knowing the right queue identifier and thus capable of access it.</p>

<p>The following code creates a queue, then forks the execution. The child generates a random number, prints it on the standard output and sends them to the parent, which in turn prints it on the screen.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>queues2  (queues2.c)</span> <a href='/downloads/code/queues2.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/ipc.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/msg.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Redefines the message structure */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">mymsgbuf</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">mtype</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">message_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">qid</span><span class="p">;</span>
</span><span class='line'>  <span class="n">key_t</span> <span class="n">msgkey</span><span class="p">;</span>
</span><span class='line'>  <span class="n">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">message_t</span> <span class="n">buf</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">length</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">length</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">message_t</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">msgkey</span> <span class="o">=</span> <span class="n">ftok</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">qid</span> <span class="o">=</span> <span class="n">msgget</span><span class="p">(</span><span class="n">msgkey</span><span class="p">,</span> <span class="n">IPC_CREAT</span> <span class="o">|</span> <span class="mo">0660</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">())){</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;CHILD - Queue ID = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">qid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">srand</span> <span class="p">(</span><span class="n">time</span> <span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">sleep</span> <span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>      <span class="n">buf</span><span class="p">.</span><span class="n">mtype</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="n">buf</span><span class="p">.</span><span class="n">num</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">100</span><span class="p">;</span>
</span><span class='line'>      <span class="n">msgsnd</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;CHILD - Sent message number %d: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">buf</span><span class="p">.</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;PARENT - Queue ID = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">qid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">sleep</span> <span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>    <span class="n">msgrcv</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;PARENT - Received message number %d: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">buf</span><span class="p">.</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;PARENT - Waiting for the child to terminate...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">waitpid</span> <span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;PARENT - Child ended</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">msgctl</span><span class="p">(</span><span class="n">qid</span><span class="p">,</span> <span class="n">IPC_RMID</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Compiling and running the program you can check the correct working of the shared message queue.</p>

<h2>Conclusions</h2>

<p>In this article, we introduced a new IPC structure called message queue and the related concepts of message and protocol. These concepts are very important and are going to be the foundation stone of a project we will realize step by step in the future articles: a simple telephone switch simulator.</p>

<h2>Past articles</h2>

<p><a href="/blog/2013/01/31/concurrent-programming-1">Concurrent Programming 1</a></p>

<p><a href="/blog/2013/02/04/concurrent-programming-2">Concurrent Programming 2</a></p>

<p><a href="/blog/2013/02/06/concurrent-programming-3">Concurrent Programming 3</a></p>

<p><a href="/blog/2013/02/13/concurrent-programming-4">Concurrent Programming 4</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrent programming - 4]]></title>
    <link href="http://lgiordani.github.io/blog/2013/02/13/concurrent-programming-4/"/>
    <updated>2013-02-13T10:50:00+01:00</updated>
    <id>http://lgiordani.github.io/blog/2013/02/13/concurrent-programming-4</id>
    <content type="html"><![CDATA[<h2>Abstract</h2>

<p>In the past issue, of this series of articles about concurrent programming we started to concern ourselves with the problems of synchronization between processes. In this installment, we will investigate further the subject introducing some structures and functions collectively known as <em>Unix System V IPC</em>.</p>

<!--more-->


<h2>IPC: InterProcess Communication</h2>

<p>Communication between processes, either running on the same machine or over a network, is one of the most interesting topics in computer science and, despite its age, new solutions to this problem keep arising. With the widespread availability of Internet access, the subject is now a little shifted towards pure network communication, which represents just a part of the techniques known as <strong>IPC</strong>: InterProcess Communication.</p>

<p>This abbreviation encompasses several different scopes in the field of multiprocessing, the most important ones being <strong>synchronization</strong>, <strong>shared data management</strong> and <strong>messaging</strong>. In this article, we will focus on local IPC, i.e. communication between processes running on the same machine. The underlying concepts and techniques, however, can be easily applied to a network environment too, but they require a layer to manage network communication, which is out of the scope of this series.</p>

<h2>More on synchronization</h2>

<p>As briefly shown in the last article synchronization problems are not only among the most complex issues to solve in computer science, but can also lead to severe malfunctions of our software.</p>

<p>Let's reconsider and formalize the example given in the last post. Say we create two different processes working on the same data. If the two processes just read the same data from memory (or disk) no problems can arise: data are static, and accessing does not change them. So the execution of the two processes is called <strong>consistent</strong>, which highlights that repeated executions or executions spanning a long time will always result in the same system behaviour.</p>

<p>If now one of the processes wants to modify data different situations can come up, depending on the actual timing of the operations. Say we have two processes <code>A</code> and <code>B</code> and an element <code>d</code>; process <code>A</code> increases element <code>d</code> by 1 while process <code>B</code> prints the element value on the screen. In a sort of metalanguage, we could express this situation with the following syntax</p>

<p><code>
A { d-&gt;d+1 } &amp; B { d-&gt;output }
</code></p>

<p>where <code>&amp;</code> stands for a concurrent execution; in other words the two processes are not synchronized. One of the possible resulting executions is</p>

<p><code>
(-) d = 5
(A) d = 6
(B) output = 6
</code></p>

<p>while the other is</p>

<p><code>
(-) d = 5
(B) output = 5
(A) d = 6
</code></p>

<p>As you can see, different timings can lead to different results; let's pretend that element <code>d</code> is the amount of money in your bank account, and you will suddenly realize the importance of the matter. Such a reliance of data on timing or system conditions is known as <strong>data inconsistency</strong>.</p>

<p>As we already described, waiting is a trivial form of synchronization that can solve this problem. However it is as simple as inefficient as it blocks the execution of one process while the other is operating and this happens even if the blocked process is no more operating on shared data. The block is indeed based on the simple assumption that one process could lead to data inconsistency.</p>

<p>It is thus necessary to increase the <strong>granularity</strong> of this block. Granularity is the scope of an action: the higher is the granularity the narrowest is the scope. So we have to restrict the scope of the block, which by now covers the whole process.</p>

<h2>System V keys</h2>

<p>A part of the IPC structures introduced by Unix System V is explicitly dedicated to resource identification, the capability of labelling arbitrary objects and limiting access management to them. This is done through the use of the so-called <em>SysV IPC Keys</em>: a <strong>key</strong>, in this context, is a number used to identify univocally an IPC structure. An IPC key can be generated by <code>ftok()</code></p>

<p><code>c
key_t ftok(const char *pathname, int proj_id);
</code></p>

<p>where <code>pathname</code> is an existing file name with the full path and <code>proj_id</code> is a number without any restriction. It is guaranteed that the returned key is the same for subsequent calls with the same parameters, but it is not guaranteed that different parameters result in different keys: in other words <em>keys are not guaranteed to be unique</em>. Since IPC functions require a key created with <code>ftok()</code> the best solution is to write a small library that keeps track of assigned keys and avoids duplicates.</p>

<h2>Semaphores - part 1</h2>

<p>The idea of traffic light can be profitably borrowed to control access to resources. A <strong>semaphore</strong>, in the IPC world, is a structure capable of containing a positive or null integer and which manages a queue of processes waiting for a particular condition of the semaphore itself.</p>

<p>Despite their simplicity, the power of semaphores is big, thus their correct use is not trivial. We will therefore start writing code without error control, just to focus on the real subject. Please remember that in real world applications, error control code can vary from 40% up to 80% of the total amount, so bear in mind that code without error control is good only for the purpose of understanding concepts.</p>

<p>The first possible use of a semaphore is that of access controller: the value of the semaphore represents the number of processes that can concurrently access the resource. Every time a process access the resource it decrements the value of the semaphore and every time a process releases the resource it increments the value. If the resource is exclusive (that is only one process can access the resource at a time), the maximum value of the semaphore will be 1.</p>

<p>A second use of the semaphore is that of resource counter. The value in this case is the number of resources available to processes, e.g. memory cells, network connections, and so on. As you can easily understand, using a resource is equivalent to locking its access.</p>

<p>Let's consider a practical case where both the uses of semaphores will be useful.</p>

<p>We build a buffer of length L where n processes W1,..., Wn can write to, but from which just one process R can read. Say also that just one process can access the buffer at a given time T. As you can easily understand W processes can write at any time except when the buffer is full while the process R can read at any time except when the buffer is empty.</p>

<p>This buffer could be easily managed in a standard single task environment by declaring 2 flags, the first to signal overflow and the second to signal underflow. We are in a multitasking environment now, so flags declared before the fork operation are not shared between processes (each process has its own copy of the flags, and they are not linked). So we have to use a shared structure, and this is where IPC semaphores take the field.</p>

<p>We can declare three semaphores: the first one will manage access to the buffer while the second and third will keep track of how many elements are in the buffer (later it will become clear why two semaphores are not sufficient).</p>

<p>Given that access to the buffer is exclusive the first semaphore will be a binary one (which value thus will be 0 or 1) while the second and the third will have values linked to the length of the buffer.</p>

<p>In C language the SysV primitive to create a semaphore is</p>

<p><code>c
int semget(key_t key, int nsems, int semflg);
</code></p>

<p>where <code>key</code> is an IPC key created with <code>ftok()</code>, <code>nsems</code> is the number of semaphores we want to create and <code>semflg</code> a set of flags controlling access to the semaphores. Access to IPC structures is ruled by a 12 bit system which is almost identical to the Unix file system access control, but we will not dive into it. As you can also notice <code>semget()</code> manages sets of semaphores, which helps us to keep the code compact.</p>

<p>Let's review the full code to create a semaphore</p>

<p>``` c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;linux/types.h></h1>

<h1>include &lt;linux/ipc.h></h1>

<h1>include &lt;linux/sem.h></h1>

<p>int main(void)
{
  key_t key;
  int semid;</p>

<p>  key = ftok("/etc/fstab", getpid());</p>

<p>  /<em> create a semaphore set with only 1 semaphore: </em>/
  semid = semget(key, 1, 0666 | IPC_CREAT);</p>

<p>  return 0;
}
```</p>

<p>Do not compile and execute it by now. As you can see from the <code>#include</code> statements, IPC structures are provided by the operating system itself and not by the standard C library. The key is created by passing to <code>ftok()</code> a file that certainly exists in the system and the PID of the current process. To know more about permission flags check the manual page for <code>semget()</code>.</p>

<p>Let's go on learning to manage and remove semaphores; the primitive used to interact with a semaphore is</p>

<p><code>c
int semctl(int semid, int semnum, int cmd, ...)
</code></p>

<p>where <code>semid</code> is the semaphore set identifier returned from <code>semget()</code>, <code>semnum</code> the index of the semaphore inside the set and <code>cmd</code> the command you want to run. The value <code>semnum</code> is optional for some commands. Some commands need also an additional argument which type is <code>union semun</code>, defined as</p>

<p>``` c
union semun {
 int val;                  /<em> value for SETVAL </em>/
 struct semid_ds <em>buf;     /</em> buffer for IPC_STAT, IPC_SET <em>/
 unsigned short </em>array;    /<em> array for GETALL, SETALL </em>/</p>

<pre><code>                       /* Linux specific part: */
</code></pre>

<p> struct seminfo <em>__buf;    /</em> buffer for IPC_INFO */
};
```</p>

<p>To set the value of a semaphore the command is <code>SETVAL</code> and the value is specified through a <code>union semun</code> variable. To set the value of the first semaphore to 1 we modify the program this way</p>

<p>``` c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;linux/types.h></h1>

<h1>include &lt;linux/ipc.h></h1>

<h1>include &lt;linux/sem.h></h1>

<p>int main(void)
{
  key_t key;
  int semid;
  union semun arg;</p>

<p>  key = ftok("/etc/fstab", getpid());</p>

<p>  /<em> create a semaphore set with only 1 semaphore: </em>/
  semid = semget(key, 1, 0666 | IPC_CREAT);</p>

<p>  arg.val = 1;
  semctl(semid, 0, SETVAL, arg);</p>

<p>  return 0;
}
```</p>

<p>Last we have to cancel the semaphore releasing the structures needed for its management; this is done by the command <code>IPC_RMID</code>, which removes the semaphore and notifies all processes queued to access it that it has been removed. Let this notification aside for the moment and change the code to remove the semaphore</p>

<p>``` c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;linux/types.h></h1>

<h1>include &lt;linux/ipc.h></h1>

<h1>include &lt;linux/sem.h></h1>

<p>int main(void)
{
  key_t key;
  int semid;
  union semun arg;</p>

<p>  key = ftok("/etc/fstab", getpid());</p>

<p>  /<em> create a semaphore set with only 1 semaphore: </em>/
  semid = semget(key, 1, 0666 | IPC_CREAT);</p>

<p>  arg.val = 1;
  semctl(semid, 0, SETVAL, arg);</p>

<p>  /<em> deallocate semaphore </em>/
  semctl(semid, 0, IPC_RMID);</p>

<p>  return 0;
}
```</p>

<p>Now you can compile and run it. As you can imagine the program seems to do nothing: it just silently creates a semaphore, sets its value and removes it.</p>

<h2>Semaphores - part 2</h2>

<p>Time to use effectively the semaphore: the function that allows to performs operations on a semaphore is</p>

<p><code>c
int semop(int semid, struct sembuf *sops, unsigned nsops);
</code></p>

<p>where <code>semid</code> is the set identifier, <code>sops</code> an array of operations and <code>nsops</code> the length of this latter. Each operation is declared through a <code>struct sembuf</code></p>

<p>``` c
struct sembuf {</p>

<pre><code>ushort  sem_num;        /* semaphore index in array */
         short   sem_op;         /* semaphore operation */
         short   sem_flg;        /* operation flags */
</code></pre>

<p>};
```</p>

<p>For the time being we will always set <code>sem_flg</code> to 0. Operations are always integers and obey the following rules</p>

<ol>
<li><p><code>sem_op</code> &lt; 0 This signals that you want to decrease the semaphore value, or in other words lock one of the resources controlled by it. If the value of the semaphore can be decremented without becoming negative it will be and the process running <code>semop()</code> continues. Otherwise, the calling process falls in a sleep status until the semaphore has that number of resources available.</p></li>
<li><p><code>sem_op</code> = 0 This signals that you are waiting for the semaphore to reach value zero; that is the condition where no resources are available. The calling process falls in a sleep status until that moment.</p></li>
<li><p><code>sem_op</code> > 0 This signals that you want increase the semaphore value, or in other words release the given number of resources.</p></li>
</ol>


<p>Now we can write some code to implement the buffer example previously given. We are going to create 5 processes called W (writers) and a process called R (reader). Each W process tries to lock the resource (the buffer) through a semaphore, and if the buffer is not full, adds an element and releases the lock. The R process tries to lock the buffer, removes an element if available (buffer not empty) and releases the lock.</p>

<p>Since we did not yet talk about shared memory we have to simulate read and write operation, i.e. pretend the operation has been performed. This is necessary since each process has its own memory space and cannot access that of another process. So each process has its own copy of the buffer, and the copies are not linked each other. Later in this series we will talk about techniques that allow sharing memory regions between processes.</p>

<p>As already stated, we need 3 semaphores: the first acts as access controller and its maximum value is 1 while the other two manage overflow and underflow conditions. A single semaphore could not handle both conditions, since <code>semop()</code> acts one-way only.</p>

<p>Let's clarify this latter statement before looking at the code. Say we have a single semaphore to manage over- and underflow conditions, with a value equal to the number of empty spaces in the buffer. Each time a W process fills the buffer it can decrease the semaphore value by one unit until the value reaches 0, which represents the condition of full buffer. This way however the empty buffer condition cannot be managed since the R process can increment the value of the semaphore without any limit. Semaphores, indeed, just control the lower boundary and not the upper one.</p>

<p>``` c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;errno.h></h1>

<h1>include &lt;linux/types.h></h1>

<h1>include &lt;linux/ipc.h></h1>

<h1>include &lt;linux/sem.h></h1>

<p>int main(int argc, char <em>argv[])
{
  /</em> IPC structures */
  pid_t pid;
  key_t key;
  int semid;
  union semun arg;
  struct sembuf lock_res = {0, -1, 0};
  struct sembuf rel_res = {0, 1, 0};
  struct sembuf push[2] = {1, -1, IPC_NOWAIT, 2, 1, IPC_NOWAIT};
  struct sembuf pop[2] = {1, 1, IPC_NOWAIT, 2, -1, IPC_NOWAIT};</p>

<p>  int i, j;
  int len;
  int num_proc = 5;
  int num_write_actions = 20;
  int num_read_actions = 100;</p>

<p>  if(argc &lt; 2){</p>

<pre><code>printf("Usage: %s &lt;size&gt;\n", argv[0]);
exit(0);
</code></pre>

<p>  }</p>

<p>  len = strtol(argv[1], NULL, 10);</p>

<p>  key = ftok("/etc/fstab", getpid());</p>

<p>  /<em> Create a set with 3 semaphores </em>/
  semid = semget(key, 3, 0666 | IPC_CREAT);</p>

<p>  /<em> Initialize semaphore #0 to 1 - Resource controller </em>/
  arg.val = 1;
  semctl(semid, 0, SETVAL, arg);</p>

<p>  /<em> Initialize semaphore #1 to buf_length - Overflow controller </em>/
  /<em> Sem value represents free space in buffer </em>/
  arg.val = len;
  semctl(semid, 1, SETVAL, arg);</p>

<p>  /<em> Initialize semaphore #2 to buf_length - Underflow controller </em>/
  /<em> Sem value represents the number of elements in buffer </em>/
  arg.val = 0;
  semctl(semid, 2, SETVAL, arg);</p>

<p>  /<em> Fork </em>/
  for (i = 0; i &lt; num_proc; i++){</p>

<pre><code>pid = fork();
if (!pid){
  /* Child process code*/
  for (j = 0; j &lt; num_write_actions; j++){
sleep(rand()%6);

/* Try to lock the buffer - sem #0 */
if (semop(semid, &amp;lock_res, 1) == -1){
  perror("semop:lock_res (write)");
}

/* Lock a free cell - sem #1 */
/* Push an element - sem #2 */
if (semop(semid, &amp;push, 2) != -1){
  printf("---&gt; Child process %d: Element written\n", getpid());
}
else{
  printf("---&gt; Child process %d: BUFFER FULL\n", getpid());
}

/* Release the buffer */
semop(semid, &amp;rel_res, 1);
  }

  exit(0);
}
</code></pre>

<p>  }</p>

<p>  for (i = 0;i &lt; num_read_actions; i++){</p>

<pre><code>sleep(rand()%3);

/* Try to lock the buffer - sem #0 */
if (semop(semid, &amp;lock_res, 1) == -1){
  perror("semop:lock_res (read)");
}

/* Unlock a free cell - sem #1 */
/* Pop an element - sem #2 */
if (semop(semid, &amp;pop, 2) != -1){
  printf("&lt;--- Parent process %d: Element read\n", getpid());
}
else {
  printf("&lt;--- Parent process %d: BUFFER EMPTY\n", getpid());
}

/* Release the buffer */
semop(semid, &amp;rel_res, 1);
</code></pre>

<p>  }</p>

<p>  /<em> Destroy semaphores </em>/
  semctl(semid, 0, IPC_RMID);</p>

<p>  return 0;
}
```</p>

<p>Let us review the most interesting parts of the code.</p>

<p><code>c
  struct sembuf lock_res = {0, -1, 0};
  struct sembuf rel_res = {0, 1, 0};
  struct sembuf push[2] = {1, -1, IPC_NOWAIT, 2, 1, IPC_NOWAIT};
  struct sembuf pop[2] = {1, 1, IPC_NOWAIT, 2, -1, IPC_NOWAIT};
</code></p>

<p>These four lines of code declare the actions we will use later on the semaphore set. The first two are single actions while the second two are double ones. The first action, <code>lock_res</code>, is used to lock the buffer: as you can see the semaphore number 0 is decremented by 1 and in case of busy resource the strategy is waiting (the last 0 in the action). The second action releases the buffer and is the mirror image of the first one.</p>

<p>The third and fourth actions are specular too; each of them is an array of two actions, the first on the semaphore number 1 and the second on the semaphore number 2; while the first one is incremented the second is decremented and vice versa. The policy is changed from the first two actions: <code>IPC_NOWAIT</code> forces the process to continue execution, in contrast with the previous case, when the process was put on hold.</p>

<p>``` c
  /<em> Initialize semaphore #0 to 1 - Resource controller </em>/
  arg.val = 1;
  semctl(semid, 0, SETVAL, arg);</p>

<p>  /<em> Initialize semaphore #1 to buf_length - Overflow controller </em>/
  /<em> Sem value represents free space in buffer </em>/
  arg.val = len;
  semctl(semid, 1, SETVAL, arg);</p>

<p>  /<em> Initialize semaphore #2 to buf_length - Underflow controller </em>/
  /<em> Sem value represents the number of elements in buffer </em>/
  arg.val = 0;
  semctl(semid, 2, SETVAL, arg);
```</p>

<p>Next, semaphores must be initialized: as already stated the first one is set to 1, being a binary access controller, the second to the length of the buffer as overflow controller and the third to 0 as underflow controller.</p>

<p>``` c</p>

<pre><code>/* Try to lock the buffer - sem #0 */
if (semop(semid, &amp;lock_res, 1) == -1){
  perror("semop:lock_res (write)");
}

/* Lock a free cell - sem #1 */
/* Push an element - sem #2 */
if (semop(semid, &amp;push, 2) != -1){
  printf("---&gt; Child process %d: Element written\n", getpid());
}
else{
  printf("---&gt; Child process %d: BUFFER FULL\n", getpid());
}

/* Release the buffer */
semop(semid, &amp;rel_res, 1);
</code></pre>

<p>```</p>

<p>Child process code (a writer) tries first of all to lock the buffer using <code>lock_res</code>; once the control over the resource has been acquired it performs the <code>push</code> action and writes on the standard output a meaningful message. Otherwise, it signals that the buffer is full. The last action it performs is to release the resource through <code>rel_res</code>.</p>

<p>``` c</p>

<pre><code>/* Try to lock the buffer - sem #0 */
if (semop(semid, &amp;lock_res, 1) == -1){
  perror("semop:lock_res (read)");
}

/* Unlock a free cell - sem #1 */
/* Pop an element - sem #2 */
if (semop(semid, &amp;pop, 2) != -1){
  printf("&lt;--- Parent process %d: Element read\n", getpid());
}
else {
  printf("&lt;--- Parent process %d: BUFFER EMPTY\n", getpid());
}

/* Release the buffer */
semop(semid, &amp;rel_res, 1);
</code></pre>

<p>```</p>

<p>As you can immediately notice parent process (reader) mimics the behaviour of the child. It lock the buffer, reads some data with the <code>pop</code> action and release the resource.</p>

<p>Try to change the parameters such as the buffer length (on the command line) or the number of cycles performed by parent and child processes to see what happens.</p>

<h2>Conclusions</h2>

<p>In the next article, we will introduce and deal with atomicity, which is a very important concept in concurrent programming and database systems. We will also introduce a new IPC structure, which has a broad use in distributed systems: message queues.</p>

<h2>Past articles</h2>

<p><a href="/blog/2013/01/31/concurrent-programming-1">Concurrent Programming 1</a></p>

<p><a href="/blog/2013/02/04/concurrent-programming-2">Concurrent Programming 2</a></p>

<p><a href="/blog/2013/02/06/concurrent-programming-3">Concurrent Programming 3</a></p>

<h2>Next articles</h2>

<p><a href="/blog/2013/02/28/concurrent-programming-5">Concurrent Programming 5</a></p>
]]></content>
  </entry>
  
</feed>
